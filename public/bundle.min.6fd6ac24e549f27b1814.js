webpackJsonp([1,2],[,,,,,,,,,,,,,,,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.closeCart=t.openCart=t.updateCartItem=t.updateCartItemsCount=t.updateCartSubtotal=t.addToCart=t.startAddorUpdateCartItem=void 0;var i=n(24),o=r(i),a=(t.startAddorUpdateCartItem=function(e,t){return function(n,r){function i(e){return o.lineItems.filter(function(t){return t.variant_id===e})[0]}var o=r().cart,c=void 0;c=e.variant_id?e.variant_id:e.id;var f=i(c);n(f?u(f,parseInt(t)):a(e,t)),n(s()),n(l(t))}},t.addToCart=function(e,t){return function(n,r){o.default.cart.createLineItemsFromVariants({variant:e,quantity:t}).then(function(e){var t=e.lineItems;n({type:"UPDATE_CART_ITEMS",updatedCartItems:t}),n(c())}).catch(function(e){console.log("Failed to addToCart",e)})}}),s=t.updateCartSubtotal=function(){return function(e,t){var n=o.default.cart.subtotal;e({type:"UPDATE_CART_SUBTOTAL",newSubtotal:n})}},l=t.updateCartItemsCount=function(e){return function(t,n){var r=n().cart,i=parseInt(r.lineItemsCount)+parseInt(e);console.log("new quantity: ",e),console.log("old quantity: ",r.lineItemsCount),console.log("updatedCartItemsCount: ",i),t({type:"UPDATE_CART_ITEMS_COUNT",updatedCartItemsCount:i}),t(parseInt(i)<1?f():c())}},u=t.updateCartItem=function(e,t){return function(n,r){var i=r().cart,a=e.quantity+t,s=[];i.lineItems.forEach(function(t){if(e.id===t.id){if(a>0){var n=[];n=t,n.quantity=a,s.push(n)}}else s.push(t)}),o.default.cart.updateLineItem(e.id,a).then(function(){n({type:"UPDATE_CART_ITEMS",updatedCartItems:s})})}},c=t.openCart=function(){return{type:"OPEN_CART"}},f=t.closeCart=function(){return{type:"CLOSE_CART"}}},,,,,,,,,function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=(n(0),n(335)),a=(n(49).configure(),function(){function e(){r(this,e),this.client=o.buildClient({apiKey:"e0ab8cf9b5a30cee2616bf151a56c763",domain:"rmc-preview.myshopify.com",appId:"6"}),this.cart={}}return i(e,[{key:"createCart",value:function(){var e=this;return new Promise(function(t,n){e.client.createCart().then(function(n){localStorage.setItem("lastCartId",n.id),console.log("created new cart",n),e.cart=n;var r={isOpen:!1,lineItemsCount:0,lineItems:[],subtotal:0};t(r)})})}},{key:"restoreCart",value:function(){var e=this;return new Promise(function(t,n){e.client.fetchCart(localStorage.getItem("lastCartId")).then(function(n){e.cart=n;var r={isOpen:!1,lineItemsCount:n.lineItemCount,lineItems:n.lineItems,subtotal:n.subtotal};t(r)})})}}]),e}());t.default=new a},,,,,,,,,,,,,,function(e,t,n){var r,i;/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";function n(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r))e.push(n.apply(null,r));else if("object"===i)for(var a in r)o.call(r,a)&&r[a]&&e.push(a)}}return e.join(" ")}var o={}.hasOwnProperty;"undefined"!=typeof e&&e.exports?e.exports=n:(r=[],i=function(){return n}.apply(t,r),!(void 0!==i&&(e.exports=i)))}()},,,,,,,,,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.addCollections=t.startAddCollections=t.setActiveCollection=void 0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(24),a=r(o),s=(t.setActiveCollection=function(e){return function(t){return a.default.client.fetchCollection(e).then(function(e){var n=e||{},r=i({},n);t({type:"SET_ACTIVE_COLLECTION",parsedCollection:r})})}},t.startAddCollections=function(){return function(e){return a.default.client.fetchAllCollections().then(function(t){var n=t||{},r=[];Object.keys(n).forEach(function(e){r.push(i({key:e},n[e]))}),e(s(r))})}},t.addCollections=function(e){return{type:"ADD_COLLECTIONS",collections:e}})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.updateActiveProductOptions=t.clearActiveProduct=t.setActiveProduct=t.preloadProductImages=t.addProducts=t.startAddProducts=void 0;var i=n(24),o=r(i),a=(t.startAddProducts=function(){return function(e){return o.default.client.fetchAllProducts().then(function(t){var n=t||{},r=n.map(function(e,t){var n=[];return n=e,n.key=t,n});e(a(r)),e(s())})}},t.addProducts=function(e){return{type:"ADD_PRODUCTS",products:e}}),s=t.preloadProductImages=function(){return function(e,t){var n=t().products.all,r=[];n.map(function(e,t){return r[t]=new Image,r[t].src=e.selectedVariant.imageVariants[4].src,r[t]})}};t.setActiveProduct=function(e){return{type:"SET_ACTIVE_PRODUCT",options:e}},t.clearActiveProduct=function(){return{type:"CLEAR_ACTIVE_PRODUCT"}},t.updateActiveProductOptions=function(e){return{type:"UPDATE_ACTIVE_PRODUCT_OPTIONS",options:e}}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}Object.defineProperty(t,"__esModule",{value:!0}),t.configure=void 0;var o=n(148),a=i(o),s=n(330),l=r(s),u=n(168);t.configure=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=a.combineReducers({products:u.productsReducer,collections:u.collectionsReducer,cart:u.cartReducer,nav:u.navReducer}),n=a.createStore(t,e,a.compose(a.applyMiddleware(l.default),window.devToolsExtension?window.devToolsExtension():function(e){return e}));return n}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(){return a.default.createElement("div",{className:"loader"},a.default.createElement("i",{className:"fa fa-circle-o-notch fa-spin fa-3x fa-fw"}))}Object.defineProperty(t,"__esModule",{value:!0}),t.default=i;var o=n(0),a=r(o)},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(){r(this,e)}return i(e,[{key:"asMoney",value:function(e,t,n,r,i){t=t||"$",n=n||",",r=r||".",i=i||".";var o=new RegExp("(\\d)(?=(\\d{3})+\\.)","g");return t+parseFloat(e,10).toFixed(2).replace(i,r).replace(o,"$1"+n).toString()}}]),e}();t.default=new o},,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(0),a=r(o),s=n(17),l=r(s),u=n(140),c=n(3),f=r(c),d={initialize:function(e){var t,n=l.default.findDOMNode(this.list),r=a.default.Children.count(e.children),i=this.getWidth(n),o=this.getWidth(l.default.findDOMNode(this.track));if(e.vertical)t=this.getWidth(l.default.findDOMNode(this));else{var s=e.centerMode&&2*parseInt(e.centerPadding);t=(this.getWidth(l.default.findDOMNode(this))-s)/e.slidesToShow}var c=this.getHeight(n.querySelector('[data-index="0"]')),d=c*e.slidesToShow,p=e.rtl?r-1-e.initialSlide:e.initialSlide;this.setState({slideCount:r,slideWidth:t,listWidth:i,trackWidth:o,currentSlide:p,slideHeight:c,listHeight:d},function(){var t=(0,u.getTrackLeft)((0,f.default)({slideIndex:this.state.currentSlide,trackRef:this.track},e,this.state)),n=(0,u.getTrackCSS)((0,f.default)({left:t},e,this.state));this.setState({trackStyle:n}),this.autoPlay()})},update:function(e){var t,n=l.default.findDOMNode(this.list),r=a.default.Children.count(e.children),i=this.getWidth(n),o=this.getWidth(l.default.findDOMNode(this.track));if(e.vertical)t=this.getWidth(l.default.findDOMNode(this));else{var s=e.centerMode&&2*parseInt(e.centerPadding);t=(this.getWidth(l.default.findDOMNode(this))-s)/e.slidesToShow}var c=this.getHeight(n.querySelector('[data-index="0"]')),d=c*e.slidesToShow;e.autoplay?this.pause():this.autoPlay(),this.setState({slideCount:r,slideWidth:t,listWidth:i,trackWidth:o,slideHeight:c,listHeight:d},function(){var t=(0,u.getTrackLeft)((0,f.default)({slideIndex:this.state.currentSlide,trackRef:this.track},e,this.state)),n=(0,u.getTrackCSS)((0,f.default)({left:t},e,this.state));this.setState({trackStyle:n})})},getWidth:function(e){return e.getBoundingClientRect().width||e.offsetWidth||0},getHeight:function(e){return e.getBoundingClientRect().height||e.offsetHeight||0},adaptHeight:function(){if(this.props.adaptiveHeight){var e='[data-index="'+this.state.currentSlide+'"]';if(this.list){var t=l.default.findDOMNode(this.list);t.style.height=t.querySelector(e).offsetHeight+"px"}}},canGoNext:function(e){var t=!0;return e.infinite||(e.centerMode?e.currentSlide>=e.slideCount-1&&(t=!1):(e.slideCount<=e.slidesToShow||e.currentSlide>=e.slideCount-e.slidesToShow)&&(t=!1)),t},slideHandler:function(e){var t,n,r,i,o,a=this;if(!this.props.waitForAnimate||!this.state.animating){if(this.props.fade){if(n=this.state.currentSlide,this.props.infinite===!1&&(e<0||e>=this.state.slideCount))return;return t=e<0?e+this.state.slideCount:e>=this.state.slideCount?e-this.state.slideCount:e,this.props.lazyLoad&&this.state.lazyLoadedList.indexOf(t)<0&&this.setState({lazyLoadedList:this.state.lazyLoadedList.concat(t)}),o=function(){a.setState({animating:!1}),a.props.afterChange&&a.props.afterChange(t),delete a.animationEndCallback},this.setState({animating:!0,currentSlide:t},function(){this.animationEndCallback=setTimeout(o,this.props.speed)}),this.props.beforeChange&&this.props.beforeChange(this.state.currentSlide,t),void this.autoPlay()}if(t=e,n=t<0?this.props.infinite===!1?0:this.state.slideCount%this.props.slidesToScroll!==0?this.state.slideCount-this.state.slideCount%this.props.slidesToScroll:this.state.slideCount+t:t>=this.state.slideCount?this.props.infinite===!1?this.state.slideCount-this.props.slidesToShow:this.state.slideCount%this.props.slidesToScroll!==0?0:t-this.state.slideCount:t,r=(0,u.getTrackLeft)((0,f.default)({slideIndex:t,trackRef:this.track},this.props,this.state)),i=(0,u.getTrackLeft)((0,f.default)({slideIndex:n,trackRef:this.track},this.props,this.state)),this.props.infinite===!1&&(r=i),this.props.beforeChange&&this.props.beforeChange(this.state.currentSlide,n),this.props.lazyLoad){for(var s=!0,l=[],c=t;c<t+this.props.slidesToShow;c++)s=s&&this.state.lazyLoadedList.indexOf(c)>=0,s||l.push(c);s||this.setState({lazyLoadedList:this.state.lazyLoadedList.concat(l)})}if(this.props.useCSS===!1)this.setState({currentSlide:n,trackStyle:(0,u.getTrackCSS)((0,f.default)({left:i},this.props,this.state))},function(){this.props.afterChange&&this.props.afterChange(n)});else{var d={animating:!1,currentSlide:n,trackStyle:(0,u.getTrackCSS)((0,f.default)({left:i},this.props,this.state)),swipeLeft:null};o=function(){a.setState(d),a.props.afterChange&&a.props.afterChange(n),delete a.animationEndCallback},this.setState({animating:!0,currentSlide:n,trackStyle:(0,u.getTrackAnimateCSS)((0,f.default)({left:r},this.props,this.state))},function(){this.animationEndCallback=setTimeout(o,this.props.speed)})}this.autoPlay()}},swipeDirection:function(e){var t,n,r,i;return t=e.startX-e.curX,n=e.startY-e.curY,r=Math.atan2(n,t),i=Math.round(180*r/Math.PI),i<0&&(i=360-Math.abs(i)),i<=45&&i>=0||i<=360&&i>=315?this.props.rtl===!1?"left":"right":i>=135&&i<=225?this.props.rtl===!1?"right":"left":this.props.verticalSwiping===!0?i>=35&&i<=135?"down":"up":"vertical"},play:function(){var e;if(!this.state.mounted)return!1;if(this.props.rtl)e=this.state.currentSlide-this.props.slidesToScroll;else{if(!this.canGoNext(i({},this.props,this.state)))return!1;e=this.state.currentSlide+this.props.slidesToScroll}this.slideHandler(e)},autoPlay:function(){this.state.autoPlayTimer&&clearTimeout(this.state.autoPlayTimer),this.props.autoplay&&this.setState({autoPlayTimer:setTimeout(this.play,this.props.autoplaySpeed)})},pause:function(){this.state.autoPlayTimer&&(clearTimeout(this.state.autoPlayTimer),this.setState({autoPlayTimer:null}))}};t.default=d},,,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=r(l),c=n(8),f=c.connect,d=n(47),p=function(e){function t(){return i(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return a(t,e),s(t,[{key:"componentWillMount",value:function(){var e=this.props.dispatch;e(d.setActiveCollection(this.props.params.collectionId))}},{key:"render",value:function(){var e=void 0;if(e=this.props.collection){var t=(this.props.dispatch,e),n=(t.collection_id,t.title);return u.default.createElement("div",{className:"collection-index"},u.default.createElement("h1",{className:"text-center"},n))}return u.default.createElement("div",null,"Loading collection...")}}]),t}(u.default.Component);t.default=f(function(e){return{collection:e.collections.active}})(p)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=r(l),c=n(12),f=n(51),d=r(f),p=n(283),h=r(p),m=n(24),v=r(m),y=n(50),g=r(y),b=n(8),w=b.connect,E=n(48),_=n(15),S=function(e){function t(){i(this,t);var e=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));e.state={modalIsOpen:!1},e.openModal=e.openModal.bind(e),e.closeModal=e.closeModal.bind(e);return e}return a(t,e),s(t,[{key:"componentWillMount",value:function(){var e=this;this.dispatch=this.props.dispatch,v.default.client.fetchProduct(this.props.params.productId).then(function(t){var n=t||{};e.product=n,e.dispatch(E.setActiveProduct(n.options))})}},{key:"componentWillUnmount",value:function(){this.dispatch(E.clearActiveProduct())}},{key:"closeModal",value:function(){this.setState({modalIsOpen:!1})}},{key:"openModal",value:function(){this.setState({modalIsOpen:!0})}},{key:"handleOptionChange",value:function(e,t){this.product.options.filter(function(t){return t.name===e})[0].selected=t,this.dispatch(E.updateActiveProductOptions(this.product.options))}},{key:"render",value:function(){var e=this,t=void 0;if(t=this.product){var n=this.props.dispatch,r=t.attrs,i=(r.product_id,r.title),o=(r.images,r.options,t),a=o.description,s=o.selectedVariant,l=o.selectedVariantImage,f=function(){return u.default.createElement("div",{className:"product-options"},t.options.map(function(t,n){if("Size"!=t.name&&"Title"!=t.name)return u.default.createElement("select",{key:n,name:t.name,value:t.selected,onChange:function(n){e.handleOptionChange(t.name,n.target.value)}},t.values.map(function(e,t){return u.default.createElement("option",{key:t,value:e},e)}))}))},p=function(){return t.options.map(function(t,n){if("Size"==t.name)return u.default.createElement("ul",{key:n,className:"product-sizes"},t.values.map(function(n,r){return u.default.createElement("li",{key:r,className:"product-size "+(t.selected===n?"selected":""),onClick:function(){e.handleOptionChange(t.name,n)}},n)}))})};return console.log("activeProduct: ",t),u.default.createElement("div",{className:"container"},u.default.createElement("div",{className:"row"},u.default.createElement("div",{className:"small-12 medium-8 column"},u.default.createElement("button",{onClick:c.browserHistory.goBack,className:"button hollow"},"‹ Back to products"),u.default.createElement("p",{className:"text-center"},u.default.createElement("img",{src:l.src,alt:""}))),u.default.createElement("div",{className:"small-12 medium-4 column"},u.default.createElement("h1",{className:"product-title"},i),u.default.createElement("div",{className:"product-info"},u.default.createElement("h5",{className:"product-info__headline"},"Artist"),u.default.createElement("p",null,"JWISH88"),u.default.createElement("h5",{className:"product-info__headline"},"Description"),u.default.createElement("div",{dangerouslySetInnerHTML:{__html:a}}),f(),p(),u.default.createElement("div",{className:"product-price"},d.default.asMoney(s.price)),u.default.createElement("div",{className:"product-charity"},u.default.createElement("input",{type:"text",placeholder:"Choose Charity"}),u.default.createElement("button",{type:"submit",className:"product-charity__button"},u.default.createElement("i",{className:"fa fa-caret-right"})),u.default.createElement("div",{className:"product-charity__more-info",onClick:this.openModal},u.default.createElement("i",{className:"fa fa-info-circle"})," ",u.default.createElement("a",{href:"#"},"more info")),u.default.createElement(h.default,{isOpen:this.state.modalIsOpen,onRequestClose:this.closeModal,contentLabel:"more info",closeTimeoutMS:200,className:"ReactModal__Content"},u.default.createElement("p",null,"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque egestas, nibh sed tristique ornare, nunc dui sollicitudin elit, id consectetur odio lectus eu nulla. Proin dapibus convallis urna sit amet dictum. Ut porttitor ligula at purus auctor molestie. Etiam velit nibh, porttitor at ipsum mattis, consectetur egestas arcu. Donec pellentesque augue sit amet elementum facilisis. Aenean semper malesuada ligula faucibus sollicitudin. Curabitur ut lorem ac erat porta lacinia pulvinar et risus."),u.default.createElement("p",null,"Sed at nulla dolor. Ut quis quam finibus, efficitur mi sed, sollicitudin urna. Nunc vel tortor commodo, mollis est eu, blandit massa. Vivamus sed mi vitae sem commodo consectetur eu in sem. Donec ut facilisis odio. Nullam id elementum eros, non tempus tortor. Nullam in mattis felis. Praesent bibendum blandit ante, et elementum metus consectetur vitae."),u.default.createElement("button",{className:"close-modal-icon",onClick:this.closeModal},u.default.createElement("i",{className:"fa fa-times"})))),u.default.createElement("button",{onClick:function(){n(_.startAddorUpdateCartItem(t.selectedVariant,1))},className:"button large add-to-cart"},"Add To Cart"),u.default.createElement("img",{src:"/images/credit-cards.png",alt:"Accepted credit cards"})))))}return u.default.createElement(g.default,null)}}]),t}(u.default.Component);t.default=w(function(e){return{activeProduct:e.products.active}})(S)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=r(l),c=n(12),f=function(e){function t(){return i(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),s(t,[{key:"render",value:function(){var e=this.props,t=e.title,n=e.id,r=e.image;return u.default.createElement("div",{className:"product-item"},u.default.createElement("div",{className:"product-item-inner"},u.default.createElement(c.Link,{to:"/product/"+n},u.default.createElement("div",{className:"product-item-image",style:{backgroundImage:"url("+r+")"}})),u.default.createElement("hr",null),u.default.createElement("h6",{className:"product-item-title"},u.default.createElement(c.Link,{to:"/product/"+n},t)),u.default.createElement("div",{className:"author"},u.default.createElement("div",{className:"author__photo",style:{backgroundImage:"url("+r+")"}}),u.default.createElement("div",{className:"author__info"},u.default.createElement(c.Link,{to:"/author/"},u.default.createElement("div",{className:"author__name"},"James88"),u.default.createElement("div",{className:"author__location"},"Canton Ohio"))))))}}]),t}(u.default.Component);e.exports=f},,,,,,,,function(e,t,n){var r=n(337),i=function(e){var t=/[height|width]$/;return t.test(e)},o=function(e){var t="",n=Object.keys(e);return n.forEach(function(o,a){var s=e[o];o=r(o),i(o)&&"number"==typeof s&&(s+="px"),t+=s===!0?o:s===!1?"not "+o:"("+o+": "+s+")",a<n.length-1&&(t+=" and ")}),t},a=function(e){var t="";return"string"==typeof e?e:e instanceof Array?(e.forEach(function(n,r){t+=o(n),r<e.length-1&&(t+=", ")}),t):o(e)};e.exports=a},,function(e,t){function n(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function r(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function i(e,t){return function(n){return e(t(n))}}function o(e,t){var n=R(e)||m(e)?r(e.length,String):[],i=n.length,o=!!i;for(var a in e)!t&&!A.call(e,a)||o&&("length"==a||f(a,i))||n.push(a);return n}function a(e,t,n){var r=e[t];A.call(e,t)&&h(r,n)&&(void 0!==n||t in e)||(e[t]=n)}function s(e){if(!p(e))return M(e);var t=[];for(var n in Object(e))A.call(e,n)&&"constructor"!=n&&t.push(n);return t}function l(e,t){return t=j(void 0===t?e.length-1:t,0),function(){for(var r=arguments,i=-1,o=j(r.length-t,0),a=Array(o);++i<o;)a[i]=r[t+i];i=-1;for(var s=Array(t+1);++i<t;)s[i]=r[i];return s[t]=a,n(e,this,s)}}function u(e,t,n,r){n||(n={});for(var i=-1,o=t.length;++i<o;){var s=t[i],l=r?r(n[s],e[s],s,n,e):void 0;a(n,s,void 0===l?e[s]:l)}return n}function c(e){return l(function(t,n){var r=-1,i=n.length,o=i>1?n[i-1]:void 0,a=i>2?n[2]:void 0;for(o=e.length>3&&"function"==typeof o?(i--,o):void 0,a&&d(n[0],n[1],a)&&(o=i<3?void 0:o,i=1),t=Object(t);++r<i;){var s=n[r];s&&e(t,s,r,o)}return t})}function f(e,t){return t=null==t?S:t,!!t&&("number"==typeof e||k.test(e))&&e>-1&&e%1==0&&e<t}function d(e,t,n){if(!w(n))return!1;var r=typeof t;return!!("number"==r?v(n)&&f(t,n.length):"string"==r&&t in n)&&h(n[t],e)}function p(e){var t=e&&e.constructor,n="function"==typeof t&&t.prototype||P;return e===n}function h(e,t){return e===t||e!==e&&t!==t}function m(e){return y(e)&&A.call(e,"callee")&&(!x.call(e,"callee")||N.call(e)==C)}function v(e){return null!=e&&b(e.length)&&!g(e)}function y(e){return E(e)&&v(e)}function g(e){var t=w(e)?N.call(e):"";return t==O||t==T}function b(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=S}function w(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function E(e){return!!e&&"object"==typeof e}function _(e){return v(e)?o(e):s(e)}var S=9007199254740991,C="[object Arguments]",O="[object Function]",T="[object GeneratorFunction]",k=/^(?:0|[1-9]\d*)$/,P=Object.prototype,A=P.hasOwnProperty,N=P.toString,x=P.propertyIsEnumerable,M=i(Object.keys,Object),j=Math.max,I=!x.call({valueOf:1},"valueOf"),R=Array.isArray,L=c(function(e,t){if(I||p(t)||v(t))return void u(t,_(t),e);for(var n in t)A.call(t,n)&&a(e,n,t[n])});e.exports=L},,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t){function n(e){console.warn("[react-ga]",e)}e.exports=n},function(e,t){function n(e){return e.replace(/^\s+|\s+$/g,"")}e.exports=n},function(e,t){/*!
 * Adapted from jQuery UI core
 *
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */
function n(e,t){var n=e.nodeName.toLowerCase();return(/input|select|textarea|button|object/.test(n)?!e.disabled:"a"===n?e.href||t:t)&&i(e)}function r(e){return e.offsetWidth<=0&&e.offsetHeight<=0||"none"===e.style.display}function i(e){for(;e&&e!==document.body;){if(r(e))return!1;e=e.parentNode}return!0}function o(e){var t=e.getAttribute("tabindex");null===t&&(t=void 0);var r=isNaN(t);return(r||t>=0)&&n(e,!r)}function a(e){return[].slice.call(e.querySelectorAll("*"),0).filter(function(e){return o(e)})}e.exports=a},,,,,,,,,,,,,,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var i=n(0),o=r(i),a={className:"",accessibility:!0,adaptiveHeight:!1,arrows:!0,autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e){return o.default.createElement("button",null,e+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,infinite:!0,initialSlide:0,lazyLoad:!1,pauseOnHover:!0,responsive:null,rtl:!1,slide:"div",slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,variableWidth:!1,vertical:!1,waitForAnimate:!0,afterChange:null,beforeChange:null,edgeEvent:null,init:null,swipeEvent:null,nextArrow:null,prevArrow:null};e.exports=a},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.getTrackLeft=t.getTrackAnimateCSS=t.getTrackCSS=void 0;var i=n(17),o=r(i),a=n(3),s=r(a),l=function(e,t){return t.reduce(function(t,n){return t&&e.hasOwnProperty(n)},!0)?null:console.error("Keys Missing",e)},u=t.getTrackCSS=function(e){l(e,["left","variableWidth","slideCount","slidesToShow","slideWidth"]);var t,n,r=e.slideCount+2*e.slidesToShow;e.vertical?n=r*e.slideHeight:t=e.variableWidth?(e.slideCount+2*e.slidesToShow)*e.slideWidth:e.centerMode?(e.slideCount+2*(e.slidesToShow+1))*e.slideWidth:(e.slideCount+2*e.slidesToShow)*e.slideWidth;var i={opacity:1,WebkitTransform:e.vertical?"translate3d(0px, "+e.left+"px, 0px)":"translate3d("+e.left+"px, 0px, 0px)",transform:e.vertical?"translate3d(0px, "+e.left+"px, 0px)":"translate3d("+e.left+"px, 0px, 0px)",transition:"",WebkitTransition:"",msTransform:e.vertical?"translateY("+e.left+"px)":"translateX("+e.left+"px)"};return t&&(0,s.default)(i,{width:t}),n&&(0,s.default)(i,{height:n}),window&&!window.addEventListener&&window.attachEvent&&(e.vertical?i.marginTop=e.left+"px":i.marginLeft=e.left+"px"),i};t.getTrackAnimateCSS=function(e){l(e,["left","variableWidth","slideCount","slidesToShow","slideWidth","speed","cssEase"]);var t=u(e);return t.WebkitTransition="-webkit-transform "+e.speed+"ms "+e.cssEase,t.transition="transform "+e.speed+"ms "+e.cssEase,t},t.getTrackLeft=function(e){l(e,["slideIndex","trackRef","infinite","centerMode","slideCount","slidesToShow","slidesToScroll","slideWidth","listWidth","variableWidth","slideHeight"]);var t,n,r=0,i=0;if(e.fade)return 0;if(e.infinite)e.slideCount>=e.slidesToShow&&(r=e.slideWidth*e.slidesToShow*-1,i=e.slideHeight*e.slidesToShow*-1),e.slideCount%e.slidesToScroll!==0&&e.slideIndex+e.slidesToScroll>e.slideCount&&e.slideCount>e.slidesToShow&&(e.slideIndex>e.slideCount?(r=(e.slidesToShow-(e.slideIndex-e.slideCount))*e.slideWidth*-1,i=(e.slidesToShow-(e.slideIndex-e.slideCount))*e.slideHeight*-1):(r=e.slideCount%e.slidesToScroll*e.slideWidth*-1,i=e.slideCount%e.slidesToScroll*e.slideHeight*-1));else if(e.slideCount%e.slidesToScroll!==0&&e.slideIndex+e.slidesToScroll>e.slideCount&&e.slideCount>e.slidesToShow){var a=e.slidesToShow-e.slideCount%e.slidesToScroll;r=a*e.slideWidth}if(e.centerMode&&(e.infinite?r+=e.slideWidth*Math.floor(e.slidesToShow/2):r=e.slideWidth*Math.floor(e.slidesToShow/2)),t=e.vertical?e.slideIndex*e.slideHeight*-1+i:e.slideIndex*e.slideWidth*-1+r,e.variableWidth===!0){var s;e.slideCount<=e.slidesToShow||e.infinite===!1?n=o.default.findDOMNode(e.trackRef).childNodes[e.slideIndex]:(s=e.slideIndex+e.slidesToShow,n=o.default.findDOMNode(e.trackRef).childNodes[s]),t=n?n.offsetLeft*-1:0,e.centerMode===!0&&(n=e.infinite===!1?o.default.findDOMNode(e.trackRef).children[e.slideIndex]:o.default.findDOMNode(e.trackRef).children[e.slideIndex+e.slidesToShow+1],n&&(t=n.offsetLeft*-1+(e.listWidth-n.offsetWidth)/2))}return t}},,,,,,,,,,function(e,t){throw new Error("Module parse failed: /Users/julianjorgensen/sites/rmc/app/styles/app.scss Unexpected character '@' (1:0)\nYou may need an appropriate loader to handle this file type.\n| @import \"base/variables\";\n| \n| // foundation")},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e){I.default.set({page:e.pathname}),I.default.pageview(e.pathname)}Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=r(o),s=n(12),l=n(16),u=(r(l),n(159)),c=r(u),f=n(158),d=r(f),p=n(160),h=r(p),m=n(84),v=r(m),y=n(155),g=r(y),b=n(83),w=r(b),E=n(161),_=r(E),S=n(167),C=r(S),O=n(166),T=r(O),k=n(165),P=r(k),A=n(163),N=r(A),x=n(164),M=r(x),j=n(272),I=r(j),R=n(8);R.connect,n(49).configure();s.browserHistory.listen(function(e){i(e),window.scrollTo(0,0)}),t.default=a.default.createElement(s.Router,{history:s.browserHistory},a.default.createElement(s.Route,{path:"/",component:c.default},a.default.createElement(s.IndexRoute,{path:"/",component:d.default}),a.default.createElement(s.Route,{path:"collections",component:g.default}),a.default.createElement(s.Route,{path:"collection/:collectionId",component:w.default}),a.default.createElement(s.Route,{path:"products",component:h.default}),a.default.createElement(s.Route,{path:"product/:productId",component:v.default}),a.default.createElement(s.Route,{path:"my-city",component:h.default}),a.default.createElement(s.Route,{path:"upload",component:_.default}),a.default.createElement(s.Route,{path:"order-status",component:C.default}),a.default.createElement(s.Route,{path:"map",component:T.default}),a.default.createElement(s.Route,{path:"login",component:P.default}),a.default.createElement(s.Route,{path:"about",component:N.default}),a.default.createElement(s.Route,{path:"contact",component:M.default})))},,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=r(l),c=n(51),f=r(c),d=n(8),p=d.connect,h=n(15),m=function(e){function t(){return i(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return a(t,e),s(t,[{key:"render",value:function(){var e=this.props,t=e.dispatch,n=e.item,r=(e.incrementLineItem,e.quantity),i=function(e){t(h.startAddorUpdateCartItem(n,parseInt(e)))};return u.default.createElement("div",{className:"cart-item"},u.default.createElement("div",{className:"cart-item__img",style:{backgroundImage:"url("+n.imageVariants[2].src+")"}}),u.default.createElement("div",{className:"cart-item__content"},u.default.createElement("div",{className:"cart-item__content-row"},u.default.createElement("div",{className:"cart-item__variant-title"},n.variant_title),u.default.createElement("span",{className:"cart-item__title"},n.title)),u.default.createElement("div",{className:"cart-item__content-row"},u.default.createElement("div",{className:"cart-item__quantity-container"},u.default.createElement("button",{className:"btn--seamless quantity-decrement",type:"button",onClick:function(){i(-1)}},u.default.createElement("span",null,"-"),u.default.createElement("span",{className:"hide"},"Decrement")),u.default.createElement("input",{value:r,className:"cart-item__quantity",type:"number",min:"0",readOnly:!0}),u.default.createElement("button",{className:"btn--seamless quantity-increment",type:"button",onClick:function(){i(1)}},u.default.createElement("span",null,"+"),u.default.createElement("span",{className:"hide"},"Increment"))),u.default.createElement("span",{className:"cart-item__price"},f.default.asMoney(n.price*r)))))}}]),t}(u.default.Component);t.default=p(function(e){return{cart:e.cart}})(m)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=r(l),c=n(12),f=function(e){function t(){return i(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),s(t,[{key:"render",value:function(){var e=this.props,t=e.title,n=e.id;return u.default.createElement("div",{className:"collection-item"},u.default.createElement("div",{className:"collection-item-inner"},u.default.createElement("h2",{className:"text-center"},u.default.createElement(c.Link,{to:"/collection/"+n},t))))}}]),t}(u.default.Component);e.exports=f},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=r(l),c=n(83),f=(r(c),n(154)),d=r(f),p=n(8),h=p.connect,m=(n(47),function(e){function t(){return i(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return a(t,e),s(t,[{key:"render",value:function(){var e=this.props.collections;return e.length>0?u.default.createElement("div",{className:"row"},e.map(function(e){return u.default.createElement(d.default,{key:e.collection_id,id:e.collection_id,title:e.title})})):u.default.createElement("div",null,"Loading collections...")}}]),t}(u.default.Component));t.default=h(function(e){return{collections:e.collections.all}})(m)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=r(l),c=n(12),f=function(e){function t(){return i(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return a(t,e),s(t,[{key:"render",value:function(){return u.default.createElement("footer",{id:"site-footer"},u.default.createElement("nav",{className:"footer-nav"},u.default.createElement("li",null,u.default.createElement(c.Link,{to:"/about",activeClassName:"active"},"About")),u.default.createElement("li",null,u.default.createElement(c.Link,{to:"/products",activeClassName:"active"},"Shop All")),u.default.createElement("li",null,u.default.createElement(c.Link,{to:"/contact",activeClassName:"active"},"Contact")),u.default.createElement("li",null,u.default.createElement(c.Link,{to:"/upload",activeClassName:"active"},"Upload Design"))),u.default.createElement("p",null,"Lorem ipsum dolar sit amit. Sed dono avec."))}}]),t}(u.default.Component);e.exports=f},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=r(l),c=n(12),f=n(8),d=f.connect,p=n(15),h=function(e){function t(){return i(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return a(t,e),s(t,[{key:"render",value:function(){var e=this.props,t=e.dispatch,n=e.cartItems;return u.default.createElement("header",{id:"site-header"},u.default.createElement("ul",{className:"mini-nav"},u.default.createElement("li",{className:"mini-nav-item"},u.default.createElement(c.Link,{to:"/about",activeClassName:"active"},"About")),u.default.createElement("li",{className:"mini-nav-item"},u.default.createElement(c.Link,{to:"/order-status",activeClassName:"active"},"Order Status")),u.default.createElement("li",{className:"mini-nav-item"},u.default.createElement(c.Link,{to:"/map",activeClassName:"active"},"Map")),u.default.createElement("li",{className:"mini-nav-item"},u.default.createElement(c.Link,{to:"/login",activeClassName:"active"},"Login")),u.default.createElement("li",{className:"mini-nav-item mini-nav-item-cart",onClick:function(){t(p.openCart())}},u.default.createElement("i",{className:"fa fa-shopping-cart"})," ",n>0?"["+n+"]":"")),u.default.createElement("div",{id:"site-logo"},u.default.createElement(c.IndexLink,{to:"/",activeClassName:"active",activeStyle:{fontWeight:"bold"}},u.default.createElement("img",{src:"/images/logo.png"}))),u.default.createElement("nav",{id:"site-nav"},u.default.createElement("li",{className:"site-nav-item"},u.default.createElement(c.Link,{to:"/products",activeClassName:"active"},"Shop")),u.default.createElement("li",{className:"site-nav-item"},u.default.createElement(c.Link,{to:"/my-city",activeClassName:"active"},"My City")),u.default.createElement("li",{className:"site-nav-item"},u.default.createElement(c.Link,{to:"/categories",activeClassName:"active"},"Categories")),u.default.createElement("div",{id:"site-nav-upload"},u.default.createElement(c.Link,{to:"/upload"},u.default.createElement("img",{src:"/images/upload.png"})))))}}]),t}(u.default.Component);t.default=d(function(e){return{cartItems:e.cart.lineItemsCount}})(h)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=r(l),c=n(313),f=r(c),d=n(12),p=n(50),h=r(p),m=n(85),v=r(m),y=n(8),g=y.connect,b=n(15),w=function(e){function t(){return i(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return a(t,e),s(t,[{key:"handleAddToCart",value:function(e){var t=this.props.dispatch;t(b.startAddorUpdateCartItem(e.selectedVariant,1))}},{key:"render",value:function(){var e=this,t=this.props.products;t=t.slice(0,12);var n={className:"center products-carousel",infinite:!0,centerPadding:"60px",autoplay:!0,slidesToShow:4,speed:500,arrows:!1,lazyLoad:!0,responsive:[{breakpoint:1024,settings:{slidesToShow:3,slidesToScroll:3,infinite:!0}},{breakpoint:600,settings:{slidesToShow:2,slidesToScroll:2,initialSlide:2}},{breakpoint:480,settings:{slidesToShow:1,slidesToScroll:1}}]};return t.length>0?u.default.createElement("div",null,u.default.createElement(f.default,n,t.map(function(e,t){return u.default.createElement("div",{key:t,className:"products-carousel-item"},u.default.createElement(d.Link,{to:"/product/"+e.attrs.product_id},u.default.createElement("div",{className:"product-item-image",style:{backgroundImage:"url("+e.selectedVariant.imageVariants[5].src+")"}})))})),u.default.createElement("section",{className:"section-callout"},u.default.createElement("div",{className:"container"},u.default.createElement("h4",{className:"section-headline"},"Show your pride. Display your talents. ",u.default.createElement("span",{className:"font-white"},"Rep your city.")),u.default.createElement("p",null,"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam semper nulla vel elit gravida, vel placerat turpis convallis. Praesent eu lorem suscipit, gravida leo sed, luctus erat. Nullam consectetur, tortor a facilisis lobortis, velit massa mattis risus, eget imperdiet velit arcu non mauris. Mauris bibendum bibendum ligula, nec maximus sapien porta non."),u.default.createElement("div",{className:"section-callout__cta-items"},u.default.createElement(d.Link,{to:"/products"},u.default.createElement("img",{src:"/images/button-shop.png",alt:"Shop now"})),u.default.createElement("div",{className:"search-box"},u.default.createElement("i",{className:"fa fa-search"}),u.default.createElement("input",{tyep:"text",placeholder:"Keyword Search"})),u.default.createElement(d.Link,{to:"/upload"},u.default.createElement("img",{src:"/images/button-upload.png",alt:"Shop now"}))))),u.default.createElement("div",{className:"container"},u.default.createElement("h3",{className:"products-grid-title"},"What's hot / What's new"),u.default.createElement("div",{className:"products-grid"},t.map(function(t){return u.default.createElement(v.default,{key:t.key,addToCart:function(){return e.handleAddToCart(t)},id:t.attrs.product_id,title:t.attrs.title,image:t.selectedVariant.imageVariants[5].src})})))):u.default.createElement(h.default,null)}}]),t}(u.default.Component);t.default=g(function(e){return{products:e.products.all}})(w)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=r(l),c=n(157),f=r(c),d=n(156),p=r(d),h=n(16),m=r(h),v=n(162),y=r(v),g=function(e){function t(e){i(this,t);var n=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={title:"",content:""},n}return a(t,e),s(t,[{key:"render",value:function(){var e={title:"Rep Your City",description:"Rep Your City description",meta:{charset:"utf-8"},auto:{ograph:!0}},t=this.props.location.pathname.substr(1).split("/");return u.default.createElement("div",{id:"main",className:"page-"+(t[0]?t[0]+" subpage":"home")},u.default.createElement(m.default,e),u.default.createElement(f.default,null),u.default.createElement("div",{id:"main-container"},u.default.createElement(y.default,null),this.props.children),u.default.createElement(p.default,null))}}]),t}(u.default.Component);e.exports=g},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=r(l),c=n(50),f=r(c),d=n(84),p=(r(d),n(85)),h=r(p),m=n(8),v=m.connect,y=n(15),g=function(e){function t(){return i(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return a(t,e),s(t,[{key:"handleAddToCart",value:function(e){var t=this.props.dispatch;t(y.startAddorUpdateCartItem(e.selectedVariant,1))}},{key:"render",value:function(){var e=this,t=this.props.products;return t.length>0?u.default.createElement("div",{className:"container"},u.default.createElement("div",{className:"row"},u.default.createElement("div",{className:"small-12 medium-3 columns"},u.default.createElement("nav",{className:"products-nav"},u.default.createElement("h4",{className:"products-nav__headline"},"Categories"),u.default.createElement("ul",null,u.default.createElement("li",null,"City / state"),u.default.createElement("li",null,"Sports"),u.default.createElement("li",null,"Hobbies"),u.default.createElement("li",null,"Music"),u.default.createElement("li",null,"Animals"),u.default.createElement("li",null,"Show all")),u.default.createElement("h4",{className:"products-nav__headline"},"Style"),u.default.createElement("div",{className:"products-nav__search"},u.default.createElement("input",{type:"text",placeholder:"Select style"}),u.default.createElement("button",{type:"submit",className:"products-nav__search-button"},u.default.createElement("i",{className:"fa fa-search"}))),u.default.createElement("h4",{className:"products-nav__headline"},"Search"),u.default.createElement("div",{className:"products-nav__search"},u.default.createElement("input",{type:"text",placeholder:"Enter keywords"}),u.default.createElement("button",{type:"submit",className:"products-nav__search-button"},u.default.createElement("i",{className:"fa fa-search"}))))),u.default.createElement("div",{className:"small-12 medium-9 column"},u.default.createElement("div",{className:"products-grid"},t.map(function(t){return u.default.createElement(h.default,{key:t.key,addToCart:function(){return e.handleAddToCart(t)},id:t.attrs.product_id,title:t.attrs.title,image:t.selectedVariant.imageVariants[4].src})}))))):u.default.createElement(f.default,null)}}]),t}(u.default.Component);t.default=v(function(e){return{products:e.products.all}})(g)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=r(l),c=(n(12),n(8)),f=c.connect,d=(n(48),n(15),function(e){function t(){return i(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return a(t,e),s(t,[{key:"render",value:function(){this.props.dispatch;return u.default.createElement("div",{className:"container text-center"},u.default.createElement("img",{src:"/images/upload-placeholder.png"}))}}]),t}(u.default.Component));t.default=f(function(e){return{activeProduct:e.products.active}})(d)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=r(l),c=n(24),f=r(c),d=n(153),p=r(d),h=n(51),m=r(h),v=n(8),y=v.connect,g=n(15),b=function(e){function t(){i(this,t);var e=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));e.handleCheckout();return e}return a(t,e),s(t,[{key:"componentWillMount",value:function(){this.dispatch=this.props.dispatch}},{key:"handleCloseCart",value:function(){this.dispatch(g.closeCart())}},{key:"handleCheckout",value:function(){window.open(f.default.cart.checkoutUrl,"_self")}},{key:"render",value:function(){var e=this.props.cart,t=e.isOpen,n=e.lineItems,r=(e.lineItemCount,e.subtotal),i=function(){if(n.length>0)return n.map(function(e){return u.default.createElement(p.default,{key:e.id,item:e,quantity:e.quantity})})};return u.default.createElement("div",{className:"cart "+(t?"js-active":"")},u.default.createElement("div",{className:"cart-section cart-section--top"},u.default.createElement("h2",{className:"cart-title"},"Your cart: ",t),u.default.createElement("button",{className:"btn--close"},u.default.createElement("div",{onClick:this.handleCloseCart.bind(this)},"×"),u.default.createElement("span",{className:"hide"},"Close"))),u.default.createElement("div",{className:"cart-form"},u.default.createElement("div",{className:"cart-item-container cart-section"},u.default.createElement("div",null,i())),u.default.createElement("div",{className:"cart-bottom"},u.default.createElement("div",{className:"cart-info clearfix cart-section"},u.default.createElement("div",{className:"type--caps cart-info__total cart-info__small"},"Total"),u.default.createElement("div",{className:"cart-info__pricing"},u.default.createElement("span",{className:"cart-info__small cart-info__total"},"USD"),u.default.createElement("span",{className:"pricing pricing--no-padding"},m.default.asMoney(r)))),u.default.createElement("div",{className:"cart-actions-container cart-section type--center"},u.default.createElement("div",{className:"cart-discount-notice cart-info__small"},"Shipping and discount codes are added at checkout."),u.default.createElement("input",{type:"submit",className:"btn btn--cart-checkout",id:"checkout",name:"checkout",value:"Checkout",onClick:this.handleCheckout})))))}}]),t}(u.default.Component);t.default=y(function(e){return{cart:e.cart}})(b)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=r(l),c=n(16),f=(r(c),function(e){function t(){return i(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return a(t,e),s(t,[{key:"render",value:function(){return u.default.createElement("section",{className:"section"},u.default.createElement("div",{className:"container"},u.default.createElement("h1",null,"About us")))}}]),t}(u.default.Component));e.exports=f},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),
r&&e(t,r),t}}(),l=n(0),u=r(l),c=n(16),f=(r(c),function(e){function t(){return i(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return a(t,e),s(t,[{key:"render",value:function(){return u.default.createElement("section",{className:"section"},u.default.createElement("div",{className:"container"},u.default.createElement("h1",null,"Contact")))}}]),t}(u.default.Component));e.exports=f},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=r(l),c=n(16),f=(r(c),function(e){function t(){return i(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return a(t,e),s(t,[{key:"render",value:function(){return u.default.createElement("section",{className:"section"},u.default.createElement("div",{className:"container"},u.default.createElement("h1",null,"Login"),u.default.createElement("form",null,u.default.createElement("input",{type:"text",placeholder:"Email"}),u.default.createElement("input",{type:"password",placeholder:"Password"}),u.default.createElement("input",{type:"submit",className:"button",value:"Login"}))))}}]),t}(u.default.Component));e.exports=f},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=r(l),c=n(16),f=(r(c),function(e){function t(){return i(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return a(t,e),s(t,[{key:"render",value:function(){return u.default.createElement("section",{className:"section"},u.default.createElement("div",{className:"container"},u.default.createElement("h1",null,"Map page")))}}]),t}(u.default.Component));e.exports=f},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=r(l),c=n(16),f=(r(c),function(e){function t(){return i(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return a(t,e),s(t,[{key:"render",value:function(){return u.default.createElement("section",{className:"section"},u.default.createElement("div",{className:"container"},u.default.createElement("h1",null,"Order Status page")))}}]),t}(u.default.Component));e.exports=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.productsReducer=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{all:[],active:null},t=arguments[1];switch(t.type){case"ADD_PRODUCTS":return r({},e,{all:t.products});case"SET_ACTIVE_PRODUCT":return r({},e,{active:r({},e.active,{fetched:!0,options:t.options})});case"CLEAR_ACTIVE_PRODUCT":return r({},e,{active:null});case"UPDATE_ACTIVE_PRODUCT_OPTIONS":return r({},e,{active:r({},e.active,{options:t.options})});default:return e}},t.collectionsReducer=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{all:[],active:null},t=arguments[1];switch(t.type){case"ADD_COLLECTIONS":return r({},e,{all:t.collections});case"SET_ACTIVE_COLLECTION":return r({},e,{active:t.parsedCollection});default:return e}},t.cartReducer=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{isOpen:!1,lineItems:[]},t=arguments[1];switch(t.type){case"SET_INITIAL_CART_STATE":return r({},t.localCart);case"UPDATE_CART_ITEMS":return r({},e,{lineItems:t.updatedCartItems});case"UPDATE_CART_ITEMS_COUNT":return r({},e,{lineItemsCount:t.updatedCartItemsCount});case"UPDATE_CART_SUBTOTAL":return r({},e,{subtotal:t.newSubtotal});case"OPEN_CART":return r({},e,{isOpen:!0});case"CLOSE_CART":return r({},e,{isOpen:!1});default:return e}},t.navReducer=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{showClose:!1,showNav:!1},t=arguments[1];switch(t.type){case"TOGGLE_NAV_ICON":return r({},e,{showClose:!e.showClose,showNav:e.showNav});case"TOGGLE_NAV":return r({},e,{showClose:!e.showClose,showNav:!e.showNav});case"CLOSE_NAV":return r({},e,{showClose:!1,showNav:!1});default:return e}}},function(e,t,n){"use strict";function r(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");return"="===e[t-2]?2:"="===e[t-1]?1:0}function i(e){return 3*e.length/4-r(e)}function o(e){var t,n,i,o,a,s,l=e.length;a=r(e),s=new f(3*l/4-a),i=a>0?l-4:l;var u=0;for(t=0,n=0;t<i;t+=4,n+=3)o=c[e.charCodeAt(t)]<<18|c[e.charCodeAt(t+1)]<<12|c[e.charCodeAt(t+2)]<<6|c[e.charCodeAt(t+3)],s[u++]=o>>16&255,s[u++]=o>>8&255,s[u++]=255&o;return 2===a?(o=c[e.charCodeAt(t)]<<2|c[e.charCodeAt(t+1)]>>4,s[u++]=255&o):1===a&&(o=c[e.charCodeAt(t)]<<10|c[e.charCodeAt(t+1)]<<4|c[e.charCodeAt(t+2)]>>2,s[u++]=o>>8&255,s[u++]=255&o),s}function a(e){return u[e>>18&63]+u[e>>12&63]+u[e>>6&63]+u[63&e]}function s(e,t,n){for(var r,i=[],o=t;o<n;o+=3)r=(e[o]<<16)+(e[o+1]<<8)+e[o+2],i.push(a(r));return i.join("")}function l(e){for(var t,n=e.length,r=n%3,i="",o=[],a=16383,l=0,c=n-r;l<c;l+=a)o.push(s(e,l,l+a>c?c:l+a));return 1===r?(t=e[n-1],i+=u[t>>2],i+=u[t<<4&63],i+="=="):2===r&&(t=(e[n-2]<<8)+e[n-1],i+=u[t>>10],i+=u[t>>4&63],i+=u[t<<2&63],i+="="),o.push(i),o.join("")}t.byteLength=i,t.toByteArray=o,t.fromByteArray=l;for(var u=[],c=[],f="undefined"!=typeof Uint8Array?Uint8Array:Array,d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",p=0,h=d.length;p<h;++p)u[p]=d[p],c[d.charCodeAt(p)]=p;c["-".charCodeAt(0)]=62,c["_".charCodeAt(0)]=63},function(e,t,n){"use strict";(function(e){function r(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}function i(){return a.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function o(e,t){if(i()<t)throw new RangeError("Invalid typed array length");return a.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t),e.__proto__=a.prototype):(null===e&&(e=new a(t)),e.length=t),e}function a(e,t,n){if(!(a.TYPED_ARRAY_SUPPORT||this instanceof a))return new a(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return c(this,e)}return s(this,e,t,n)}function s(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?p(e,t,n,r):"string"==typeof t?f(e,t,n):h(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function u(e,t,n,r){return l(t),t<=0?o(e,t):void 0!==n?"string"==typeof r?o(e,t).fill(n,r):o(e,t).fill(n):o(e,t)}function c(e,t){if(l(t),e=o(e,t<0?0:0|m(t)),!a.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function f(e,t,n){if("string"==typeof n&&""!==n||(n="utf8"),!a.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|y(t,n);e=o(e,r);var i=e.write(t,n);return i!==r&&(e=e.slice(0,i)),e}function d(e,t){var n=t.length<0?0:0|m(t.length);e=o(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function p(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");return t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r),a.TYPED_ARRAY_SUPPORT?(e=t,e.__proto__=a.prototype):e=d(e,t),e}function h(e,t){if(a.isBuffer(t)){var n=0|m(t.length);return e=o(e,n),0===e.length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||J(t.length)?o(e,0):d(e,t);if("Buffer"===t.type&&Z(t.data))return d(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function m(e){if(e>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|e}function v(e){return+e!=e&&(e=0),a.alloc(+e)}function y(e,t){if(a.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return Y(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return X(e).length;default:if(r)return Y(e).length;t=(""+t).toLowerCase(),r=!0}}function g(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if(n>>>=0,t>>>=0,n<=t)return"";for(e||(e="utf8");;)switch(e){case"hex":return j(this,t,n);case"utf8":case"utf-8":return A(this,t,n);case"ascii":return x(this,t,n);case"latin1":case"binary":return M(this,t,n);case"base64":return P(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function b(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function w(e,t,n,r,i){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof t&&(t=a.from(t,r)),a.isBuffer(t))return 0===t.length?-1:E(e,t,n,r,i);if("number"==typeof t)return t&=255,a.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):E(e,[t],n,r,i);throw new TypeError("val must be string, number or Buffer")}function E(e,t,n,r,i){function o(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}var a=1,s=e.length,l=t.length;if(void 0!==r&&(r=String(r).toLowerCase(),"ucs2"===r||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,s/=2,l/=2,n/=2}var u;if(i){var c=-1;for(u=n;u<s;u++)if(o(e,u)===o(t,c===-1?0:u-c)){if(c===-1&&(c=u),u-c+1===l)return c*a}else c!==-1&&(u-=u-c),c=-1}else for(n+l>s&&(n=s-l),u=n;u>=0;u--){for(var f=!0,d=0;d<l;d++)if(o(e,u+d)!==o(t,d)){f=!1;break}if(f)return u}return-1}function _(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?(r=Number(r),r>i&&(r=i)):r=i;var o=t.length;if(o%2!==0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var a=0;a<r;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[n+a]=s}return a}function S(e,t,n,r){return G(Y(t,e.length-n),e,n,r)}function C(e,t,n,r){return G(V(t),e,n,r)}function O(e,t,n,r){return C(e,t,n,r)}function T(e,t,n,r){return G(X(t),e,n,r)}function k(e,t,n,r){return G(K(t,e.length-n),e,n,r)}function P(e,t,n){return 0===t&&n===e.length?Q.fromByteArray(e):Q.fromByteArray(e.slice(t,n))}function A(e,t,n){n=Math.min(e.length,n);for(var r=[],i=t;i<n;){var o=e[i],a=null,s=o>239?4:o>223?3:o>191?2:1;if(i+s<=n){var l,u,c,f;switch(s){case 1:o<128&&(a=o);break;case 2:l=e[i+1],128===(192&l)&&(f=(31&o)<<6|63&l,f>127&&(a=f));break;case 3:l=e[i+1],u=e[i+2],128===(192&l)&&128===(192&u)&&(f=(15&o)<<12|(63&l)<<6|63&u,f>2047&&(f<55296||f>57343)&&(a=f));break;case 4:l=e[i+1],u=e[i+2],c=e[i+3],128===(192&l)&&128===(192&u)&&128===(192&c)&&(f=(15&o)<<18|(63&l)<<12|(63&u)<<6|63&c,f>65535&&f<1114112&&(a=f))}}null===a?(a=65533,s=1):a>65535&&(a-=65536,r.push(a>>>10&1023|55296),a=56320|1023&a),r.push(a),i+=s}return N(r)}function N(e){var t=e.length;if(t<=ee)return String.fromCharCode.apply(String,e);for(var n="",r=0;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=ee));return n}function x(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function M(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function j(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=t;o<n;++o)i+=F(e[o]);return i}function I(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function R(e,t,n){if(e%1!==0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function L(e,t,n,r,i,o){if(!a.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function D(e,t,n,r){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-n,2);i<o;++i)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function U(e,t,n,r){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-n,4);i<o;++i)e[n+i]=t>>>8*(r?i:3-i)&255}function q(e,t,n,r,i,o){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function W(e,t,n,r,i){return i||q(e,t,n,4,3.4028234663852886e38,-3.4028234663852886e38),$.write(e,t,n,r,23,4),n+4}function z(e,t,n,r,i){return i||q(e,t,n,8,1.7976931348623157e308,-1.7976931348623157e308),$.write(e,t,n,r,52,8),n+8}function H(e){if(e=B(e).replace(te,""),e.length<2)return"";for(;e.length%4!==0;)e+="=";return e}function B(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function F(e){return e<16?"0"+e.toString(16):e.toString(16)}function Y(e,t){t=t||1/0;for(var n,r=e.length,i=null,o=[],a=0;a<r;++a){if(n=e.charCodeAt(a),n>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(t-=3)>-1&&o.push(239,191,189),i=n;continue}n=(i-55296<<10|n-56320)+65536}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function V(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}function K(e,t){for(var n,r,i,o=[],a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),r=n>>8,i=n%256,o.push(i),o.push(r);return o}function X(e){return Q.toByteArray(H(e))}function G(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}function J(e){return e!==e}/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var Q=n(169),$=n(194),Z=n(171);t.Buffer=a,t.SlowBuffer=v,t.INSPECT_MAX_BYTES=50,a.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:r(),t.kMaxLength=i(),a.poolSize=8192,a._augment=function(e){return e.__proto__=a.prototype,e},a.from=function(e,t,n){return s(null,e,t,n)},a.TYPED_ARRAY_SUPPORT&&(a.prototype.__proto__=Uint8Array.prototype,a.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&a[Symbol.species]===a&&Object.defineProperty(a,Symbol.species,{value:null,configurable:!0})),a.alloc=function(e,t,n){return u(null,e,t,n)},a.allocUnsafe=function(e){return c(null,e)},a.allocUnsafeSlow=function(e){return c(null,e)},a.isBuffer=function(e){return!(null==e||!e._isBuffer)},a.compare=function(e,t){if(!a.isBuffer(e)||!a.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,i=0,o=Math.min(n,r);i<o;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0},a.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},a.concat=function(e,t){if(!Z(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return a.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=a.allocUnsafe(t),i=0;for(n=0;n<e.length;++n){var o=e[n];if(!a.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(r,i),i+=o.length}return r},a.byteLength=y,a.prototype._isBuffer=!0,a.prototype.swap16=function(){var e=this.length;if(e%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)b(this,t,t+1);return this},a.prototype.swap32=function(){var e=this.length;if(e%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)b(this,t,t+3),b(this,t+1,t+2);return this},a.prototype.swap64=function(){var e=this.length;if(e%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)b(this,t,t+7),b(this,t+1,t+6),b(this,t+2,t+5),b(this,t+3,t+4);return this},a.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?A(this,0,e):g.apply(this,arguments)},a.prototype.equals=function(e){if(!a.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===a.compare(this,e)},a.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},a.prototype.compare=function(e,t,n,r,i){if(!a.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),t<0||n>e.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&t>=n)return 0;if(r>=i)return-1;if(t>=n)return 1;if(t>>>=0,n>>>=0,r>>>=0,i>>>=0,this===e)return 0;for(var o=i-r,s=n-t,l=Math.min(o,s),u=this.slice(r,i),c=e.slice(t,n),f=0;f<l;++f)if(u[f]!==c[f]){o=u[f],s=c[f];break}return o<s?-1:s<o?1:0},a.prototype.includes=function(e,t,n){return this.indexOf(e,t,n)!==-1},a.prototype.indexOf=function(e,t,n){return w(this,e,t,n,!0)},a.prototype.lastIndexOf=function(e,t,n){return w(this,e,t,n,!1)},a.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-t;if((void 0===n||n>i)&&(n=i),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return _(this,e,t,n);case"utf8":case"utf-8":return S(this,e,t,n);case"ascii":return C(this,e,t,n);case"latin1":case"binary":return O(this,e,t,n);case"base64":return T(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,e,t,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},a.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var ee=4096;a.prototype.slice=function(e,t){var n=this.length;e=~~e,t=void 0===t?n:~~t,e<0?(e+=n,e<0&&(e=0)):e>n&&(e=n),t<0?(t+=n,t<0&&(t=0)):t>n&&(t=n),t<e&&(t=e);var r;if(a.TYPED_ARRAY_SUPPORT)r=this.subarray(e,t),r.__proto__=a.prototype;else{var i=t-e;r=new a(i,void 0);for(var o=0;o<i;++o)r[o]=this[o+e]}return r},a.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r},a.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=this[e+--t],i=1;t>0&&(i*=256);)r+=this[e+--t]*i;return r},a.prototype.readUInt8=function(e,t){return t||R(e,1,this.length),this[e]},a.prototype.readUInt16LE=function(e,t){return t||R(e,2,this.length),this[e]|this[e+1]<<8},a.prototype.readUInt16BE=function(e,t){return t||R(e,2,this.length),this[e]<<8|this[e+1]},a.prototype.readUInt32LE=function(e,t){return t||R(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},a.prototype.readUInt32BE=function(e,t){return t||R(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},a.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return i*=128,r>=i&&(r-=Math.pow(2,8*t)),r},a.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=t,i=1,o=this[e+--r];r>0&&(i*=256);)o+=this[e+--r]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*t)),o},a.prototype.readInt8=function(e,t){return t||R(e,1,this.length),128&this[e]?(255-this[e]+1)*-1:this[e]},a.prototype.readInt16LE=function(e,t){t||R(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},a.prototype.readInt16BE=function(e,t){t||R(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},a.prototype.readInt32LE=function(e,t){return t||R(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},a.prototype.readInt32BE=function(e,t){return t||R(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},a.prototype.readFloatLE=function(e,t){return t||R(e,4,this.length),$.read(this,e,!0,23,4)},a.prototype.readFloatBE=function(e,t){return t||R(e,4,this.length),$.read(this,e,!1,23,4)},a.prototype.readDoubleLE=function(e,t){return t||R(e,8,this.length),$.read(this,e,!0,52,8)},a.prototype.readDoubleBE=function(e,t){return t||R(e,8,this.length),$.read(this,e,!1,52,8)},a.prototype.writeUIntLE=function(e,t,n,r){if(e=+e,t|=0,n|=0,!r){var i=Math.pow(2,8*n)-1;L(this,e,t,n,i,0)}var o=1,a=0;for(this[t]=255&e;++a<n&&(o*=256);)this[t+a]=e/o&255;return t+n},a.prototype.writeUIntBE=function(e,t,n,r){if(e=+e,t|=0,n|=0,!r){var i=Math.pow(2,8*n)-1;L(this,e,t,n,i,0)}var o=n-1,a=1;for(this[t+o]=255&e;--o>=0&&(a*=256);)this[t+o]=e/a&255;return t+n},a.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,1,255,0),a.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},a.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):D(this,e,t,!0),t+2},a.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):D(this,e,t,!1),t+2},a.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):U(this,e,t,!0),t+4},a.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):U(this,e,t,!1),t+4},a.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);L(this,e,t,n,i-1,-i)}var o=0,a=1,s=0;for(this[t]=255&e;++o<n&&(a*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+n},a.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);L(this,e,t,n,i-1,-i)}var o=n-1,a=1,s=0;for(this[t+o]=255&e;--o>=0&&(a*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+n},a.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,1,127,-128),a.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},a.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):D(this,e,t,!0),t+2},a.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):D(this,e,t,!1),t+2},a.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,4,2147483647,-2147483648),a.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):U(this,e,t,!0),t+4},a.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),a.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):U(this,e,t,!1),t+4},a.prototype.writeFloatLE=function(e,t,n){return W(this,e,t,!0,n)},a.prototype.writeFloatBE=function(e,t,n){return W(this,e,t,!1,n)},a.prototype.writeDoubleLE=function(e,t,n){return z(this,e,t,!0,n)},a.prototype.writeDoubleBE=function(e,t,n){return z(this,e,t,!1,n)},a.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var i,o=r-n;if(this===e&&n<t&&t<r)for(i=o-1;i>=0;--i)e[i+t]=this[i+n];else if(o<1e3||!a.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+o),t);return o},a.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!a.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0);var o;if("number"==typeof e)for(o=t;o<n;++o)this[o]=e;else{var s=a.isBuffer(e)?e:Y(new a(e,r).toString()),l=s.length;for(o=0;o<n-t;++o)this[o+t]=s[o%l]}return this};var te=/[^+\/0-9A-Za-z-_]/g}).call(t,n(46))},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){var n=!("undefined"==typeof window||!window.document||!window.document.createElement);e.exports=n},function(e,t){function n(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}function r(e){if(!(this instanceof r))return new r(e);e||(e={}),e.nodeType&&(e={el:e}),this.opts=e,this.el=e.el||document.body,"object"!=typeof this.el&&(this.el=document.querySelector(this.el))}e.exports=function(e){return new r(e)},r.prototype.add=function(e){var t=this.el;if(t){if(""===t.className)return t.className=e;var r=t.className.split(" ");return n(r,e)>-1?r:(r.push(e),t.className=r.join(" "),r)}},r.prototype.remove=function(e){var t=this.el;if(t&&""!==t.className){var r=t.className.split(" "),i=n(r,e);return i>-1&&r.splice(i,1),t.className=r.join(" "),r}},r.prototype.has=function(e){var t=this.el;if(t){var r=t.className.split(" ");return n(r,e)>-1}},r.prototype.toggle=function(e){var t=this.el;t&&(this.has(e)?this.remove(e):this.add(e))}},function(e,t,n){var r;!function(i,o,a){var s=window.matchMedia;"undefined"!=typeof e&&e.exports?e.exports=a(s):(r=function(){return o[i]=a(s)}.call(t,n,t,e),!(void 0!==r&&(e.exports=r)))}("enquire",this,function(e){"use strict";function t(e,t){var n,r=0,i=e.length;for(r;r<i&&(n=t(e[r],r),n!==!1);r++);}function n(e){return"[object Array]"===Object.prototype.toString.apply(e)}function r(e){return"function"==typeof e}function i(e){this.options=e,!e.deferSetup&&this.setup()}function o(t,n){this.query=t,this.isUnconditional=n,this.handlers=[],this.mql=e(t);var r=this;this.listener=function(e){r.mql=e,r.assess()},this.mql.addListener(this.listener)}function a(){if(!e)throw new Error("matchMedia not present, legacy browsers require a polyfill");this.queries={},this.browserIsIncapable=!e("only all").matches}return i.prototype={setup:function(){this.options.setup&&this.options.setup(),this.initialised=!0},on:function(){!this.initialised&&this.setup(),this.options.match&&this.options.match()},off:function(){this.options.unmatch&&this.options.unmatch()},destroy:function(){this.options.destroy?this.options.destroy():this.off()},equals:function(e){return this.options===e||this.options.match===e}},o.prototype={addHandler:function(e){var t=new i(e);this.handlers.push(t),this.matches()&&t.on()},removeHandler:function(e){var n=this.handlers;t(n,function(t,r){if(t.equals(e))return t.destroy(),!n.splice(r,1)})},matches:function(){return this.mql.matches||this.isUnconditional},clear:function(){t(this.handlers,function(e){e.destroy()}),this.mql.removeListener(this.listener),this.handlers.length=0},assess:function(){var e=this.matches()?"on":"off";t(this.handlers,function(t){t[e]()})}},a.prototype={register:function(e,i,a){var s=this.queries,l=a&&this.browserIsIncapable;return s[e]||(s[e]=new o(e,l)),r(i)&&(i={match:i}),n(i)||(i=[i]),t(i,function(t){s[e].addHandler(t)}),this},unregister:function(e,t){var n=this.queries[e];return n&&(t?n.removeHandler(t):(n.clear(),delete this.queries[e])),this}},new a})},function(e,t,n){var r;/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/
!function(){"use strict";var i=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:i,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:i&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:i&&!!window.screen};r=function(){return o}.call(t,n,t,e),!(void 0!==r&&(e.exports=r))}()},,,,,,,,,,,,,,,,,,,function(e,t){t.read=function(e,t,n,r,i){var o,a,s=8*i-r-1,l=(1<<s)-1,u=l>>1,c=-7,f=n?i-1:0,d=n?-1:1,p=e[t+f];for(f+=d,o=p&(1<<-c)-1,p>>=-c,c+=s;c>0;o=256*o+e[t+f],f+=d,c-=8);for(a=o&(1<<-c)-1,o>>=-c,c+=r;c>0;a=256*a+e[t+f],f+=d,c-=8);if(0===o)o=1-u;else{if(o===l)return a?NaN:(p?-1:1)*(1/0);a+=Math.pow(2,r),o-=u}return(p?-1:1)*a*Math.pow(2,o-r)},t.write=function(e,t,n,r,i,o){var a,s,l,u=8*o-i-1,c=(1<<u)-1,f=c>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:o-1,h=r?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=c):(a=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-a))<1&&(a--,l*=2),t+=a+f>=1?d/l:d*Math.pow(2,1-f),t*l>=2&&(a++,l/=2),a+f>=c?(s=0,a=c):a+f>=1?(s=(t*l-1)*Math.pow(2,i),a+=f):(s=t*Math.pow(2,f-1)*Math.pow(2,i),a=0));i>=8;e[n+p]=255&s,p+=h,s/=256,i-=8);for(a=a<<i|s,u+=i;u>0;e[n+p]=255&a,p+=h,a/=256,u-=8);e[n+p-h]|=128*m}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){var r=n(0),i=n(3),o="_blank",a=r.createClass({displayName:"OutboundLink",propTypes:{eventLabel:r.PropTypes.string.isRequired},statics:{trackLink:function(){console.warn("ga tracking not enabled")}},handleClick:function(e){e.preventDefault();var t=this.props,n={label:t.eventLabel};a.trackLink(n,function(){t.target===o?window.open(t.to,o):window.location.href=t.to}),t.onClick&&t.onClick(e)},render:function(){var e=i({},this.props,{href:this.props.to,onClick:this.handleClick});return delete e.eventLabel,r.createElement("a",e)}});e.exports=a},function(e,t,n){var r=n(274),i=n(276),o=n(124),a=n(123),s=n(273),l=!1,u=!0,c=function(e){return r(e,u)},f={initialize:function(e,t){return e?(t&&(t.debug&&t.debug===!0&&(l=!0),t.titleCase===!1&&(u=!1)),function(e,t,n,r,i,o,a){e.GoogleAnalyticsObject=i,e[i]=e[i]||function(){(e[i].q=e[i].q||[]).push(arguments)},e[i].l=1*new Date,o=t.createElement(n),a=t.getElementsByTagName(n)[0],o.async=1,o.src=r,a.parentNode.insertBefore(o,a)}(window,document,"script","https://www.google-analytics.com/analytics.js","ga"),void(t&&t.gaOptions?ga("create",e,t.gaOptions):ga("create",e,"auto"))):void a("gaTrackingID is required in initialize()")},ga:function(){return arguments.length>0?(ga.apply(this,arguments),void(l&&(s("called ga('arguments');"),s("with arguments: "+JSON.stringify([].slice.apply(arguments)))))):ga},set:function(e){if("function"==typeof ga){if(!e)return void a("`fieldsObject` is required in .set()");if("object"!=typeof e)return void a("Expected `fieldsObject` arg to be an Object");0===Object.keys(e).length&&a("empty `fieldsObject` given to .set()"),ga("set",e),l&&(s("called ga('set', fieldsObject);"),s("with fieldsObject: "+JSON.stringify(e)))}},send:function(e){"function"==typeof ga&&(ga("send",e),l&&(s("called ga('send', fieldObject);"),s("with fieldObject: "+JSON.stringify(e))))},pageview:function(e){return e?(e=o(e),""===e?void a("path cannot be an empty string in .pageview()"):void("function"==typeof ga&&(ga("send","pageview",e),l&&(s("called ga('send', 'pageview', path);"),s("with path: "+e))))):void a("path is required in .pageview()")},modalview:function(e){if(!e)return void a("modalName is required in .modalview(modalName)");if(e=o(e),e=i(e),""===e)return void a("modalName cannot be an empty string or a single / in .modalview()");if("function"==typeof ga){e=o(e);var t="/modal/"+e;ga("send","pageview",t),l&&(s("called ga('send', 'pageview', path);"),s("with path: "+t))}},timing:function(e){if("function"==typeof ga){if(!(e&&e.category&&e.variable&&e.value&&"number"==typeof e.value))return void a("args.category, args.variable AND args.value are required in timing() AND args.value has to be a number");var t={hitType:"timing",timingCategory:c(e.category),timingVar:c(e.variable),timingValue:e.value};e.label&&(t.timingLabel=c(e.label)),this.send(t)}},event:function(e){if("function"==typeof ga){if(!e||!e.category||!e.action)return void a("args.category AND args.action are required in event()");var t={hitType:"event",eventCategory:c(e.category),eventAction:c(e.action)};e.label&&(t.eventLabel=c(e.label)),e.value&&("number"!=typeof e.value?a("Expected `args.value` arg to be a Number."):t.eventValue=e.value),e.nonInteraction&&("boolean"!=typeof e.nonInteraction?a("`args.nonInteraction` must be a boolean."):t.nonInteraction=e.nonInteraction),e.transport&&("string"!=typeof e.transport?a("`args.transport` must be a string."):(["beacon","xhr","image"].indexOf(e.transport)===-1&&a("`args.transport` must be either one of these values: `beacon`, `xhr` or `image`"),t.transport=e.transport)),this.send(t)}},exception:function(e){if("function"==typeof ga){var t={hitType:"exception"};e.description&&(t.exDescription=c(e.description)),"undefined"!=typeof e.fatal&&("boolean"!=typeof e.fatal?a("`args.fatal` must be a boolean."):t.exFatal=e.fatal),this.send(t)}},plugin:{require:function(e,t){if("function"==typeof ga)return e?(e=o(e),""===e?void a("`name` cannot be an empty string in .require()"):t?"object"!=typeof t?void a("Expected `options` arg to be an Object"):(0===Object.keys(t).length&&a("Empty `options` given to .require()"),ga("require",e,t),void(l&&s("called ga('require', '"+e+"', "+JSON.stringify(t)+");"))):(ga("require",e),void(l&&s("called ga('require', '"+e+"');")))):void a("`name` is required in .require()")},execute:function(){var e,t,n=Array.prototype.slice.call(arguments),r=n[0],i=n[1];if(3===n.length?e=n[2]:(t=n[2],e=n[3]),"function"==typeof ga)if("string"!=typeof r)a("Expected `pluginName` arg to be a String.");else if("string"!=typeof i)a("Expected `action` arg to be a String.");else{var o=r+":"+i;e=e||null,t&&e?(ga(o,t,e),l&&(s("called ga('"+o+"');"),s('actionType: "'+t+'" with payload: '+JSON.stringify(e)))):e?(ga(o,e),l&&(s("called ga('"+o+"');"),s("with payload: "+JSON.stringify(e)))):(ga(o),l&&s("called ga('"+o+"');"))}}},outboundLink:function(e,t){if("function"!=typeof t)return void a("hitCallback function is required");if("function"==typeof ga){if(!e||!e.label)return void a("args.label is required in outboundLink()");var n={hitType:"event",eventCategory:"Outbound",eventAction:"Click",eventLabel:c(e.label)},r=!1,i=function(){r=!0,t()},o=setTimeout(i,250),s=function(){clearTimeout(o),r||t()};n.hitCallback=s,this.send(n)}else setTimeout(t,0)}},d=n(271);d.origTrackLink=d.trackLink,d.trackLink=f.outboundLink.bind(f),f.OutboundLink=d,e.exports=f},function(e,t){function n(e){console.info("[react-ga]",e)}e.exports=n},function(e,t,n){function r(e,t){return i(e)?(a("This arg looks like an email address, redacting."),s):t?o(e):e}var i=n(275),o=n(277),a=n(123),s="REDACTED (Potential Email Address)";e.exports=r},function(e,t){function n(e){return/[^@]+@[^@]+/.test(e)}e.exports=n},function(e,t){function n(e){return"/"===e.substring(0,1)&&(e=e.substring(1)),e}e.exports=n},function(e,t,n){function r(e){var t=/^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\.?|via)$/i;return e=i(e),e.replace(/[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g,function(e,n,r){return n>0&&n+e.length!==r.length&&e.search(t)>-1&&":"!==r.charAt(n-2)&&("-"!==r.charAt(n+e.length)||"-"===r.charAt(n-1))&&r.charAt(n-1).search(/[^\s-]/)<0?e.toLowerCase():e.substr(1).search(/[A-Z]|\../)>-1?e:e.charAt(0).toUpperCase()+e.substr(1)})}var i=n(124);e.exports=r},function(e,t,n){function r(e){return e()}var i=n(0),o=n(17),a=n(175),s=i.createFactory(n(279)),l=n(280),u=n(173),c=n(17).unstable_renderSubtreeIntoContainer,f=n(95),d=a.canUseDOM?window.HTMLElement:{},p=a.canUseDOM?document.body:{appendChild:function(){}},h=i.createClass({displayName:"Modal",statics:{setAppElement:function(e){p=l.setElement(e)},injectCSS:function(){}},propTypes:{isOpen:i.PropTypes.bool.isRequired,style:i.PropTypes.shape({content:i.PropTypes.object,overlay:i.PropTypes.object}),portalClassName:i.PropTypes.string,appElement:i.PropTypes.instanceOf(d),onAfterOpen:i.PropTypes.func,onRequestClose:i.PropTypes.func,closeTimeoutMS:i.PropTypes.number,ariaHideApp:i.PropTypes.bool,shouldCloseOnOverlayClick:i.PropTypes.bool,parentSelector:i.PropTypes.func,role:i.PropTypes.string,contentLabel:i.PropTypes.string.isRequired},getDefaultProps:function(){return{isOpen:!1,portalClassName:"ReactModalPortal",ariaHideApp:!0,closeTimeoutMS:0,shouldCloseOnOverlayClick:!0,parentSelector:function(){return document.body}}},componentDidMount:function(){this.node=document.createElement("div"),this.node.className=this.props.portalClassName;var e=r(this.props.parentSelector);e.appendChild(this.node),this.renderPortal(this.props)},componentWillReceiveProps:function(e){var t=r(this.props.parentSelector),n=r(e.parentSelector);n!==t&&(t.removeChild(this.node),n.appendChild(this.node)),this.renderPortal(e)},componentWillUnmount:function(){this.props.ariaHideApp&&l.show(this.props.appElement),o.unmountComponentAtNode(this.node);var e=r(this.props.parentSelector);e.removeChild(this.node),u(document.body).remove("ReactModal__Body--open")},renderPortal:function(e){e.isOpen?u(document.body).add("ReactModal__Body--open"):u(document.body).remove("ReactModal__Body--open"),e.ariaHideApp&&l.toggle(e.isOpen,e.appElement),this.portal=c(this,s(f({},e,{defaultStyles:h.defaultStyles})),this.node)},render:function(){return i.DOM.noscript()}});h.defaultStyles={overlay:{position:"fixed",top:0,left:0,right:0,bottom:0,backgroundColor:"rgba(255, 255, 255, 0.75)"},content:{position:"absolute",top:"40px",left:"40px",right:"40px",bottom:"40px",border:"1px solid #ccc",background:"#fff",overflow:"auto",WebkitOverflowScrolling:"touch",borderRadius:"4px",outline:"none",padding:"20px"}},e.exports=h},function(e,t,n){var r=n(0),i=r.DOM.div,o=n(281),a=n(282),s=n(95),l={overlay:{base:"ReactModal__Overlay",afterOpen:"ReactModal__Overlay--after-open",beforeClose:"ReactModal__Overlay--before-close"},content:{base:"ReactModal__Content",afterOpen:"ReactModal__Content--after-open",beforeClose:"ReactModal__Content--before-close"}};e.exports=r.createClass({displayName:"ModalPortal",shouldClose:null,getDefaultProps:function(){return{style:{overlay:{},content:{}}}},getInitialState:function(){return{afterOpen:!1,beforeClose:!1}},componentDidMount:function(){this.props.isOpen&&(this.setFocusAfterRender(!0),this.open())},componentWillUnmount:function(){clearTimeout(this.closeTimer)},componentWillReceiveProps:function(e){!this.props.isOpen&&e.isOpen?(this.setFocusAfterRender(!0),this.open()):this.props.isOpen&&!e.isOpen&&this.close()},componentDidUpdate:function(){this.focusAfterRender&&(this.focusContent(),this.setFocusAfterRender(!1))},setFocusAfterRender:function(e){this.focusAfterRender=e},open:function(){this.state.afterOpen&&this.state.beforeClose?(clearTimeout(this.closeTimer),this.setState({beforeClose:!1})):(o.setupScopedFocus(this.node),o.markForFocusLater(),this.setState({isOpen:!0},function(){this.setState({afterOpen:!0}),this.props.isOpen&&this.props.onAfterOpen&&this.props.onAfterOpen()}.bind(this)))},close:function(){this.props.closeTimeoutMS>0?this.closeWithTimeout():this.closeWithoutTimeout()},focusContent:function(){this.contentHasFocus()||this.refs.content.focus()},closeWithTimeout:function(){this.setState({beforeClose:!0},function(){this.closeTimer=setTimeout(this.closeWithoutTimeout,this.props.closeTimeoutMS)}.bind(this))},closeWithoutTimeout:function(){this.setState({beforeClose:!1,isOpen:!1,afterOpen:!1},this.afterClose)},afterClose:function(){o.returnFocus(),o.teardownScopedFocus()},handleKeyDown:function(e){9==e.keyCode&&a(this.refs.content,e),27==e.keyCode&&(e.preventDefault(),this.requestClose(e))},handleOverlayMouseDown:function(e){null===this.shouldClose&&(this.shouldClose=!0)},handleOverlayMouseUp:function(e){this.shouldClose&&this.props.shouldCloseOnOverlayClick&&(this.ownerHandlesClose()?this.requestClose(e):this.focusContent()),this.shouldClose=null},handleContentMouseDown:function(e){this.shouldClose=!1},handleContentMouseUp:function(e){this.shouldClose=!1},requestClose:function(e){this.ownerHandlesClose()&&this.props.onRequestClose(e)},ownerHandlesClose:function(){return this.props.onRequestClose},shouldBeClosed:function(){return!this.props.isOpen&&!this.state.beforeClose},contentHasFocus:function(){return document.activeElement===this.refs.content||this.refs.content.contains(document.activeElement)},buildClassName:function(e,t){var n=l[e].base;return this.state.afterOpen&&(n+=" "+l[e].afterOpen),this.state.beforeClose&&(n+=" "+l[e].beforeClose),t?n+" "+t:n},render:function(){var e=this.props.className?{}:this.props.defaultStyles.content,t=this.props.overlayClassName?{}:this.props.defaultStyles.overlay;return this.shouldBeClosed()?i():i({ref:"overlay",className:this.buildClassName("overlay",this.props.overlayClassName),style:s({},t,this.props.style.overlay||{}),onMouseDown:this.handleOverlayMouseDown,onMouseUp:this.handleOverlayMouseUp},i({ref:"content",style:s({},e,this.props.style.content||{}),className:this.buildClassName("content",this.props.className),tabIndex:"-1",onKeyDown:this.handleKeyDown,onMouseDown:this.handleContentMouseDown,onMouseUp:this.handleContentMouseUp,role:this.props.role,"aria-label":this.props.contentLabel},this.props.children))}})},function(e,t){function n(e){if("string"==typeof e){var t=document.querySelectorAll(e);e="length"in t?t[0]:t}return l=e||l}function r(e){a(e),(e||l).setAttribute("aria-hidden","true")}function i(e){a(e),(e||l).removeAttribute("aria-hidden")}function o(e,t){e?r(t):i(t)}function a(e){if(!e&&!l)throw new Error("react-modal: You must set an element with `Modal.setAppElement(el)` to make this accessible")}function s(){l=document.body}var l="undefined"!=typeof document?document.body:null;t.toggle=o,t.setElement=n,t.show=i,t.hide=r,t.resetForTesting=s},function(e,t,n){function r(e){l=!0}function i(e){if(l){if(l=!1,!a)return;setTimeout(function(){if(!a.contains(document.activeElement)){var e=o(a)[0]||a;e.focus()}},0)}}var o=n(125),a=null,s=null,l=!1;t.markForFocusLater=function(){s=document.activeElement},t.returnFocus=function(){try{s.focus()}catch(e){console.warn("You tried to return focus to "+s+" but it is not in the DOM anymore")}s=null},t.setupScopedFocus=function(e){a=e,window.addEventListener?(window.addEventListener("blur",r,!1),document.addEventListener("focus",i,!0)):(window.attachEvent("onBlur",r),document.attachEvent("onFocus",i))},t.teardownScopedFocus=function(){a=null,window.addEventListener?(window.removeEventListener("blur",r),document.removeEventListener("focus",i)):(window.detachEvent("onBlur",r),document.detachEvent("onFocus",i))}},function(e,t,n){var r=n(125);e.exports=function(e,t){var n=r(e);if(!n.length)return void t.preventDefault();var i=n[t.shiftKey?0:n.length-1],o=i===document.activeElement||e===document.activeElement;if(o){t.preventDefault();var a=n[t.shiftKey?n.length-1:0];a.focus()}}},function(e,t,n){e.exports=n(278)},,,,,,,,,function(e,t,n){var r=n(172),i=r&&n(174),o=n(93),a={media:function(e,t){e=o(e),"function"==typeof t&&(t={match:t}),r&&i.register(e,t),this._responsiveMediaHandlers||(this._responsiveMediaHandlers=[]),this._responsiveMediaHandlers.push({query:e,handler:t})},componentWillUnmount:function(){this._responsiveMediaHandlers&&this._responsiveMediaHandlers.forEach(function(e){r&&i.unregister(e.query,e.handler)})}};e.exports=a},,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.NextArrow=t.PrevArrow=void 0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(0),a=r(o),s=n(38),l=r(s),u=n(80),c=r(u);t.PrevArrow=a.default.createClass({displayName:"PrevArrow",clickHandler:function(e,t){t&&t.preventDefault(),this.props.clickHandler(e,t)},render:function(){var e={"slick-arrow":!0,"slick-prev":!0},t=this.clickHandler.bind(this,{message:"previous"});!this.props.infinite&&(0===this.props.currentSlide||this.props.slideCount<=this.props.slidesToShow)&&(e["slick-disabled"]=!0,t=null);var n,r={key:"0","data-role":"none",className:(0,l.default)(e),currentSlide:this.props.currentSlide,slideCount:this.props.slideCount,style:{display:"block"},onClick:t};return n=this.props.prevArrow?a.default.cloneElement(this.props.prevArrow,r):a.default.createElement("button",i({key:"0",type:"button"},r)," Previous")}}),t.NextArrow=a.default.createClass({displayName:"NextArrow",clickHandler:function(e,t){t&&t.preventDefault(),this.props.clickHandler(e,t)},render:function(){var e={"slick-arrow":!0,"slick-next":!0},t=this.clickHandler.bind(this,{message:"next"});c.default.canGoNext(this.props)||(e["slick-disabled"]=!0,t=null);var n,r={key:"1","data-role":"none",className:(0,l.default)(e),currentSlide:this.props.currentSlide,slideCount:this.props.slideCount,style:{display:"block"},onClick:t};return n=this.props.nextArrow?a.default.cloneElement(this.props.nextArrow,r):a.default.createElement("button",i({key:"1",type:"button"},r)," Next")}})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.Dots=void 0;var i=n(0),o=r(i),a=n(38),s=r(a),l=function(e){var t;return t=Math.ceil(e.slideCount/e.slidesToScroll)};t.Dots=o.default.createClass({displayName:"Dots",clickHandler:function(e,t){t.preventDefault(),this.props.clickHandler(e)},render:function(){var e=this,t=l({slideCount:this.props.slideCount,slidesToScroll:this.props.slidesToScroll}),n=Array.apply(null,Array(t+1).join("0").split("")).map(function(t,n){var r=n*e.props.slidesToScroll,i=n*e.props.slidesToScroll+(e.props.slidesToScroll-1),a=(0,s.default)({"slick-active":e.props.currentSlide>=r&&e.props.currentSlide<=i}),l={message:"dots",index:n,slidesToScroll:e.props.slidesToScroll,currentSlide:e.props.currentSlide},u=e.clickHandler.bind(e,l);return o.default.createElement("li",{key:n,className:a},o.default.cloneElement(e.props.customPaging(n),{onClick:u}))});return o.default.createElement("ul",{className:this.props.dotsClass,style:{display:"block"}},n)}})},function(e,t,n){"use strict";e.exports=n(317)},function(e,t,n){"use strict";var r={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,listWidth:null,listHeight:null,slideCount:null,slideWidth:null,slideHeight:null,swipeLeft:null,touchObject:{startX:0,startY:0,curX:0,curY:0},lazyLoadedList:[],initialized:!1,edgeDragged:!1,swiped:!1,trackStyle:{},trackWidth:0};e.exports=r},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.InnerSlider=void 0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(0),a=r(o),s=n(316),l=r(s),u=n(80),c=r(u),f=n(314),d=r(f),p=n(139),h=r(p),m=n(38),v=r(m),y=n(3),g=r(y),b=n(318),w=n(312),E=n(311);t.InnerSlider=a.default.createClass({displayName:"InnerSlider",mixins:[c.default,l.default],list:null,track:null,listRefHandler:function(e){this.list=e},trackRefHandler:function(e){this.track=e},getInitialState:function(){return i({},d.default,{currentSlide:this.props.initialSlide})},getDefaultProps:function(){return h.default},componentWillMount:function(){this.props.init&&this.props.init(),this.setState({mounted:!0});for(var e=[],t=0;t<a.default.Children.count(this.props.children);t++)t>=this.state.currentSlide&&t<this.state.currentSlide+this.props.slidesToShow&&e.push(t);this.props.lazyLoad&&0===this.state.lazyLoadedList.length&&this.setState({lazyLoadedList:e})},componentDidMount:function(){this.initialize(this.props),this.adaptHeight(),window&&(window.addEventListener?window.addEventListener("resize",this.onWindowResized):window.attachEvent("onresize",this.onWindowResized))},componentWillUnmount:function(){this.animationEndCallback&&clearTimeout(this.animationEndCallback),window.addEventListener?window.removeEventListener("resize",this.onWindowResized):window.detachEvent("onresize",this.onWindowResized),this.state.autoPlayTimer&&clearInterval(this.state.autoPlayTimer)},componentWillReceiveProps:function(e){this.props.slickGoTo!=e.slickGoTo?this.changeSlide({message:"index",index:e.slickGoTo,currentSlide:this.state.currentSlide}):this.state.currentSlide>=e.children.length?(this.update(e),this.changeSlide({message:"index",index:e.children.length-e.slidesToShow,currentSlide:this.state.currentSlide})):this.update(e)},componentDidUpdate:function(){this.adaptHeight()},onWindowResized:function(){this.update(this.props),this.setState({animating:!1}),clearTimeout(this.animationEndCallback),delete this.animationEndCallback},slickPrev:function(){this.changeSlide({message:"previous"})},slickNext:function(){this.changeSlide({message:"next"})},slickGoTo:function(e){"number"==typeof e&&this.changeSlide({message:"index",index:e,currentSlide:this.state.currentSlide})},render:function(){var e,t=(0,v.default)("slick-initialized","slick-slider",this.props.className,{"slick-vertical":this.props.vertical}),n={fade:this.props.fade,cssEase:this.props.cssEase,speed:this.props.speed,infinite:this.props.infinite,centerMode:this.props.centerMode,focusOnSelect:this.props.focusOnSelect?this.selectHandler:null,currentSlide:this.state.currentSlide,lazyLoad:this.props.lazyLoad,lazyLoadedList:this.state.lazyLoadedList,rtl:this.props.rtl,slideWidth:this.state.slideWidth,slidesToShow:this.props.slidesToShow,slidesToScroll:this.props.slidesToScroll,slideCount:this.state.slideCount,trackStyle:this.state.trackStyle,variableWidth:this.props.variableWidth};if(this.props.dots===!0&&this.state.slideCount>=this.props.slidesToShow){var r={dotsClass:this.props.dotsClass,slideCount:this.state.slideCount,slidesToShow:this.props.slidesToShow,currentSlide:this.state.currentSlide,slidesToScroll:this.props.slidesToScroll,clickHandler:this.changeSlide,children:this.props.children,customPaging:this.props.customPaging};e=a.default.createElement(w.Dots,r)}var o,s,l={infinite:this.props.infinite,centerMode:this.props.centerMode,currentSlide:this.state.currentSlide,slideCount:this.state.slideCount,slidesToShow:this.props.slidesToShow,prevArrow:this.props.prevArrow,nextArrow:this.props.nextArrow,clickHandler:this.changeSlide};this.props.arrows&&(o=a.default.createElement(E.PrevArrow,l),s=a.default.createElement(E.NextArrow,l));var u=null;this.props.vertical&&(u={height:this.state.listHeight});var c=null;this.props.vertical===!1?this.props.centerMode===!0&&(c={padding:"0px "+this.props.centerPadding}):this.props.centerMode===!0&&(c={padding:this.props.centerPadding+" 0px"});var f=(0,g.default)({},u,c);return a.default.createElement("div",{className:t,onMouseEnter:this.onInnerSliderEnter,onMouseLeave:this.onInnerSliderLeave,onMouseOver:this.onInnerSliderOver},o,a.default.createElement("div",{ref:this.listRefHandler,className:"slick-list",style:f,onMouseDown:this.swipeStart,onMouseMove:this.state.dragging?this.swipeMove:null,onMouseUp:this.swipeEnd,onMouseLeave:this.state.dragging?this.swipeEnd:null,onTouchStart:this.swipeStart,onTouchMove:this.state.dragging?this.swipeMove:null,onTouchEnd:this.swipeEnd,onTouchCancel:this.state.dragging?this.swipeEnd:null,onKeyDown:this.props.accessibility?this.keyHandler:null},a.default.createElement(b.Track,i({ref:this.trackRefHandler},n),this.props.children)),s,e)}})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var i=n(140),o=n(80),a=(r(o),n(3)),s=r(a),l=n(17),u=r(l),c={changeSlide:function(e){var t,n,r,i,o,a=this.props,s=a.slidesToScroll,l=a.slidesToShow,u=this.state,c=u.slideCount,f=u.currentSlide;if(i=c%s!==0,t=i?0:(c-f)%s,"previous"===e.message)r=0===t?s:l-t,o=f-r,this.props.lazyLoad&&(n=f-r,o=n===-1?c-1:n);else if("next"===e.message)r=0===t?s:t,o=f+r,this.props.lazyLoad&&(o=(f+s)%c+t);else if("dots"===e.message||"children"===e.message){if(o=e.index*e.slidesToScroll,o===e.currentSlide)return}else if("index"===e.message&&(o=parseInt(e.index),o===e.currentSlide))return;this.slideHandler(o)},keyHandler:function(e){e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&this.props.accessibility===!0?this.changeSlide({message:this.props.rtl===!0?"next":"previous"}):39===e.keyCode&&this.props.accessibility===!0&&this.changeSlide({message:this.props.rtl===!0?"previous":"next"}))},selectHandler:function(e){this.changeSlide(e)},swipeStart:function(e){var t,n;this.props.swipe===!1||"ontouchend"in document&&this.props.swipe===!1||this.props.draggable===!1&&e.type.indexOf("mouse")!==-1||(t=void 0!==e.touches?e.touches[0].pageX:e.clientX,n=void 0!==e.touches?e.touches[0].pageY:e.clientY,this.setState({dragging:!0,touchObject:{startX:t,startY:n,curX:t,curY:n}}))},swipeMove:function(e){if(!this.state.dragging)return void e.preventDefault();if(!this.state.animating){this.props.vertical&&this.props.swipeToSlide&&this.props.verticalSwiping&&e.preventDefault();var t,n,r,o=this.state.touchObject;n=(0,i.getTrackLeft)((0,s.default)({slideIndex:this.state.currentSlide,trackRef:this.track},this.props,this.state)),o.curX=e.touches?e.touches[0].pageX:e.clientX,o.curY=e.touches?e.touches[0].pageY:e.clientY,o.swipeLength=Math.round(Math.sqrt(Math.pow(o.curX-o.startX,2))),this.props.verticalSwiping&&(o.swipeLength=Math.round(Math.sqrt(Math.pow(o.curY-o.startY,2)))),r=(this.props.rtl===!1?1:-1)*(o.curX>o.startX?1:-1),this.props.verticalSwiping&&(r=o.curY>o.startY?1:-1);var a=this.state.currentSlide,l=Math.ceil(this.state.slideCount/this.props.slidesToScroll),u=this.swipeDirection(this.state.touchObject),c=o.swipeLength;this.props.infinite===!1&&(0===a&&"right"===u||a+1>=l&&"left"===u)&&(c=o.swipeLength*this.props.edgeFriction,this.state.edgeDragged===!1&&this.props.edgeEvent&&(this.props.edgeEvent(u),this.setState({edgeDragged:!0}))),this.state.swiped===!1&&this.props.swipeEvent&&(this.props.swipeEvent(u),this.setState({swiped:!0})),t=this.props.vertical?n+c*(this.state.listHeight/this.state.listWidth)*r:n+c*r,this.props.verticalSwiping&&(t=n+c*r),this.setState({touchObject:o,swipeLeft:t,trackStyle:(0,i.getTrackCSS)((0,s.default)({left:t},this.props,this.state))}),Math.abs(o.curX-o.startX)<.8*Math.abs(o.curY-o.startY)||o.swipeLength>4&&e.preventDefault()}},getNavigableIndexes:function(){var e=void 0,t=0,n=0,r=[];for(this.props.infinite?(t=this.props.slidesToShow*-1,n=this.props.slidesToShow*-1,e=2*this.state.slideCount):e=this.state.slideCount;t<e;)r.push(t),t=n+this.props.slidesToScroll,n+=this.props.slidesToScroll<=this.props.slidesToShow?this.props.slidesToScroll:this.props.slidesToShow;return r},checkNavigable:function(e){var t=this.getNavigableIndexes(),n=0;if(e>t[t.length-1])e=t[t.length-1];else for(var r in t){if(e<t[r]){e=n;break}n=t[r]}return e},getSlideCount:function(){var e=this,t=this.props.centerMode?this.state.slideWidth*Math.floor(this.props.slidesToShow/2):0;if(this.props.swipeToSlide){var n=void 0,r=u.default.findDOMNode(this.list),i=r.querySelectorAll(".slick-slide");Array.from(i).every(function(r){if(e.props.vertical){if(r.offsetTop+e.getHeight(r)/2>e.state.swipeLeft*-1)return n=r,!1}else if(r.offsetLeft-t+e.getWidth(r)/2>e.state.swipeLeft*-1)return n=r,!1;return!0});var o=Math.abs(n.dataset.index-this.state.currentSlide)||1;return o}return this.props.slidesToScroll},swipeEnd:function(e){if(!this.state.dragging)return void(this.props.swipe&&e.preventDefault());var t=this.state.touchObject,n=this.state.listWidth/this.props.touchThreshold,r=this.swipeDirection(t);if(this.props.verticalSwiping&&(n=this.state.listHeight/this.props.touchThreshold),this.setState({dragging:!1,edgeDragged:!1,swiped:!1,swipeLeft:null,touchObject:{}}),t.swipeLength)if(t.swipeLength>n){e.preventDefault();var o=void 0,a=void 0;switch(r){case"left":case"down":a=this.state.currentSlide+this.getSlideCount(),o=this.props.swipeToSlide?this.checkNavigable(a):a,this.state.currentDirection=0;break;case"right":case"up":a=this.state.currentSlide-this.getSlideCount(),o=this.props.swipeToSlide?this.checkNavigable(a):a,this.state.currentDirection=1;break;default:o=this.state.currentSlide}this.slideHandler(o)}else{var l=(0,i.getTrackLeft)((0,s.default)({slideIndex:this.state.currentSlide,trackRef:this.track},this.props,this.state));this.setState({trackStyle:(0,i.getTrackAnimateCSS)((0,s.default)({left:l},this.props,this.state))})}},onInnerSliderEnter:function(e){this.props.autoplay&&this.props.pauseOnHover&&this.pause()},onInnerSliderOver:function(e){this.props.autoplay&&this.props.pauseOnHover&&this.pause()},onInnerSliderLeave:function(e){this.props.autoplay&&this.props.pauseOnHover&&this.autoPlay()}};t.default=c},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(0),a=r(o),s=n(315),l=n(3),u=r(l),c=n(93),f=r(c),d=n(292),p=r(d),h=n(139),m=r(h),v=a.default.createClass({displayName:"Slider",mixins:[p.default],innerSlider:null,innerSliderRefHandler:function(e){this.innerSlider=e},getInitialState:function(){return{breakpoint:null}},componentWillMount:function(){var e=this;if(this.props.responsive){var t=this.props.responsive.map(function(e){return e.breakpoint});t.sort(function(e,t){return e-t}),t.forEach(function(n,r){var i;i=0===r?(0,f.default)({minWidth:0,maxWidth:n}):(0,f.default)({minWidth:t[r-1],maxWidth:n}),e.media(i,function(){e.setState({breakpoint:n})})});var n=(0,f.default)({minWidth:t.slice(-1)[0]});this.media(n,function(){e.setState({breakpoint:null})})}},slickPrev:function(){this.innerSlider.slickPrev()},slickNext:function(){this.innerSlider.slickNext()},slickGoTo:function(e){this.innerSlider.slickGoTo(e)},render:function(){var e,t,n=this;this.state.breakpoint?(t=this.props.responsive.filter(function(e){return e.breakpoint===n.state.breakpoint}),e="unslick"===t[0].settings?"unslick":(0,u.default)({},this.props,t[0].settings)):e=(0,u.default)({},m.default,this.props);var r=this.props.children;return Array.isArray(r)||(r=[r]),r=r.filter(function(e){return!!e}),"unslick"===e?a.default.createElement("div",null,r):a.default.createElement(s.InnerSlider,i({ref:this.innerSliderRefHandler},e),r)}});e.exports=v},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.Track=void 0;var i=n(0),o=r(i),a=n(3),s=r(a),l=n(38),u=r(l),c=function(e){var t,n,r,i,o;return o=e.rtl?e.slideCount-1-e.index:e.index,r=o<0||o>=e.slideCount,e.centerMode?(i=Math.floor(e.slidesToShow/2),n=(o-e.currentSlide)%e.slideCount===0,o>e.currentSlide-i-1&&o<=e.currentSlide+i&&(t=!0)):t=e.currentSlide<=o&&o<e.currentSlide+e.slidesToShow,(0,u.default)({"slick-slide":!0,"slick-active":t,"slick-center":n,"slick-cloned":r})},f=function(e){var t={};return void 0!==e.variableWidth&&e.variableWidth!==!1||(t.width=e.slideWidth),e.fade&&(t.position="relative",t.left=-e.index*e.slideWidth,t.opacity=e.currentSlide===e.index?1:0,t.transition="opacity "+e.speed+"ms "+e.cssEase,t.WebkitTransition="opacity "+e.speed+"ms "+e.cssEase),t},d=function(e,t){return null===e.key||void 0===e.key?t:e.key},p=function(e){var t,n=[],r=[],i=[],a=o.default.Children.count(e.children);return o.default.Children.forEach(e.children,function(l,p){var h=void 0,m={message:"children",index:p,slidesToScroll:e.slidesToScroll,currentSlide:e.currentSlide};h=!e.lazyLoad|(e.lazyLoad&&e.lazyLoadedList.indexOf(p)>=0)?l:o.default.createElement("div",null);var v,y=f((0,s.default)({},e,{index:p})),g=c((0,s.default)({index:p},e));v=h.props.className?(0,u.default)(g,h.props.className):g;var b=function(t){h.props&&h.props.onClick&&h.props.onClick(t),e.focusOnSelect&&e.focusOnSelect(m)};if(n.push(o.default.cloneElement(h,{key:"original"+d(h,p),"data-index":p,className:v,tabIndex:"-1",style:(0,s.default)({
outline:"none"},h.props.style||{},y),onClick:b})),e.infinite&&e.fade===!1){var w=e.variableWidth?e.slidesToShow+1:e.slidesToShow;p>=a-w&&(t=-(a-p),r.push(o.default.cloneElement(h,{key:"precloned"+d(h,t),"data-index":t,className:v,style:(0,s.default)({},h.props.style||{},y),onClick:b}))),p<w&&(t=a+p,i.push(o.default.cloneElement(h,{key:"postcloned"+d(h,t),"data-index":t,className:v,style:(0,s.default)({},h.props.style||{},y),onClick:b})))}}),e.rtl?r.concat(n,i).reverse():r.concat(n,i)};t.Track=o.default.createClass({displayName:"Track",render:function(){var e=p.call(this,this.props);return o.default.createElement("div",{className:"slick-track",style:this.props.trackStyle},e)}})},,,,,,,,,,,,function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(i){return"function"==typeof i?i(n,r,e):t(i)}}}}t.__esModule=!0;var i=r();i.withExtraArgument=r,t.default=i},,,,,function(e,t,n){"use strict";(function(t,r){function i(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function o(e,t){function n(){var n=this.super;this.super=function(){return t.apply(this,arguments)};var r=e.apply(this,arguments);return this.super=n,r}return n.wrappedFunction=e,n}function a(e,t,n){var r=Object.getPrototypeOf(n);e.forEach(function(e){var i=Object.getOwnPropertyDescriptor(t,e),a=r.hasOwnProperty(e)&&Object.getOwnPropertyDescriptor(r,e);if("function"==typeof a.value&&"function"==typeof i.value){var s=o(i.value,a.value);Object.defineProperty(n,e,{value:s})}else Object.defineProperty(n,e,i)})}function s(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Object,n=o(e.constructor,t),r=Object.getOwnPropertyNames(e).filter(function(e){return!O(["constructor","static"],e)});S(n,t),n.prototype=Object.create(t.prototype),a(r,e,n.prototype),n.prototype.constructor=n;var i=e.static;if(i){var s=Object.getOwnPropertyNames(i);a(s,i,n)}return n}function l(e){var t=function(){var t=void 0;t=console[e]?Function.prototype.bind.call(console[e],console):Function.prototype.bind.call(console.log,console),t.apply(void 0,arguments)};return function(){var e=[].concat(Array.prototype.slice.call(arguments));e.unshift("[JS-BUY-SDK]: "),t.apply(void 0,i(e))}}function u(e,t){var n=void 0;if(t.headers&&Object.keys(t.headers).forEach(function(e){"authorization"===e.toLowerCase()&&(n=t.headers[e])}),n){var r=n.split(" ").slice(-1)[0];try{var i=atob(r),o=void 0;return o=e.indexOf("?")>-1?e+"&_x_http_authorization="+i:e+"?_x_http_authorization="+i}catch(e){}}return e}function c(e,t,n){return new Promise(function(r,i){function o(){i(new Error("There was an error with the XDR"))}var a=new XDomainRequest;a.onload=function(){try{var e=JSON.parse(a.responseText);r({json:e,originalResponse:a,isJSON:!0})}catch(e){r({text:a.responseText,originalResponse:a,isText:!0})}},a.onerror=o,a.ontimeout=o,a.open(e,u(t,n)),a.send(n.data)})}function f(){var e="undefined"==typeof window,t=!0;return e&&t}function d(e){if(e.status>=200&&e.status<300)return e;var t=new Error(e.statusText);throw t.status=e.status,t.response=e,t}function p(e){return e.json().then(function(t){return{json:t,originalResponse:e,isJSON:!0}}).catch(function(){var t=e.clone();return t.text().then(function(e){return{text:e,originalResponse:t,isText:!0}})})}function h(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!f()){var r=new XMLHttpRequest;if(!("withCredentials"in r))return c.apply(void 0,arguments)}return n.method=e,n.mode="cors",fetch(t,n).then(d).then(p)}function m(){return++Y}function v(e){if(e&&e[z])return e[z];if(void 0===e)return"(undefined)";if(null===e)return"(null)";var t="undefined"==typeof e?"undefined":E(e),n=void 0;switch(t){case"number":n=V[e],n||(n=V[e]="nu"+e);break;case"string":n=K[e],n||(n=K[e]="st"+m());break;case"boolean":n=e?"(true)":"(false)";break;default:if(e===Object){n="(Object)";break}if(e===Array){n="(Array)";break}n=B+"."+m(),null===e[z]?e[z]=n:(F.value=n,Object.defineProperty(e,z,F))}return n}function y(e,t){X[e]||(X[e]=t)}function g(e){return X[e]}function b(e,t){return e===t||Object.keys(e).every(function(n){return e[n]instanceof Date?e[n].toString()===t[n].toString():"object"===E(e[n])?b(e[n],t[n]):e[n]===t[n]})}function w(e,t){var n=void 0;switch(e){case"all":n=function(){return this.fetchAll(t)};break;case"one":n=function(){return this.fetch.apply(this,[t].concat(Array.prototype.slice.call(arguments)))};break;case"query":n=function(){return this.fetchQuery.apply(this,[t].concat(Array.prototype.slice.call(arguments)))}}return n}var E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_=void 0;_="function"==typeof Object.assign?Object.assign:function(e){if(void 0===e||null===e)throw new TypeError("Cannot convert undefined or null to object");var t=Object(e),n=[].slice.call(arguments,1);return n.length>0&&n.forEach(function(e){if(void 0!==e&&null!==e){var n=void 0;for(n in e)e.hasOwnProperty(n)&&(t[n]=e[n])}}),t};var S=_,C=void 0;C=Array.prototype.includes?function(e){var t=[].slice.call(arguments,1);return Array.prototype.includes.apply(e,t)}:function(e,t){var n=Object(e),r=parseInt(n.length,10)||0;if(0===r)return!1;var i=parseInt(arguments[2],10)||0,o=void 0;for(i>=0?o=i:(o=r+i,o<0&&(o=0));o<r;){var a=n[o];if(t===a||t!==t&&a!==a)return!0;o++}return!1};var O=C,T=s({constructor:function(){},static:{extend:function(e){return s(e,this)}}}),k=T.extend({constructor:function(){},debug:l("debug"),info:l("info"),warn:l("warn"),error:l("error")}),P=new k,A=T.extend({constructor:function(e){var t=this;Object.keys(this.deprecatedProperties).forEach(function(n){if(e.hasOwnProperty(n)){var r=t.deprecatedProperties[n],i=t[r];i(e[n],e)}}),this.requiredProperties.forEach(function(n){if(!e.hasOwnProperty(n))throw new Error("new Config() requires the option '"+n+"'");t[n]=e[n]}),this.optionalProperties.forEach(function(n){e.hasOwnProperty(n)&&(t[n]=e[n])})},deprecatedProperties:{myShopifyDomain:"transformMyShopifyDomain"},transformMyShopifyDomain:function(e,t){P.warn("Config - ","myShopifyDomain is deprecated, please use domain and provide the full shop domain."),t.domain=e+".myshopify.com"},requiredProperties:["apiKey","appId","domain"],optionalProperties:["ajaxHeaders"],apiKey:"",appId:"",domain:"",myShopifyDomain:"",ajaxHeaders:{}}),N="v0.6.2-c8f438f",x=T.extend({constructor:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.attrs=e,S(this,t)},attrs:null,serializer:null,adapter:null,shopClient:null}),M=x.extend(Object.defineProperties({constructor:function(){this.super.apply(this,arguments),this.selected=this.values[0]}},{name:{get:function(){return this.attrs.name},configurable:!0,enumerable:!0},values:{get:function(){return this.attrs.values},configurable:!0,enumerable:!0},selected:{get:function(){return this._selected},set:function(e){if(!O(this.values,e))throw new Error("Invalid option selection for "+this.name+".");return this._selected=e,e},configurable:!0,enumerable:!0}})),j=[{name:"pico",dimension:"16x16"},{name:"icon",dimension:"32x32"},{name:"thumb",dimension:"50x50"},{name:"small",dimension:"100x100"},{name:"compact",dimension:"160x160"},{name:"medium",dimension:"240x240"},{name:"large",dimension:"480x480"},{name:"grande",dimension:"600x600"},{name:"1024x1024",dimension:"1024x1024"},{name:"2048x2048",dimension:"2048x2048"}],I=T.extend(Object.defineProperties({constructor:function(e){var t=this;Object.keys(e).forEach(function(n){t[n]=e[n]})}},{variants:{get:function(){var e=this.src,t=e.lastIndexOf("."),n=e.slice(0,t),r=e.slice(t);return j.forEach(function(e){e.src=n+"_"+e.name+r}),j},configurable:!0,enumerable:!0}})),R=x.extend(Object.defineProperties({constructor:function(){this.super.apply(this,arguments)},checkoutUrl:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,t=this.config,n="https://"+t.domain+"/cart",r=this.id+":"+parseInt(e,10),i="access_token="+t.apiKey+"&_fd=0";return n+"/"+r+"?"+i}},{id:{get:function(){return this.attrs.variant.id},configurable:!0,enumerable:!0},productId:{get:function(){return this.attrs.product.id},configurable:!0,enumerable:!0},title:{get:function(){return this.attrs.variant.title},configurable:!0,enumerable:!0},productTitle:{get:function(){return this.attrs.product.title},configurable:!0,enumerable:!0},compareAtPrice:{get:function(){return this.attrs.variant.compare_at_price},configurable:!0,enumerable:!0},price:{get:function(){return this.attrs.variant.price},configurable:!0,enumerable:!0},formattedPrice:{get:function(){return this.attrs.variant.formatted_price},configurable:!0,enumerable:!0},grams:{get:function(){return this.attrs.variant.grams},configurable:!0,enumerable:!0},optionValues:{get:function(){return this.attrs.variant.option_values},configurable:!0,enumerable:!0},available:{get:function(){return this.attrs.variant.available},configurable:!0,enumerable:!0},image:{get:function(){var e=this.id,t=this.attrs.product.images,n=t[0],r=t.filter(function(t){return t.variant_ids.indexOf(e)!==-1})[0],i=r||n;return i?new I(i):null},configurable:!0,enumerable:!0},imageVariants:{get:function(){return this.image?this.image.variants:[]},configurable:!0,enumerable:!0}})),L=function(e){return e.reduce(function(e,t){return e.indexOf(t)<0&&e.push(t),e},[])},D="https://widgets.shopifyapps.com/assets/no-image.svg",U=x.extend(Object.defineProperties({constructor:function(){this.super.apply(this,arguments)}},{id:{get:function(){return this.attrs.product_id},configurable:!0,enumerable:!0},title:{get:function(){return this.attrs.title},configurable:!0,enumerable:!0},description:{get:function(){return this.attrs.body_html},configurable:!0,enumerable:!0},images:{get:function(){return this.attrs.images.map(function(e){return new I(e)})},configurable:!0,enumerable:!0},memoized:{get:function(){return this._memoized=this._memoized||{},this._memoized},configurable:!0,enumerable:!0},options:{get:function(){if(this.memoized.options)return this.memoized.options;var e=this.attrs.options,t=this.variants;return this.memoized.options=e.map(function(e){var n=e.name,r=t.reduce(function(t,n){var r=n.optionValues.filter(function(t){return t.name===e.name})[0];return t.push(r.value),t},[]),i=L(r);return new M({name:n,values:i})}),this.memoized.options},configurable:!0,enumerable:!0},variants:{get:function(){var e=this;return this.attrs.variants.map(function(t){return new R({variant:t,product:e},{config:e.config})})},configurable:!0,enumerable:!0},selections:{get:function(){return this.options.map(function(e){return e.selected})},configurable:!0,enumerable:!0},selectedVariant:{get:function(){var e=this.selections.join(" / ");return this.variants.filter(function(t){return t.title===e})[0]||null},configurable:!0,enumerable:!0},selectedVariantImage:{get:function(){return this.selectedVariant?this.selectedVariant.image:null},configurable:!0,enumerable:!0}})),q=T.extend({constructor:function(e){this.config=e},rootKeyForType:function(e){return e.slice(0,-1)+"_listing"},models:{collections:x,products:U},modelForType:function(e){return this.models[e]},deserializeSingle:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=t[this.rootKeyForType(e)],i=this.modelFromAttrs(e,r,n);return i},deserializeMultiple:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=n[this.rootKeyForType(e)+"s"];return i.map(function(n){var i=t.modelFromAttrs(e,n,r);return i})},modelFromAttrs:function(e,t,n){var r=this.modelForType(e);return n.config=this.config,new r(t,n)}}),W=T.extend(Object.defineProperties({ajax:h,constructor:function(e){this.config=e},pathForType:function(e){return"/"+e.slice(0,-1)+"_listings"},buildUrl:function(e,t,n){switch(e){case"multiple":return this.buildMultipleUrl(t,n);case"single":return this.buildSingleUrl(t,n);default:return""}},buildMultipleUrl:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=""+this.baseUrl+this.pathForType(e),r=Object.keys(t);if(r.length>0){var i=r.map(function(e){var n=void 0;return n=Array.isArray(t[e])?t[e].join(","):t[e],e+"="+encodeURIComponent(n)}).join("&");return n+"?"+i}return n},buildSingleUrl:function(e,t){return""+this.baseUrl+this.pathForType(e)+"/"+t},fetchMultiple:function(){var e=this.buildUrl.apply(this,["multiple"].concat(Array.prototype.slice.call(arguments)));return this.ajax("GET",e,{headers:this.headers}).then(function(e){return e.json})},fetchSingle:function(){var e=this.buildUrl.apply(this,["single"].concat(Array.prototype.slice.call(arguments)));return this.ajax("GET",e,{headers:this.headers}).then(function(e){return e.json})}},{base64ApiKey:{get:function(){return btoa(this.config.apiKey)},configurable:!0,enumerable:!0},baseUrl:{get:function(){var e=this.config,t=e.domain,n=e.appId;return"https://"+t+"/api/apps/"+n},configurable:!0,enumerable:!0},headers:{get:function(){return S({},{Authorization:"Basic "+this.base64ApiKey,"Content-Type":"application/json","X-SDK-Variant":"javascript","X-SDK-Version":N},this.config.ajaxHeaders)},configurable:!0,enumerable:!0}})),z="shopify-buy-uuid",H=x.extend(Object.defineProperties({constructor:function(){this.super.apply(this,arguments)}},{id:{get:function(){return this.attrs[z]},configurable:!0,enumerable:!0},variant_id:{get:function(){return this.attrs.variant_id},configurable:!0,enumerable:!0},product_id:{get:function(){return this.attrs.product_id},configurable:!0,enumerable:!0},image:{get:function(){return this.attrs.image?new I(this.attrs.image):null},configurable:!0,enumerable:!0},imageVariants:{get:function(){return this.image?this.image.variants:[]},configurable:!0,enumerable:!0},title:{get:function(){return this.attrs.title},configurable:!0,enumerable:!0},quantity:{get:function(){return this.attrs.quantity},set:function(e){var t=parseInt(e,10);if(t<0)throw new Error("Quantities must be positive");if(t!==parseFloat(e))throw new Error("Quantities must be whole numbers");return this.attrs.quantity=t,this.attrs.quantity},configurable:!0,enumerable:!0},properties:{get:function(){return this.attrs.properties||{}},set:function(e){return this.attrs.properties=e||{},e},configurable:!0,enumerable:!0},variant_title:{get:function(){return this.attrs.variant_title},configurable:!0,enumerable:!0},price:{get:function(){return this.attrs.price},configurable:!0,enumerable:!0},compare_at_price:{get:function(){return this.attrs.compare_at_price},configurable:!0,enumerable:!0},line_price:{get:function(){return(this.quantity*parseFloat(this.price)).toFixed(2)},configurable:!0,enumerable:!0},grams:{get:function(){return this.attrs.grams},configurable:!0,enumerable:!0}})),B="shopify-buy."+Date.now(),F={writable:!0,configurable:!0,enumerable:!0,value:null},Y=0,V={},K={},X=void 0;X="undefined"==typeof t?window:t;var G={set:y,get:g},J=x.extend(Object.defineProperties({constructor:function(){this.super.apply(this,arguments)},addVariants:function(){return P.warn("CartModel - ","addVariants is deprecated, please use createLineItemsFromVariants instead"),this.createLineItemsFromVariants.apply(this,arguments)},createLineItemsFromVariants:function(){var e=[].concat(Array.prototype.slice.call(arguments)).map(function(e){var t={image:e.variant.image,image_variants:e.variant.imageVariants,variant_id:e.variant.id,product_id:e.variant.productId,title:e.variant.productTitle,quantity:parseInt(e.quantity,10),properties:e.properties||{},variant_title:e.variant.title,price:e.variant.price,compare_at_price:e.variant.compareAtPrice,grams:e.variant.grams};return v(t),t}),t=this.attrs.line_items;t.push.apply(t,i(e));var n=t.reduce(function(e,t){var n=e.filter(function(e){return e.variant_id===t.variant_id&&b(e.properties,t.properties)})[0];return n?n.quantity=n.quantity+t.quantity:e.push(t),e},[]);return this.attrs.line_items=n.reduce(function(e,t){return t.quantity>=1&&e.push(t),e},[]),this.updateModel()},updateLineItem:function(e,t){if(t<1)return this.removeLineItem(e);var n=this.lineItems.filter(function(t){return t.id===e})[0];return n?(n.quantity=t,this.updateModel()):new Promise(function(t,n){n(new Error("line item with id: "+e+" not found in cart#"+this.id))})},removeLineItem:function(e){var t=this.lineItems.length,n=this.lineItems.filter(function(t){return t.id!==e}),r=n.length;return r<t?(this.attrs.line_items=n.map(function(e){return e.attrs}),this.updateModel()):new Promise(function(t,n){n(new Error("line item with id: "+e+" not found in cart#"+this.id))})},clearLineItems:function(){return this.attrs.line_items=[],this.updateModel()},updateModel:function(){var e=this;return this.shopClient.update("carts",this).then(function(t){return S(e.attrs,t.attrs),e})}},{id:{get:function(){return this.attrs[z]},configurable:!0,enumerable:!0},lineItems:{get:function(){return(this.attrs.line_items||[]).map(function(e){return new H(e)})},configurable:!0,enumerable:!0},lineItemCount:{get:function(){return this.lineItems.reduce(function(e,t){return e+t.quantity},0)},configurable:!0,enumerable:!0},subtotal:{get:function(){var e=this.lineItems.reduce(function(e,t){return e+parseFloat(t.line_price)},0);return e.toFixed(2)},configurable:!0,enumerable:!0},checkoutUrl:{get:function(){var e=this.config,t="https://"+e.domain+"/cart",n=G.get("ga"),r=this.lineItems.map(function(e){return e.variant_id+":"+e.quantity}),i="access_token="+e.apiKey+"&_fd=0";if("function"==typeof n){var o=void 0;n(function(e){o=e.get("linkerParam")}),o&&(i+="&"+o)}return t+"/"+r+"?"+i},configurable:!0,enumerable:!0}})),Q=T.extend({constructor:function(e){this.config=e},rootKeyForType:function(e){return e.slice(0,-1)},modelForType:function(){return J},deserializeSingle:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=t[this.rootKeyForType(e)],i=this.modelFromAttrs(e,r,n);return i},modelFromAttrs:function(e,t,n){var r=this.modelForType(e);return n.config=this.config,new r(t,n)},serialize:function(e,t){var n=this.rootKeyForType(e),r={},i=S({},t.attrs);return r[n]=i,delete i.attributes,Object.keys(i).forEach(function(e){var t=i[e];(null===t||"string"==typeof t&&0===t.length)&&delete i[e]}),r}}),$=x.extend(Object.defineProperties({constructor:function(e){if(Object.keys(e).indexOf("referenceId")<0)throw new Error("Missing key referenceId of reference. References to null are not allowed");this.super.apply(this,arguments)}},{id:{get:function(){return this.attrs[z]},configurable:!0,enumerable:!0},referenceId:{get:function(){return this.attrs.referenceId},set:function(e){return this.attrs.referenceId=e,e},configurable:!0,enumerable:!0}})),Z=T.extend({constructor:function(e){this.config=e},modelForType:function(){return $},deserializeSingle:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=this.modelForType(e);return new r(t,n)},serialize:function(e,t){var n=S({},t.attrs);return n}}),ee=T.extend({constructor:function(){this.localStorageAvailable=this.storageAvailable("localStorage"),this.cache={}},setItem:function(e,t){return this.localStorageAvailable?localStorage.setItem(e,JSON.stringify(t)):this.cache[e]=t,t},getItem:function(e){if(!this.localStorageAvailable)return this.cache[e]||null;var t=localStorage.getItem(e);try{return JSON.parse(t)}catch(e){return null}},storageAvailable:function(e){try{var t=G.get(e),n="__storage_test__";return t.setItem(n,n),t.removeItem(n),!0}catch(e){return!1}}}),te=T.extend({constructor:function(){this.store=new ee},idKeyForType:function(){return z},fetchSingle:function(e,t){var n=this;return new Promise(function(r,i){var o=n.store.getItem(n.storageKey(e,t));return null===o?void i(new Error(e+"#"+t+" not found")):void r(o)})},create:function(e,t){var n=this;return new Promise(function(r){var i=n.identify(t);n.store.setItem(n.storageKey(e,i),t),r(t)})},update:function(e,t,n){var r=this;return new Promise(function(i){r.store.setItem(r.storageKey(e,t),n),i(n)})},storageKey:function(e,t){return e+"."+t},identify:function(e){var t=Object.keys(e);return v(1===t.length&&"object"===E(e[t[0]])?e[t[0]]:e)}}),ne=T.extend(Object.defineProperties({constructor:function(e){this.config=e,this.serializers={products:q,collections:q,carts:Q,references:Z},this.adapters={products:W,collections:W,carts:te,references:te}},config:null,fetchAll:function(e){var t=this,n=new this.adapters[e](this.config);return n.fetchMultiple(e).then(function(r){return t.deserialize(e,r,n,null,{multiple:!0})})},fetch:function(e,t){var n=this,r=new this.adapters[e](this.config);return r.fetchSingle(e,t).then(function(t){return n.deserialize(e,t,r,null,{single:!0})})},fetchQuery:function(e,t){var n=this,r=new this.adapters[e](this.config);return r.fetchMultiple(e,t).then(function(t){return n.deserialize(e,t,r,null,{multiple:!0})})},create:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=new this.adapters[e](this.config),i=new this.serializers[e](this.config),o=i.modelForType(e),a=new o(n,{shopClient:this}),s=i.serialize(e,a);return r.create(e,s).then(function(n){return t.deserialize(e,n,r,i,{single:!0})})},update:function(e,t){var n=this,r=t.adapter,i=t.serializer,o=i.serialize(e,t),a=t.attrs[r.idKeyForType(e)];return r.update(e,a,o).then(function(t){return n.deserialize(e,t,r,i,{single:!0})})},deserialize:function(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},o=r||new this.serializers[e](this.config),a={shopClient:this,adapter:n,serializer:o,type:e},s=void 0;return s=i.multiple?o.deserializeMultiple(e,t,a):o.deserializeSingle(e,t,a)},createCart:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={line_items:[]},n={};return S(n,t),S(n,e),this.create("carts",n)},updateCart:function(e){return this.update("carts",e)},fetchCart:w("one","carts"),fetchAllProducts:w("all","products"),fetchAllCollections:w("all","collections"),fetchProduct:w("one","products"),fetchCollection:w("one","collections"),fetchQueryProducts:w("query","products"),fetchQueryCollections:w("query","collections"),fetchRecentCart:function(){var e=this;return this.fetch("references",this.config.domain+".recent-cart").then(function(t){var n=t.referenceId;return e.fetchCart(n)}).catch(function(){return e.createCart().then(function(t){var n={referenceId:t.id};return n[z]=e.config.domain+".recent-cart",e.create("references",n),t})})}},{serializers:{get:function(){return S({},this.shadowedSerializers)},set:function(e){this.shadowedSerializers=S({},e)},configurable:!0,enumerable:!0},adapters:{get:function(){return S({},this.shadowedAdapters)},set:function(e){this.shadowedAdapters=S({},e)},configurable:!0,enumerable:!0}}));if(f()){var re=n(342);G.set("fetch",re),G.set("Response",re.Response)}f()&&G.set("btoa",function(e){return new r(e).toString("base64")});var ie={ShopClient:ne,Config:A,version:N,NO_IMAGE_URI:D,buildClient:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new this.Config(e);return new this.ShopClient(t)}};e.exports=ie}).call(t,n(46),n(170).Buffer)},,function(e,t){var n=function(e){return e.replace(/[A-Z]/g,function(e){return"-"+e.toLowerCase()}).toLowerCase()};e.exports=n},,,,,function(e,t){},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var i=n(0),o=r(i),a=n(17),s=r(a),l=n(8),u=n(24),c=r(u);n(150);var f=n(151),d=r(f),p=(n(15),n(48)),h=n(47),m=n(49).configure();m.subscribe(function(){var e=m.getState();console.log("New state",e)}),m.dispatch(p.startAddProducts()),m.dispatch(h.startAddCollections()),localStorage.getItem("lastCartId")?c.default.restoreCart().then(function(e){m.dispatch({type:"SET_INITIAL_CART_STATE",localCart:e})}):c.default.createCart().then(function(e){m.dispatch({type:"SET_INITIAL_CART_STATE",localCart:e})}),s.default.render(o.default.createElement(l.Provider,{store:m},d.default),document.getElementById("app"))}],[343]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYnVuZGxlLm1pbi42ZmQ2YWMyNGU1NDlmMjdiMTgxNC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvYWN0aW9ucy9jYXJ0QWN0aW9ucy5qc3giLCJ3ZWJwYWNrOi8vLy4vYXBwL2FwaS9zaG9waWZ5QVBJLmpzeCIsIndlYnBhY2s6Ly8vLi9+L2NsYXNzbmFtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2FjdGlvbnMvY29sbGVjdGlvbkFjdGlvbnMuanN4Iiwid2VicGFjazovLy8uL2FwcC9hY3Rpb25zL3Byb2R1Y3RBY3Rpb25zLmpzeCIsIndlYnBhY2s6Ly8vLi9hcHAvc3RvcmUvY29uZmlndXJlU3RvcmUuanN4Iiwid2VicGFjazovLy8uL2FwcC9wcmVzZW50YXRpb25hbC9Mb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3V0aWxzL2Zvcm1hdC5qc3giLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1zbGljay9saWIvbWl4aW5zL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbnRhaW5lcnMvQ29sbGVjdGlvbi5qc3giLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbnRhaW5lcnMvUHJvZHVjdC5qc3giLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbnRhaW5lcnMvUHJvZHVjdEl0ZW0uanN4Iiwid2VicGFjazovLy8uL34vanNvbjJtcS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC5hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1nYS9zcmMvdXRpbHMvY29uc29sZS93YXJuLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZ2Evc3JjL3V0aWxzL3RyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1tb2RhbC9saWIvaGVscGVycy90YWJiYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXNsaWNrL2xpYi9kZWZhdWx0LXByb3BzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtc2xpY2svbGliL21peGlucy90cmFja0hlbHBlci5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvcm91dGVyL3JvdXRlci5qc3giLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbnRhaW5lcnMvQ2FydC1pdGVtLmpzeCIsIndlYnBhY2s6Ly8vLi9hcHAvY29udGFpbmVycy9Db2xsZWN0aW9uSXRlbS5qc3giLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbnRhaW5lcnMvQ29sbGVjdGlvbnMuanN4Iiwid2VicGFjazovLy8uL2FwcC9jb250YWluZXJzL0Zvb3Rlci5qc3giLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbnRhaW5lcnMvSGVhZGVyLmpzeCIsIndlYnBhY2s6Ly8vLi9hcHAvY29udGFpbmVycy9JbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbnRhaW5lcnMvTWFpbi5qc3giLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbnRhaW5lcnMvUHJvZHVjdHMuanN4Iiwid2VicGFjazovLy8uL2FwcC9jb250YWluZXJzL1VwbG9hZC5qc3giLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbnRhaW5lcnMvY2FydC5qc3giLCJ3ZWJwYWNrOi8vLy4vYXBwL3ByZXNlbnRhdGlvbmFsL0Fib3V0LmpzeCIsIndlYnBhY2s6Ly8vLi9hcHAvcHJlc2VudGF0aW9uYWwvQ29udGFjdC5qc3giLCJ3ZWJwYWNrOi8vLy4vYXBwL3ByZXNlbnRhdGlvbmFsL0xvZ2luLmpzeCIsIndlYnBhY2s6Ly8vLi9hcHAvcHJlc2VudGF0aW9uYWwvTWFwLmpzeCIsIndlYnBhY2s6Ly8vLi9hcHAvcHJlc2VudGF0aW9uYWwvT3JkZXJTdGF0dXMuanN4Iiwid2VicGFjazovLy8uL2FwcC9yZWR1Y2Vycy9yZWR1Y2Vycy5qc3giLCJ3ZWJwYWNrOi8vLy4vfi9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9idWZmZXIvfi9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL34vY2FuLXVzZS1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9lbGVtZW50LWNsYXNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vZW5xdWlyZS5qcy9kaXN0L2VucXVpcmUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9leGVudi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1nYS9zcmMvY29tcG9uZW50cy9PdXRib3VuZExpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1nYS9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1nYS9zcmMvdXRpbHMvY29uc29sZS9sb2cuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1nYS9zcmMvdXRpbHMvZm9ybWF0LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZ2Evc3JjL3V0aWxzL21pZ2h0QmVFbWFpbC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWdhL3NyYy91dGlscy9yZW1vdmVMZWFkaW5nU2xhc2guanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1nYS9zcmMvdXRpbHMvdG9UaXRsZUNhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1tb2RhbC9saWIvY29tcG9uZW50cy9Nb2RhbC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LW1vZGFsL2xpYi9jb21wb25lbnRzL01vZGFsUG9ydGFsLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtbW9kYWwvbGliL2hlbHBlcnMvYXJpYUFwcEhpZGVyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtbW9kYWwvbGliL2hlbHBlcnMvZm9jdXNNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtbW9kYWwvbGliL2hlbHBlcnMvc2NvcGVUYWIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1tb2RhbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1yZXNwb25zaXZlLW1peGluL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtc2xpY2svbGliL2Fycm93cy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXNsaWNrL2xpYi9kb3RzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtc2xpY2svbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtc2xpY2svbGliL2luaXRpYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1zbGljay9saWIvaW5uZXItc2xpZGVyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtc2xpY2svbGliL21peGlucy9ldmVudC1oYW5kbGVycy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXNsaWNrL2xpYi9zbGlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1zbGljay9saWIvdHJhY2suanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWR1eC10aHVuay9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9zaG9waWZ5LWJ1eS9saWIvc2hvcGlmeS5qcyIsIndlYnBhY2s6Ly8vLi9+L3N0cmluZy1jb252ZXJ0L2NhbWVsMmh5cGhlbi5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvYXBwLmpzeCJdLCJuYW1lcyI6WyJ3ZWJwYWNrSnNvbnAiLCJtb2R1bGUiLCJleHBvcnRzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJjbG9zZUNhcnQiLCJvcGVuQ2FydCIsInVwZGF0ZUNhcnRJdGVtIiwidXBkYXRlQ2FydEl0ZW1zQ291bnQiLCJ1cGRhdGVDYXJ0U3VidG90YWwiLCJhZGRUb0NhcnQiLCJzdGFydEFkZG9yVXBkYXRlQ2FydEl0ZW0iLCJ1bmRlZmluZWQiLCJfc2hvcGlmeUFQSSIsIl9zaG9waWZ5QVBJMiIsInByb2R1Y3RWYXJpYW50IiwicXVhbnRpdHkiLCJkaXNwYXRjaCIsImdldFN0YXRlIiwiZmluZENhcnRJdGVtQnlWYXJpYW50SWQiLCJ2YXJpYW50SWQiLCJjYXJ0IiwibGluZUl0ZW1zIiwiZmlsdGVyIiwiaXRlbSIsInZhcmlhbnRfaWQiLCJpZCIsImNhcnRMaW5lSXRlbSIsInBhcnNlSW50IiwiY3JlYXRlTGluZUl0ZW1zRnJvbVZhcmlhbnRzIiwidmFyaWFudCIsInRoZW4iLCJ1cGRhdGVkQ2FydCIsInVwZGF0ZWRDYXJ0SXRlbXMiLCJ0eXBlIiwiY2F0Y2giLCJlcnJvcnMiLCJjb25zb2xlIiwibG9nIiwibmV3U3VidG90YWwiLCJzdWJ0b3RhbCIsInVwZGF0ZWRDYXJ0SXRlbXNDb3VudCIsImxpbmVJdGVtc0NvdW50Iiwic2VsZWN0ZWRDYXJ0SXRlbSIsInVwZGF0ZWRRdWFudGl0eSIsImZvckVhY2giLCJjYXJ0SXRlbSIsInVwZGF0ZWRDYXJ0SXRlbSIsInB1c2giLCJ1cGRhdGVMaW5lSXRlbSIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIlNob3BpZnlCdXkiLCJzaG9waWZ5QVBJIiwiY29uZmlndXJlIiwidGhpcyIsImNsaWVudCIsImJ1aWxkQ2xpZW50IiwiYXBpS2V5IiwiZG9tYWluIiwiYXBwSWQiLCJfdGhpcyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY3JlYXRlQ2FydCIsIm5ld0NhcnQiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwibG9jYWxDYXJ0IiwiaXNPcGVuIiwiX3RoaXMyIiwiZmV0Y2hDYXJ0IiwiZ2V0SXRlbSIsInJlbW90ZUNhcnQiLCJsaW5lSXRlbUNvdW50IiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiY2xhc3NOYW1lcyIsImNsYXNzZXMiLCJhcmd1bWVudHMiLCJhcmciLCJhcmdUeXBlIiwiQXJyYXkiLCJpc0FycmF5IiwiYXBwbHkiLCJoYXNPd24iLCJjYWxsIiwiam9pbiIsImhhc093blByb3BlcnR5IiwiYWRkQ29sbGVjdGlvbnMiLCJzdGFydEFkZENvbGxlY3Rpb25zIiwic2V0QWN0aXZlQ29sbGVjdGlvbiIsIl9leHRlbmRzIiwiYXNzaWduIiwic291cmNlIiwiZmV0Y2hDb2xsZWN0aW9uIiwiZGF0YSIsImNvbGxlY3Rpb24iLCJwYXJzZWRDb2xsZWN0aW9uIiwiZmV0Y2hBbGxDb2xsZWN0aW9ucyIsImNvbGxlY3Rpb25zIiwicGFyc2VkQ29sbGVjdGlvbnMiLCJrZXlzIiwiY29sbGVjdGlvbklkIiwidXBkYXRlQWN0aXZlUHJvZHVjdE9wdGlvbnMiLCJjbGVhckFjdGl2ZVByb2R1Y3QiLCJzZXRBY3RpdmVQcm9kdWN0IiwicHJlbG9hZFByb2R1Y3RJbWFnZXMiLCJhZGRQcm9kdWN0cyIsInN0YXJ0QWRkUHJvZHVjdHMiLCJmZXRjaEFsbFByb2R1Y3RzIiwicHJvZHVjdHMiLCJwYXJzZWRQcm9kdWN0cyIsIm1hcCIsInByb2R1Y3QiLCJpbmRleCIsInVwZGF0ZWRQcm9kdWN0IiwiYWxsIiwiaW1hZ2VzIiwiSW1hZ2UiLCJzcmMiLCJzZWxlY3RlZFZhcmlhbnQiLCJpbWFnZVZhcmlhbnRzIiwib3B0aW9ucyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwibmV3T2JqIiwiX3JlZHV4IiwicmVkdXgiLCJfcmVkdXhUaHVuayIsIl9yZWR1eFRodW5rMiIsIl9yZWR1Y2VycyIsImluaXRpYWxTdGF0ZSIsInJlZHVjZXIiLCJjb21iaW5lUmVkdWNlcnMiLCJuYXYiLCJzdG9yZSIsImNyZWF0ZVN0b3JlIiwiY29tcG9zZSIsImFwcGx5TWlkZGxld2FyZSIsIndpbmRvdyIsImRldlRvb2xzRXh0ZW5zaW9uIiwiZiIsIkxvYWRlciIsIl9yZWFjdDIiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiX3JlYWN0IiwiRm9ybWF0IiwiYW1vdW50IiwiY3VycmVuY3kiLCJ0aG91c2FuZFNlcGFyYXRvciIsImRlY2ltYWxTZXBhcmF0b3IiLCJsb2NhbGVEZWNpbWFsU2VwYXJhdG9yIiwicmVnZXgiLCJSZWdFeHAiLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsInJlcGxhY2UiLCJ0b1N0cmluZyIsIl9yZWFjdERvbSIsIl9yZWFjdERvbTIiLCJfdHJhY2tIZWxwZXIiLCJfb2JqZWN0QXNzaWduIiwiX29iamVjdEFzc2lnbjIiLCJoZWxwZXJzIiwiaW5pdGlhbGl6ZSIsInNsaWRlV2lkdGgiLCJzbGlja0xpc3QiLCJmaW5kRE9NTm9kZSIsImxpc3QiLCJzbGlkZUNvdW50IiwiQ2hpbGRyZW4iLCJjb3VudCIsImNoaWxkcmVuIiwibGlzdFdpZHRoIiwiZ2V0V2lkdGgiLCJ0cmFja1dpZHRoIiwidHJhY2siLCJ2ZXJ0aWNhbCIsImNlbnRlclBhZGRpbmdBZGoiLCJjZW50ZXJNb2RlIiwiY2VudGVyUGFkZGluZyIsInNsaWRlc1RvU2hvdyIsInNsaWRlSGVpZ2h0IiwiZ2V0SGVpZ2h0IiwicXVlcnlTZWxlY3RvciIsImxpc3RIZWlnaHQiLCJjdXJyZW50U2xpZGUiLCJydGwiLCJpbml0aWFsU2xpZGUiLCJzZXRTdGF0ZSIsInRhcmdldExlZnQiLCJnZXRUcmFja0xlZnQiLCJzbGlkZUluZGV4Iiwic3RhdGUiLCJ0cmFja1JlZiIsInRyYWNrU3R5bGUiLCJnZXRUcmFja0NTUyIsImxlZnQiLCJhdXRvUGxheSIsInVwZGF0ZSIsImF1dG9wbGF5IiwicGF1c2UiLCJlbGVtIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwid2lkdGgiLCJvZmZzZXRXaWR0aCIsImhlaWdodCIsIm9mZnNldEhlaWdodCIsImFkYXB0SGVpZ2h0IiwiYWRhcHRpdmVIZWlnaHQiLCJzZWxlY3RvciIsInN0eWxlIiwiY2FuR29OZXh0Iiwib3B0cyIsImNhbkdvIiwiaW5maW5pdGUiLCJzbGlkZUhhbmRsZXIiLCJ0YXJnZXRTbGlkZSIsImN1cnJlbnRMZWZ0IiwiY2FsbGJhY2siLCJ3YWl0Rm9yQW5pbWF0ZSIsImFuaW1hdGluZyIsImZhZGUiLCJsYXp5TG9hZCIsImxhenlMb2FkZWRMaXN0IiwiaW5kZXhPZiIsImNvbmNhdCIsImFmdGVyQ2hhbmdlIiwiYW5pbWF0aW9uRW5kQ2FsbGJhY2siLCJzZXRUaW1lb3V0Iiwic3BlZWQiLCJiZWZvcmVDaGFuZ2UiLCJzbGlkZXNUb1Njcm9sbCIsImxvYWRlZCIsInNsaWRlc1RvTG9hZCIsInVzZUNTUyIsIm5leHRTdGF0ZUNoYW5nZXMiLCJzd2lwZUxlZnQiLCJnZXRUcmFja0FuaW1hdGVDU1MiLCJzd2lwZURpcmVjdGlvbiIsInRvdWNoT2JqZWN0IiwieERpc3QiLCJ5RGlzdCIsInIiLCJzd2lwZUFuZ2xlIiwic3RhcnRYIiwiY3VyWCIsInN0YXJ0WSIsImN1clkiLCJNYXRoIiwiYXRhbjIiLCJyb3VuZCIsIlBJIiwiYWJzIiwidmVydGljYWxTd2lwaW5nIiwicGxheSIsIm5leHRJbmRleCIsIm1vdW50ZWQiLCJhdXRvUGxheVRpbWVyIiwiY2xlYXJUaW1lb3V0IiwiYXV0b3BsYXlTcGVlZCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9yZXF1aXJlIiwiY29ubmVjdCIsImFjdGlvbnMiLCJDb2xsZWN0aW9uIiwiX1JlYWN0JENvbXBvbmVudCIsImdldFByb3RvdHlwZU9mIiwicGFyYW1zIiwiX2NvbGxlY3Rpb24iLCJ0aXRsZSIsImNvbGxlY3Rpb25faWQiLCJDb21wb25lbnQiLCJhY3RpdmUiLCJfcmVhY3RSb3V0ZXIiLCJfZm9ybWF0IiwiX2Zvcm1hdDIiLCJfcmVhY3RNb2RhbCIsIl9yZWFjdE1vZGFsMiIsIl9Mb2FkZXIiLCJfTG9hZGVyMiIsInByb2R1Y3RBY3Rpb25zIiwiY2FydEFjdGlvbnMiLCJQcm9kdWN0IiwibW9kYWxJc09wZW4iLCJvcGVuTW9kYWwiLCJiaW5kIiwiY2xvc2VNb2RhbCIsImZldGNoUHJvZHVjdCIsInByb2R1Y3RJZCIsIm9wdGlvbk5hbWUiLCJvcHRpb24iLCJuYW1lIiwic2VsZWN0ZWQiLCJfdGhpczMiLCJhY3RpdmVQcm9kdWN0IiwiX2FjdGl2ZVByb2R1Y3QkYXR0cnMiLCJhdHRycyIsInByb2R1Y3RfaWQiLCJfYWN0aXZlUHJvZHVjdCIsImRlc2NyaXB0aW9uIiwic2VsZWN0ZWRWYXJpYW50SW1hZ2UiLCJyZW5kZXJPcHRpb25zIiwib25DaGFuZ2UiLCJldmVudCIsImhhbmRsZU9wdGlvbkNoYW5nZSIsInZhbHVlcyIsInJlbmRlclNpemVzIiwib3B0aW9uc0luZGV4Iiwib25DbGljayIsImJyb3dzZXJIaXN0b3J5IiwiZ29CYWNrIiwiYWx0IiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJhc01vbmV5IiwicHJpY2UiLCJwbGFjZWhvbGRlciIsImhyZWYiLCJvblJlcXVlc3RDbG9zZSIsImNvbnRlbnRMYWJlbCIsImNsb3NlVGltZW91dE1TIiwiUHJvZHVjdEl0ZW0iLCJfcHJvcHMiLCJpbWFnZSIsIkxpbmsiLCJ0byIsImJhY2tncm91bmRJbWFnZSIsImNhbWVsMmh5cGhlbiIsImlzRGltZW5zaW9uIiwiZmVhdHVyZSIsInJlIiwidGVzdCIsIm9iajJtcSIsIm1xIiwiZmVhdHVyZXMiLCJqc29uMm1xIiwicXVlcnkiLCJxIiwiZnVuYyIsInRoaXNBcmciLCJhcmdzIiwiYmFzZVRpbWVzIiwibiIsIml0ZXJhdGVlIiwicmVzdWx0Iiwib3ZlckFyZyIsInRyYW5zZm9ybSIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc0FyZ3VtZW50cyIsIlN0cmluZyIsInNraXBJbmRleGVzIiwiaXNJbmRleCIsImFzc2lnblZhbHVlIiwib2JqZWN0Iiwib2JqVmFsdWUiLCJlcSIsImJhc2VLZXlzIiwiaXNQcm90b3R5cGUiLCJuYXRpdmVLZXlzIiwiYmFzZVJlc3QiLCJzdGFydCIsIm5hdGl2ZU1heCIsImFycmF5Iiwib3RoZXJBcmdzIiwiY29weU9iamVjdCIsImN1c3RvbWl6ZXIiLCJuZXdWYWx1ZSIsImNyZWF0ZUFzc2lnbmVyIiwiYXNzaWduZXIiLCJzb3VyY2VzIiwiZ3VhcmQiLCJpc0l0ZXJhdGVlQ2FsbCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJyZUlzVWludCIsImlzT2JqZWN0IiwiaXNBcnJheUxpa2UiLCJDdG9yIiwicHJvdG8iLCJvYmplY3RQcm90byIsIm90aGVyIiwiaXNBcnJheUxpa2VPYmplY3QiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIm9iamVjdFRvU3RyaW5nIiwiYXJnc1RhZyIsImlzTGVuZ3RoIiwiaXNGdW5jdGlvbiIsImlzT2JqZWN0TGlrZSIsInRhZyIsImZ1bmNUYWciLCJnZW5UYWciLCJtYXgiLCJub25FbnVtU2hhZG93cyIsInZhbHVlT2YiLCJ3YXJuIiwicyIsInRyaW0iLCJmb2N1c2FibGUiLCJlbGVtZW50IiwiaXNUYWJJbmRleE5vdE5hTiIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJkaXNhYmxlZCIsInZpc2libGUiLCJoaWRkZW4iLCJlbCIsImRpc3BsYXkiLCJkb2N1bWVudCIsImJvZHkiLCJwYXJlbnROb2RlIiwidGFiYmFibGUiLCJ0YWJJbmRleCIsImdldEF0dHJpYnV0ZSIsImlzVGFiSW5kZXhOYU4iLCJpc05hTiIsImZpbmRUYWJiYWJsZURlc2NlbmRhbnRzIiwic2xpY2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZGVmYXVsdFByb3BzIiwiYWNjZXNzaWJpbGl0eSIsImFycm93cyIsImNzc0Vhc2UiLCJjdXN0b21QYWdpbmciLCJkb3RzIiwiZG90c0NsYXNzIiwiZHJhZ2dhYmxlIiwiZWFzaW5nIiwiZWRnZUZyaWN0aW9uIiwiZm9jdXNPblNlbGVjdCIsInBhdXNlT25Ib3ZlciIsInJlc3BvbnNpdmUiLCJzbGlkZSIsInN3aXBlIiwic3dpcGVUb1NsaWRlIiwidG91Y2hNb3ZlIiwidG91Y2hUaHJlc2hvbGQiLCJ2YXJpYWJsZVdpZHRoIiwiZWRnZUV2ZW50IiwiaW5pdCIsInN3aXBlRXZlbnQiLCJuZXh0QXJyb3ciLCJwcmV2QXJyb3ciLCJjaGVja1NwZWNLZXlzIiwic3BlYyIsImtleXNBcnJheSIsInJlZHVjZSIsImVycm9yIiwidHJhY2tIZWlnaHQiLCJ0cmFja0NoaWxkcmVuIiwib3BhY2l0eSIsIldlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb24iLCJXZWJraXRUcmFuc2l0aW9uIiwibXNUcmFuc2Zvcm0iLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5MZWZ0Iiwic2xpZGVPZmZzZXQiLCJ2ZXJ0aWNhbE9mZnNldCIsInNsaWRlc1RvT2Zmc2V0IiwiZmxvb3IiLCJ0YXJnZXRTbGlkZUluZGV4IiwiY2hpbGROb2RlcyIsIm9mZnNldExlZnQiLCJFcnJvciIsImxvZ1BhZ2VWaWV3IiwibG9jYXRpb24iLCJfcmVhY3RHYTIiLCJzZXQiLCJwYWdlIiwicGF0aG5hbWUiLCJwYWdldmlldyIsIl9yZWFjdERvY3VtZW50TWV0YSIsIl9NYWluIiwiX01haW4yIiwiX0luZGV4IiwiX0luZGV4MiIsIl9Qcm9kdWN0cyIsIl9Qcm9kdWN0czIiLCJfUHJvZHVjdCIsIl9Qcm9kdWN0MiIsIl9Db2xsZWN0aW9ucyIsIl9Db2xsZWN0aW9uczIiLCJfQ29sbGVjdGlvbiIsIl9Db2xsZWN0aW9uMiIsIl9VcGxvYWQiLCJfVXBsb2FkMiIsIl9PcmRlclN0YXR1cyIsIl9PcmRlclN0YXR1czIiLCJfTWFwIiwiX01hcDIiLCJfTG9naW4iLCJfTG9naW4yIiwiX0Fib3V0IiwiX0Fib3V0MiIsIl9Db250YWN0IiwiX0NvbnRhY3QyIiwiX3JlYWN0R2EiLCJsaXN0ZW4iLCJzY3JvbGxUbyIsIlJvdXRlciIsImhpc3RvcnkiLCJSb3V0ZSIsInBhdGgiLCJjb21wb25lbnQiLCJJbmRleFJvdXRlIiwiQ2FydEl0ZW0iLCJpbmNyZW1lbnRMaW5lSXRlbSIsImNoYW5nZVF1YW50aXR5IiwidmFyaWFudF90aXRsZSIsIm1pbiIsInJlYWRPbmx5IiwiQ29sbGVjdGlvbkl0ZW0iLCJfQ29sbGVjdGlvbkl0ZW0iLCJfQ29sbGVjdGlvbkl0ZW0yIiwiQ29sbGVjdGlvbnMiLCJGb290ZXIiLCJhY3RpdmVDbGFzc05hbWUiLCJIZWFkZXIiLCJjYXJ0SXRlbXMiLCJJbmRleExpbmsiLCJhY3RpdmVTdHlsZSIsImZvbnRXZWlnaHQiLCJfcmVhY3RTbGljayIsIl9yZWFjdFNsaWNrMiIsIl9Qcm9kdWN0SXRlbSIsIl9Qcm9kdWN0SXRlbTIiLCJJbmRleCIsInNldHRpbmdzIiwiYnJlYWtwb2ludCIsInR5ZXAiLCJoYW5kbGVBZGRUb0NhcnQiLCJfSGVhZGVyIiwiX0hlYWRlcjIiLCJfRm9vdGVyIiwiX0Zvb3RlcjIiLCJfcmVhY3REb2N1bWVudE1ldGEyIiwiX2NhcnQiLCJfY2FydDIiLCJNYWluIiwiY29udGVudCIsIm1ldGEiLCJjaGFyc2V0IiwiYXV0byIsIm9ncmFwaCIsInBhZ2VOYW1lIiwic3Vic3RyIiwic3BsaXQiLCJQcm9kdWN0cyIsIlVwbG9hZCIsIl9DYXJ0SXRlbSIsIl9DYXJ0SXRlbTIiLCJDYXJ0IiwiaGFuZGxlQ2hlY2tvdXQiLCJvcGVuIiwiY2hlY2tvdXRVcmwiLCJfcHJvcHMkY2FydCIsInJlbmRlckxpbmVJdGVtcyIsImxpbmVJdGVtIiwiaGFuZGxlQ2xvc2VDYXJ0IiwiQWJvdXQiLCJDb250YWN0IiwiTG9naW4iLCJNYXAiLCJPcmRlclN0YXR1cyIsInByb2R1Y3RzUmVkdWNlciIsImFjdGlvbiIsImZldGNoZWQiLCJjb2xsZWN0aW9uc1JlZHVjZXIiLCJjYXJ0UmVkdWNlciIsIm5hdlJlZHVjZXIiLCJzaG93Q2xvc2UiLCJzaG93TmF2IiwicGxhY2VIb2xkZXJzQ291bnQiLCJiNjQiLCJsZW4iLCJieXRlTGVuZ3RoIiwidG9CeXRlQXJyYXkiLCJqIiwibCIsInRtcCIsInBsYWNlSG9sZGVycyIsImFyciIsIkFyciIsIkwiLCJyZXZMb29rdXAiLCJjaGFyQ29kZUF0IiwidHJpcGxldFRvQmFzZTY0IiwibnVtIiwibG9va3VwIiwiZW5jb2RlQ2h1bmsiLCJ1aW50OCIsImVuZCIsIm91dHB1dCIsImZyb21CeXRlQXJyYXkiLCJleHRyYUJ5dGVzIiwicGFydHMiLCJtYXhDaHVua0xlbmd0aCIsImxlbjIiLCJVaW50OEFycmF5IiwiY29kZSIsImdsb2JhbCIsInR5cGVkQXJyYXlTdXBwb3J0IiwiZm9vIiwic3ViYXJyYXkiLCJlIiwia01heExlbmd0aCIsIkJ1ZmZlciIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJ0aGF0IiwiUmFuZ2VFcnJvciIsImVuY29kaW5nT3JPZmZzZXQiLCJhbGxvY1Vuc2FmZSIsImZyb20iLCJBcnJheUJ1ZmZlciIsImZyb21BcnJheUJ1ZmZlciIsImZyb21TdHJpbmciLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsInNpemUiLCJhbGxvYyIsImZpbGwiLCJlbmNvZGluZyIsImNoZWNrZWQiLCJzdHJpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJmcm9tQXJyYXlMaWtlIiwiYnl0ZU9mZnNldCIsImlzQnVmZmVyIiwiY29weSIsImJ1ZmZlciIsImlzbmFuIiwiU2xvd0J1ZmZlciIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic2xvd1RvU3RyaW5nIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJiIiwibSIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwidmFsIiwiZGlyIiwiYXJyYXlJbmRleE9mIiwibGFzdEluZGV4T2YiLCJyZWFkIiwiYnVmIiwiaW5kZXhTaXplIiwicmVhZFVJbnQxNkJFIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaGV4V3JpdGUiLCJvZmZzZXQiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1dGYxNmxlVG9CeXRlcyIsImJhc2U2NCIsInJlcyIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJkZWNvZGVDb2RlUG9pbnRzQXJyYXkiLCJjb2RlUG9pbnRzIiwiTUFYX0FSR1VNRU5UU19MRU5HVEgiLCJmcm9tQ2hhckNvZGUiLCJyZXQiLCJvdXQiLCJ0b0hleCIsImJ5dGVzIiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwib2JqZWN0V3JpdGVVSW50MzIiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJpZWVlNzU0Iiwid3JpdGVEb3VibGUiLCJiYXNlNjRjbGVhbiIsInN0ciIsInN0cmluZ3RyaW0iLCJJTlZBTElEX0JBU0U2NF9SRSIsInVuaXRzIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwiYnl0ZUFycmF5IiwiYyIsImhpIiwibG8iLCJkc3QiLCJJTlNQRUNUX01BWF9CWVRFUyIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJTeW1ib2wiLCJzcGVjaWVzIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsImEiLCJ4IiwieSIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImVxdWFscyIsImluc3BlY3QiLCJtYXRjaCIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsImlzRmluaXRlIiwidG9KU09OIiwiX2FyciIsIm5ld0J1ZiIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJwb3ciLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwibWF4Qnl0ZXMiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwic3ViIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJjYW5Vc2VET00iLCJwcm9wIiwiRWxlbWVudENsYXNzIiwibm9kZVR5cGUiLCJhZGQiLCJyZW1vdmUiLCJpZHgiLCJzcGxpY2UiLCJoYXMiLCJ0b2dnbGUiLCJjb250ZXh0IiwiZmFjdG9yeSIsIm1hdGNoTWVkaWEiLCJlYWNoIiwiZm4iLCJjb250IiwiUXVlcnlIYW5kbGVyIiwiZGVmZXJTZXR1cCIsInNldHVwIiwiTWVkaWFRdWVyeSIsImlzVW5jb25kaXRpb25hbCIsImhhbmRsZXJzIiwibXFsIiwibGlzdGVuZXIiLCJhc3Nlc3MiLCJhZGRMaXN0ZW5lciIsIk1lZGlhUXVlcnlEaXNwYXRjaCIsInF1ZXJpZXMiLCJicm93c2VySXNJbmNhcGFibGUiLCJtYXRjaGVzIiwiaW5pdGlhbGlzZWQiLCJvbiIsIm9mZiIsInVubWF0Y2giLCJkZXN0cm95IiwiYWRkSGFuZGxlciIsImhhbmRsZXIiLCJxaCIsInJlbW92ZUhhbmRsZXIiLCJoIiwiY2xlYXIiLCJyZW1vdmVMaXN0ZW5lciIsInJlZ2lzdGVyIiwic2hvdWxkRGVncmFkZSIsInVucmVnaXN0ZXIiLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImNhblVzZVdvcmtlcnMiLCJXb3JrZXIiLCJjYW5Vc2VFdmVudExpc3RlbmVycyIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJkIiwiTmFOIiwicnQiLCJMTjIiLCJSZWFjdCIsIk5FV1RBQiIsIk91dGJvdW5kTGluayIsImNyZWF0ZUNsYXNzIiwiZGlzcGxheU5hbWUiLCJwcm9wVHlwZXMiLCJldmVudExhYmVsIiwiUHJvcFR5cGVzIiwiaXNSZXF1aXJlZCIsInN0YXRpY3MiLCJ0cmFja0xpbmsiLCJoYW5kbGVDbGljayIsInByZXZlbnREZWZhdWx0IiwiZXZlbnRNZXRhIiwibGFiZWwiLCJyZW5kZXIiLCJmb3JtYXQiLCJyZW1vdmVMZWFkaW5nU2xhc2giLCJfZGVidWciLCJfdGl0bGVDYXNlIiwiUmVhY3RHQSIsImdhVHJhY2tpbmdJRCIsImRlYnVnIiwidGl0bGVDYXNlIiwibyIsImciLCJEYXRlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJhc3luYyIsImluc2VydEJlZm9yZSIsImdhT3B0aW9ucyIsImdhIiwiSlNPTiIsInN0cmluZ2lmeSIsImZpZWxkc09iamVjdCIsInNlbmQiLCJmaWVsZE9iamVjdCIsIm1vZGFsdmlldyIsIm1vZGFsTmFtZSIsInRpbWluZyIsImNhdGVnb3J5IiwidmFyaWFibGUiLCJoaXRUeXBlIiwidGltaW5nQ2F0ZWdvcnkiLCJ0aW1pbmdWYXIiLCJ0aW1pbmdWYWx1ZSIsInRpbWluZ0xhYmVsIiwiZXZlbnRDYXRlZ29yeSIsImV2ZW50QWN0aW9uIiwiZXZlbnRWYWx1ZSIsIm5vbkludGVyYWN0aW9uIiwidHJhbnNwb3J0IiwiZXhjZXB0aW9uIiwiZXhEZXNjcmlwdGlvbiIsImZhdGFsIiwiZXhGYXRhbCIsInBsdWdpbiIsInJlcXVpcmUiLCJleGVjdXRlIiwicGF5bG9hZCIsImFjdGlvblR5cGUiLCJwbHVnaW5OYW1lIiwiY29tbWFuZCIsIm91dGJvdW5kTGluayIsImhpdENhbGxiYWNrIiwic2FmZXR5Q2FsbGJhY2tDYWxsZWQiLCJzYWZldHlDYWxsYmFjayIsInQiLCJjbGVhcmFibGVDYWxsYmFja0ZvckdBIiwib3JpZ1RyYWNrTGluayIsImluZm8iLCJtaWdodEJlRW1haWwiLCJfcmVkYWN0ZWQiLCJ0b1RpdGxlQ2FzZSIsInN1YnN0cmluZyIsInNtYWxsV29yZHMiLCJzZWFyY2giLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsImdldFBhcmVudEVsZW1lbnQiLCJwYXJlbnRTZWxlY3RvciIsIlJlYWN0RE9NIiwiTW9kYWxQb3J0YWwiLCJjcmVhdGVGYWN0b3J5IiwiYXJpYUFwcEhpZGVyIiwiZWxlbWVudENsYXNzIiwicmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsIkFzc2lnbiIsIlNhZmVIVE1MRWxlbWVudCIsIkhUTUxFbGVtZW50IiwiQXBwRWxlbWVudCIsImFwcGVuZENoaWxkIiwiTW9kYWwiLCJzZXRBcHBFbGVtZW50Iiwic2V0RWxlbWVudCIsImluamVjdENTUyIsImJvb2wiLCJzaGFwZSIsIm92ZXJsYXkiLCJwb3J0YWxDbGFzc05hbWUiLCJhcHBFbGVtZW50IiwiaW5zdGFuY2VPZiIsIm9uQWZ0ZXJPcGVuIiwibnVtYmVyIiwiYXJpYUhpZGVBcHAiLCJzaG91bGRDbG9zZU9uT3ZlcmxheUNsaWNrIiwicm9sZSIsImdldERlZmF1bHRQcm9wcyIsImNvbXBvbmVudERpZE1vdW50Iiwibm9kZSIsInBhcmVudCIsInJlbmRlclBvcnRhbCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXdQcm9wcyIsImN1cnJlbnRQYXJlbnQiLCJuZXdQYXJlbnQiLCJyZW1vdmVDaGlsZCIsImNvbXBvbmVudFdpbGxVbm1vdW50Iiwic2hvdyIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJwb3J0YWwiLCJkZWZhdWx0U3R5bGVzIiwiRE9NIiwibm9zY3JpcHQiLCJwb3NpdGlvbiIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyIiwiYmFja2dyb3VuZCIsIm92ZXJmbG93IiwiV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmciLCJib3JkZXJSYWRpdXMiLCJvdXRsaW5lIiwicGFkZGluZyIsImRpdiIsImZvY3VzTWFuYWdlciIsInNjb3BlVGFiIiwiQ0xBU1NfTkFNRVMiLCJiYXNlIiwiYWZ0ZXJPcGVuIiwiYmVmb3JlQ2xvc2UiLCJzaG91bGRDbG9zZSIsImdldEluaXRpYWxTdGF0ZSIsInNldEZvY3VzQWZ0ZXJSZW5kZXIiLCJjbG9zZVRpbWVyIiwiY2xvc2UiLCJjb21wb25lbnREaWRVcGRhdGUiLCJmb2N1c0FmdGVyUmVuZGVyIiwiZm9jdXNDb250ZW50IiwiZm9jdXMiLCJzZXR1cFNjb3BlZEZvY3VzIiwibWFya0ZvckZvY3VzTGF0ZXIiLCJjbG9zZVdpdGhUaW1lb3V0IiwiY2xvc2VXaXRob3V0VGltZW91dCIsImNvbnRlbnRIYXNGb2N1cyIsInJlZnMiLCJhZnRlckNsb3NlIiwicmV0dXJuRm9jdXMiLCJ0ZWFyZG93blNjb3BlZEZvY3VzIiwiaGFuZGxlS2V5RG93biIsImtleUNvZGUiLCJyZXF1ZXN0Q2xvc2UiLCJoYW5kbGVPdmVybGF5TW91c2VEb3duIiwiaGFuZGxlT3ZlcmxheU1vdXNlVXAiLCJvd25lckhhbmRsZXNDbG9zZSIsImhhbmRsZUNvbnRlbnRNb3VzZURvd24iLCJoYW5kbGVDb250ZW50TW91c2VVcCIsInNob3VsZEJlQ2xvc2VkIiwiYWN0aXZlRWxlbWVudCIsImNvbnRhaW5zIiwiYnVpbGRDbGFzc05hbWUiLCJ3aGljaCIsImFkZGl0aW9uYWwiLCJjb250ZW50U3R5bGVzIiwib3ZlcmxheVN0eWxlcyIsInJlZiIsIm92ZXJsYXlDbGFzc05hbWUiLCJvbk1vdXNlRG93biIsIm9uTW91c2VVcCIsIm9uS2V5RG93biIsImFyaWEtbGFiZWwiLCJfZWxlbWVudCIsImhpZGUiLCJ2YWxpZGF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzaG91bGRIaWRlIiwicmVzZXRGb3JUZXN0aW5nIiwiaGFuZGxlQmx1ciIsIm5lZWRUb0ZvY3VzIiwiaGFuZGxlRm9jdXMiLCJtb2RhbEVsZW1lbnQiLCJmaW5kVGFiYmFibGUiLCJmb2N1c0xhdGVyRWxlbWVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImZpbmFsVGFiYmFibGUiLCJzaGlmdEtleSIsImxlYXZpbmdGaW5hbFRhYmJhYmxlIiwiZW5xdWlyZSIsIlJlc3BvbnNpdmVNaXhpbiIsIm1lZGlhIiwiX3Jlc3BvbnNpdmVNZWRpYUhhbmRsZXJzIiwiTmV4dEFycm93IiwiUHJldkFycm93IiwiX2NsYXNzbmFtZXMiLCJfY2xhc3NuYW1lczIiLCJfaGVscGVycyIsIl9oZWxwZXJzMiIsImNsaWNrSGFuZGxlciIsInByZXZDbGFzc2VzIiwic2xpY2stYXJyb3ciLCJzbGljay1wcmV2IiwicHJldkhhbmRsZXIiLCJtZXNzYWdlIiwicHJldkFycm93UHJvcHMiLCJkYXRhLXJvbGUiLCJjbG9uZUVsZW1lbnQiLCJuZXh0Q2xhc3NlcyIsInNsaWNrLW5leHQiLCJuZXh0SGFuZGxlciIsIm5leHRBcnJvd1Byb3BzIiwiRG90cyIsImdldERvdENvdW50IiwiY2VpbCIsImRvdENvdW50IiwibGVmdEJvdW5kIiwicmlnaHRCb3VuZCIsInNsaWNrLWFjdGl2ZSIsImRvdE9wdGlvbnMiLCJkcmFnZ2luZyIsImN1cnJlbnREaXJlY3Rpb24iLCJkaXJlY3Rpb24iLCJpbml0aWFsaXplZCIsImVkZ2VEcmFnZ2VkIiwic3dpcGVkIiwiSW5uZXJTbGlkZXIiLCJfZXZlbnRIYW5kbGVycyIsIl9ldmVudEhhbmRsZXJzMiIsIl9pbml0aWFsU3RhdGUiLCJfaW5pdGlhbFN0YXRlMiIsIl9kZWZhdWx0UHJvcHMiLCJfZGVmYXVsdFByb3BzMiIsIl90cmFjayIsIl9kb3RzIiwiX2Fycm93cyIsIm1peGlucyIsImxpc3RSZWZIYW5kbGVyIiwidHJhY2tSZWZIYW5kbGVyIiwiY29tcG9uZW50V2lsbE1vdW50Iiwib25XaW5kb3dSZXNpemVkIiwiY2xlYXJJbnRlcnZhbCIsIm5leHRQcm9wcyIsInNsaWNrR29UbyIsImNoYW5nZVNsaWRlIiwic2xpY2tQcmV2Iiwic2xpY2tOZXh0Iiwic2xpY2stdmVydGljYWwiLCJ0cmFja1Byb3BzIiwic2VsZWN0SGFuZGxlciIsImRvdFByb3BzIiwiYXJyb3dQcm9wcyIsInZlcnRpY2FsSGVpZ2h0U3R5bGUiLCJjZW50ZXJQYWRkaW5nU3R5bGUiLCJsaXN0U3R5bGUiLCJvbk1vdXNlRW50ZXIiLCJvbklubmVyU2xpZGVyRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJvbklubmVyU2xpZGVyTGVhdmUiLCJvbk1vdXNlT3ZlciIsIm9uSW5uZXJTbGlkZXJPdmVyIiwic3dpcGVTdGFydCIsIm9uTW91c2VNb3ZlIiwic3dpcGVNb3ZlIiwic3dpcGVFbmQiLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoTW92ZSIsIm9uVG91Y2hFbmQiLCJvblRvdWNoQ2FuY2VsIiwia2V5SGFuZGxlciIsIlRyYWNrIiwiRXZlbnRIYW5kbGVycyIsImluZGV4T2Zmc2V0IiwicHJldmlvdXNJbnQiLCJ1bmV2ZW5PZmZzZXQiLCJfc3RhdGUiLCJ0YWdOYW1lIiwicG9zWCIsInBvc1kiLCJ0b3VjaGVzIiwicGFnZVgiLCJjbGllbnRYIiwicGFnZVkiLCJjbGllbnRZIiwiY3VyTGVmdCIsInBvc2l0aW9uT2Zmc2V0Iiwic3dpcGVMZW5ndGgiLCJzcXJ0IiwidG91Y2hTd2lwZUxlbmd0aCIsImdldE5hdmlnYWJsZUluZGV4ZXMiLCJicmVha1BvaW50IiwiY291bnRlciIsImluZGV4ZXMiLCJjaGVja05hdmlnYWJsZSIsIm5hdmlnYWJsZXMiLCJwcmV2TmF2aWdhYmxlIiwiZ2V0U2xpZGVDb3VudCIsImNlbnRlck9mZnNldCIsInN3aXBlZFNsaWRlIiwic2xpZGVzIiwiZXZlcnkiLCJvZmZzZXRUb3AiLCJzbGlkZXNUcmF2ZXJzZWQiLCJkYXRhc2V0IiwibWluU3dpcGUiLCJuZXdTbGlkZSIsIl9pbm5lclNsaWRlciIsIl9qc29uMm1xIiwiX2pzb24ybXEyIiwiX3JlYWN0UmVzcG9uc2l2ZU1peGluIiwiX3JlYWN0UmVzcG9uc2l2ZU1peGluMiIsIlNsaWRlciIsImlubmVyU2xpZGVyIiwiaW5uZXJTbGlkZXJSZWZIYW5kbGVyIiwiYnJlYWtwb2ludHMiLCJicmVha3B0Iiwic29ydCIsImJRdWVyeSIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJyZXNwIiwiY2hpbGQiLCJnZXRTbGlkZUNsYXNzZXMiLCJzbGlja0FjdGl2ZSIsInNsaWNrQ2VudGVyIiwic2xpY2tDbG9uZWQiLCJzbGljay1zbGlkZSIsInNsaWNrLWNlbnRlciIsInNsaWNrLWNsb25lZCIsImdldFNsaWRlU3R5bGUiLCJnZXRLZXkiLCJmYWxsYmFja0tleSIsInJlbmRlclNsaWRlcyIsInByZUNsb25lU2xpZGVzIiwicG9zdENsb25lU2xpZGVzIiwiY2hpbGRPbkNsaWNrT3B0aW9ucyIsImNzc0NsYXNzZXMiLCJjaGlsZFN0eWxlIiwic2xpY2tDbGFzc2VzIiwiZGF0YS1pbmRleCIsImluZmluaXRlQ291bnQiLCJyZXZlcnNlIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsIl9yZWYiLCJuZXh0IiwidGh1bmsiLCJ3aXRoRXh0cmFBcmd1bWVudCIsIl90b0NvbnN1bWFibGVBcnJheSIsImFycjIiLCJ3cmFwIiwic3VwZXJGdW5jIiwic3VwZXJXcmFwcGVyIiwib3JpZ2luYWxTdXBlciIsIndyYXBwZWRGdW5jdGlvbiIsIm5hbWVzIiwiZGVzdGluYXRpb24iLCJwYXJlbnRQcm90byIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInBhcmVudERlc2NyaXB0b3IiLCJpbnN0YW5jZVByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiaW5jbHVkZXMkMSIsImFzc2lnbiQxIiwic3RhdGljUHJvcGVydHlOYW1lcyIsIndyYXBDb25zb2xlIiwibG9nQ29tbWFuZCIsImxvZ01ldGhvZCIsIkZ1bmN0aW9uIiwidW5zaGlmdCIsImF1dGhUb1VybCIsInVybCIsImF1dGhvcml6YXRpb24iLCJoZWFkZXJzIiwiaGFzaGVkS2V5IiwicGxhaW5LZXkiLCJhdG9iIiwibmV3VXJsIiwiaWU5QWpheCIsIm1ldGhvZCIsImhhbmRsZUVycm9yIiwieGRyIiwiWERvbWFpblJlcXVlc3QiLCJvbmxvYWQiLCJqc29uIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJvcmlnaW5hbFJlc3BvbnNlIiwiaXNKU09OIiwidGV4dCIsImlzVGV4dCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJpc05vZGVMaWtlRW52aXJvbm1lbnQiLCJ3aW5kb3dBYnNlbnQiLCJyZXF1aXJlUHJlc2VudCIsImNoZWNrU3RhdHVzIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwicGFyc2VSZXNwb25zZSIsInJlc3BvbnNlQ2xvbmUiLCJjbG9uZSIsImFqYXgiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm1vZGUiLCJmZXRjaCIsInV1aWQiLCJ1dWlkU2VlZCIsInNldEd1aWRGb3IiLCJHVUlEX0tFWSIsIl90eXBlb2YiLCJudW1iZXJDYWNoZSIsInN0cmluZ0NhY2hlIiwiR1VJRF9QUkVGSVgiLCJHVUlEX0RFU0MiLCJnbG9iYWxOYW1lc3BhY2UiLCJnZXQiLCJvYmplY3RzRXF1YWwiLCJvbmUiLCJ0d28iLCJmZXRjaEZhY3RvcnkiLCJmZXRjaFR5cGUiLCJmZXRjaEFsbCIsImZldGNoUXVlcnkiLCJpdGVyYXRvciIsInByb3BlcnR5T2JqZWN0cyIsIm5leHRLZXkiLCJzZWFyY2hFbGVtZW50IiwiT2JqZWN0aWZpZWRBcnJheSIsInN0YXJ0SW5kZXgiLCJjdXJyZW50RWxlbWVudCIsIkNvcmVPYmplY3QiLCJzdGF0aWMiLCJleHRlbmQiLCJzdWJDbGFzc1Byb3BzIiwiTG9nZ2VyIiwibG9nZ2VyIiwiQ29uZmlnIiwiZGVwcmVjYXRlZFByb3BlcnRpZXMiLCJ0cmFuc2Zvcm1OYW1lIiwicmVxdWlyZWRQcm9wZXJ0aWVzIiwib3B0aW9uYWxQcm9wZXJ0aWVzIiwibXlTaG9waWZ5RG9tYWluIiwidHJhbnNmb3JtTXlTaG9waWZ5RG9tYWluIiwic3ViZG9tYWluIiwiYWpheEhlYWRlcnMiLCJ2ZXJzaW9uIiwiQmFzZU1vZGVsIiwibWV0YUF0dHJzIiwic2VyaWFsaXplciIsImFkYXB0ZXIiLCJzaG9wQ2xpZW50IiwiUHJvZHVjdE9wdGlvbk1vZGVsIiwiX3NlbGVjdGVkIiwidmFyaWFudHMiLCJkaW1lbnNpb24iLCJJbWFnZU1vZGVsIiwiZXh0ZW5zaW9uSW5kZXgiLCJwYXRoQW5kQmFzZW5hbWUiLCJleHRlbnNpb24iLCJQcm9kdWN0VmFyaWFudE1vZGVsIiwiY29uZmlnIiwiYmFzZVVybCIsInZhcmlhbnRQYXRoIiwicHJvZHVjdFRpdGxlIiwiY29tcGFyZUF0UHJpY2UiLCJjb21wYXJlX2F0X3ByaWNlIiwiZm9ybWF0dGVkUHJpY2UiLCJmb3JtYXR0ZWRfcHJpY2UiLCJncmFtcyIsIm9wdGlvblZhbHVlcyIsIm9wdGlvbl92YWx1ZXMiLCJhdmFpbGFibGUiLCJwcmltYXJ5SW1hZ2UiLCJ2YXJpYW50SW1hZ2UiLCJ2YXJpYW50X2lkcyIsInVuaXEiLCJ1bmlxdWVBcnJheSIsIk5PX0lNQUdFX1VSSSIsIlByb2R1Y3RNb2RlbCIsImJvZHlfaHRtbCIsIm1lbW9pemVkIiwiX21lbW9pemVkIiwiYmFzZU9wdGlvbnMiLCJ2YXJpYW50cyQkMSIsImR1cGVkVmFsdWVzIiwidmFsdWVMaXN0Iiwib3B0aW9uVmFsdWVGb3JPcHRpb24iLCJvcHRpb25WYWx1ZSIsInNlbGVjdGlvbnMiLCJ2YXJpYW50VGl0bGUiLCJMaXN0aW5nc1NlcmlhbGl6ZXIiLCJyb290S2V5Rm9yVHlwZSIsIm1vZGVscyIsIm1vZGVsRm9yVHlwZSIsImRlc2VyaWFsaXplU2luZ2xlIiwic2luZ2xlUGF5bG9hZCIsIm1vZGVsQXR0cnMiLCJtb2RlbCIsIm1vZGVsRnJvbUF0dHJzIiwiZGVzZXJpYWxpemVNdWx0aXBsZSIsIl90aGlzNCIsImNvbGxlY3Rpb25QYXlsb2FkIiwiTW9kZWwiLCJMaXN0aW5nc0FkYXB0ZXIiLCJwYXRoRm9yVHlwZSIsImJ1aWxkVXJsIiwic2luZ2xlT3JNdWx0aXBsZSIsImlkT3JRdWVyeSIsImJ1aWxkTXVsdGlwbGVVcmwiLCJidWlsZFNpbmdsZVVybCIsInBhcmFtTmFtZXMiLCJxdWVyeVN0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudCIsImZldGNoTXVsdGlwbGUiLCJmZXRjaFNpbmdsZSIsImJhc2U2NEFwaUtleSIsImJ0b2EiLCJfY29uZmlnIiwiQXV0aG9yaXphdGlvbiIsIkNvbnRlbnQtVHlwZSIsIlgtU0RLLVZhcmlhbnQiLCJYLVNESy1WZXJzaW9uIiwiQ2FydExpbmVJdGVtTW9kZWwiLCJwYXJzZWRWYWx1ZSIsInByb3BlcnRpZXMiLCJsaW5lX3ByaWNlIiwibm93IiwiZ2xvYmFsVmFycyIsIkNhcnRNb2RlbCIsImFkZFZhcmlhbnRzIiwibmV3TGluZUl0ZW1zIiwiaW1hZ2VfdmFyaWFudHMiLCJleGlzdGluZ0xpbmVJdGVtcyIsImxpbmVfaXRlbXMiLCJkZWR1cGVkTGluZUl0ZW1zIiwiaXRlbUFjYyIsIm1hdGNoaW5nSXRlbSIsImV4aXN0aW5nSXRlbSIsInVwZGF0ZU1vZGVsIiwicmVtb3ZlTGluZUl0ZW0iLCJvbGRMZW5ndGgiLCJuZXdMZW5ndGgiLCJjbGVhckxpbmVJdGVtcyIsIl90aGlzNSIsInVwZGF0ZUNhcnQiLCJ0b3RhbCIsInJ1bm5pbmdUb3RhbCIsImxpbmtlclBhcmFtIiwidHJhY2tlciIsIkNhcnRTZXJpYWxpemVyIiwic2VyaWFsaXplIiwicm9vdCIsImF0dHJpYnV0ZXMiLCJSZWZlcmVuY2VNb2RlbCIsInJlZmVyZW5jZUlkIiwiUmVmZXJlbmNlU2VyaWFsaXplciIsIlN0b3JlIiwibG9jYWxTdG9yYWdlQXZhaWxhYmxlIiwic3RvcmFnZUF2YWlsYWJsZSIsImNhY2hlIiwic3RyaW5nVmFsdWUiLCJzdG9yYWdlIiwicmVtb3ZlSXRlbSIsIkxvY2FsU3RvcmFnZUFkYXB0ZXIiLCJpZEtleUZvclR5cGUiLCJfdGhpczYiLCJzdG9yYWdlS2V5IiwiX3RoaXM3IiwiaWRlbnRpZnkiLCJfdGhpczgiLCJTaG9wQ2xpZW50Iiwic2VyaWFsaXplcnMiLCJjYXJ0cyIsInJlZmVyZW5jZXMiLCJhZGFwdGVycyIsIl90aGlzOSIsImRlc2VyaWFsaXplIiwibXVsdGlwbGUiLCJfdGhpczEwIiwic2luZ2xlIiwiX3RoaXMxMSIsIl90aGlzMTIiLCJ1cGRhdGVkTW9kZWwiLCJfdGhpczEzIiwic2VyaWFsaXplZE1vZGVsIiwiZXhpc3RpbmdTZXJpYWxpemVyIiwic2VyaWFsaXplZFBheWxvYWQiLCJ1c2VyQXR0cnMiLCJiYXNlQXR0cnMiLCJmZXRjaFF1ZXJ5UHJvZHVjdHMiLCJmZXRjaFF1ZXJ5Q29sbGVjdGlvbnMiLCJmZXRjaFJlY2VudENhcnQiLCJfdGhpczE0IiwicmVmZXJlbmNlIiwiY2FydElkIiwicmVmQXR0cnMiLCJzaGFkb3dlZFNlcmlhbGl6ZXJzIiwic2hhZG93ZWRBZGFwdGVycyIsIl9mZXRjaCIsIlJlc3BvbnNlIiwiU2hvcGlmeSIsImNvbmZpZ0F0dHJzIiwiX3JlYWN0UmVkdXgiLCJfcm91dGVyIiwiX3JvdXRlcjIiLCJjb2xsZWN0aW9uQWN0aW9ucyIsInN1YnNjcmliZSIsInJlc3RvcmVDYXJ0IiwiUHJvdmlkZXIiLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6IkFBQUFBLGNBQWMsRUFBRSxJQUNULENBQ0EsQ0FDQSxDQUNBLENBQ0EsQ0FDQSxDQUNBLENBQ0EsQ0FDQSxDQUNBLENBQ0MsQ0FDQSxDQUNBLENBQ0EsQ0FDQSxDQUVGLFNBQVVDLEVBQVFDLEVBQVNDLEdBRWpDLFlBWUEsU0FB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c0U1M1h4Q3V5QyxFQUFBMTlDLEVBQUEsR0FDQWdCLEVBQUFoQixFQUFBLEl0RWk0WElpQixFQUFlaEIsRUFBdUJlLEVzRWg0WDFDaEIsR0FBQSxJQU1BLElBQUEyOUMsR0FBQTM5QyxFQUFBLEt0RWc0WEk0OUMsRUFBVzM5QyxFQUF1QjA5QyxHc0VuNFhsQ3BxQyxHQURjdlQsRUFBUSxJQUNMQSxFQUFRLEtBQ3pCNjlDLEVBQW9CNzlDLEVBQVEsSUFDNUIySixFQUFRM0osRUFBUSxJQUFrQnlFLFdBS3RDa0YsR0FBTW0wQyxVQUFVLFdBQ2QsR0FBSXh3QyxHQUFRM0QsRUFBTXRJLFVBQ2xCbUIsU0FBUUMsSUFBSSxZQUFhNkssS0FJM0IzRCxFQUFNdkksU0FBU21TLEVBQWV0TCxvQkFDOUIwQixFQUFNdkksU0FBU3k4QyxFQUFrQi8yQyx1QkFHOUJ4QixhQUFhTSxRQUFRLGNBQ3RCM0UsRUFBQWIsUUFBVzI5QyxjQUFjNzdDLEtBQUssU0FBQ3NELEdBQzdCbUUsRUFBTXZJLFVBQVdpQixLQUFNLHlCQUEwQm1ELGdCQUduRHZFLEVBQUFiLFFBQVdnRixhQUFhbEQsS0FBSyxTQUFDc0QsR0FDNUJtRSxFQUFNdkksVUFBV2lCLEtBQU0seUJBQTBCbUQsZ0JBT3JENEYsRUFBQWhMLFFBQVMyM0IsT0FDUDV0QixFQUFBL0osUUFBQWdLLGNBQUFzekMsRUFBQU0sVUFBVXIwQyxNQUFPQSxHQUFqQmkwQyxFQUFBeDlDLFNBR0FrYixTQUFTMmlDLGVBQWUsV3RFMDRYdkIiLCJmaWxlIjoiYnVuZGxlLm1pbi42ZmQ2YWMyNGU1NDlmMjdiMTgxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIndlYnBhY2tKc29ucChbMSwyXSxbXG4vKiAwICovLFxuLyogMSAqLyxcbi8qIDIgKi8sXG4vKiAzICovLFxuLyogNCAqLyxcbi8qIDUgKi8sXG4vKiA2ICovLFxuLyogNyAqLyxcbi8qIDggKi8sXG4vKiA5ICovLFxuLyogMTAgKi8sXG4vKiAxMSAqLyxcbi8qIDEyICovLFxuLyogMTMgKi8sXG4vKiAxNCAqLyxcbi8qIDE1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNsb3NlQ2FydCA9IGV4cG9ydHMub3BlbkNhcnQgPSBleHBvcnRzLnVwZGF0ZUNhcnRJdGVtID0gZXhwb3J0cy51cGRhdGVDYXJ0SXRlbXNDb3VudCA9IGV4cG9ydHMudXBkYXRlQ2FydFN1YnRvdGFsID0gZXhwb3J0cy5hZGRUb0NhcnQgPSBleHBvcnRzLnN0YXJ0QWRkb3JVcGRhdGVDYXJ0SXRlbSA9IHVuZGVmaW5lZDtcblxudmFyIF9zaG9waWZ5QVBJID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cbnZhciBfc2hvcGlmeUFQSTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaG9waWZ5QVBJKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHN0YXJ0QWRkb3JVcGRhdGVDYXJ0SXRlbSA9IGV4cG9ydHMuc3RhcnRBZGRvclVwZGF0ZUNhcnRJdGVtID0gZnVuY3Rpb24gc3RhcnRBZGRvclVwZGF0ZUNhcnRJdGVtKHByb2R1Y3RWYXJpYW50LCBxdWFudGl0eSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBnZXRTdGF0ZSkge1xuICAgIHZhciBjYXJ0ID0gZ2V0U3RhdGUoKS5jYXJ0O1xuICAgIHZhciB2YXJpYW50SWQgPSB2b2lkIDA7XG5cbiAgICAvLyBhc3NpZ24gdmFyaWFudCBpZCBiYXNlZCBvbiBpcyBwcm9kdWN0IG9yIGNhcnQgbGluZSBpdGVtXG4gICAgaWYgKHByb2R1Y3RWYXJpYW50LnZhcmlhbnRfaWQpIHtcbiAgICAgIHZhcmlhbnRJZCA9IHByb2R1Y3RWYXJpYW50LnZhcmlhbnRfaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhcmlhbnRJZCA9IHByb2R1Y3RWYXJpYW50LmlkO1xuICAgIH1cblxuICAgIHZhciBjYXJ0TGluZUl0ZW0gPSBmaW5kQ2FydEl0ZW1CeVZhcmlhbnRJZCh2YXJpYW50SWQpO1xuXG4gICAgLy8gZnVuY3Rpb24gdG8gY2hlY2sgaWYgcHJvZHVjdCB2YXJpYW50IGFscmVhZHkgZXhpc3RzIGluIGNhcnRcbiAgICBmdW5jdGlvbiBmaW5kQ2FydEl0ZW1CeVZhcmlhbnRJZCh2YXJpYW50SWQpIHtcbiAgICAgIHJldHVybiBjYXJ0LmxpbmVJdGVtcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2l0ZW0udmFyaWFudF9pZDogJywgaXRlbS52YXJpYW50X2lkKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3ZhcmlhbnRJZDogJywgdmFyaWFudElkKTtcbiAgICAgICAgcmV0dXJuIGl0ZW0udmFyaWFudF9pZCA9PT0gdmFyaWFudElkO1xuICAgICAgfSlbMF07XG4gICAgfVxuXG4gICAgaWYgKGNhcnRMaW5lSXRlbSkge1xuICAgICAgZGlzcGF0Y2godXBkYXRlQ2FydEl0ZW0oY2FydExpbmVJdGVtLCBwYXJzZUludChxdWFudGl0eSkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlzcGF0Y2goYWRkVG9DYXJ0KHByb2R1Y3RWYXJpYW50LCBxdWFudGl0eSkpO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSB0aGUgY2FydCBzdWJ0b3RhbFxuICAgIGRpc3BhdGNoKHVwZGF0ZUNhcnRTdWJ0b3RhbCgpKTtcblxuICAgIC8vICB1cGRhdGUgdGhlIGNhcnQgaXRlbXMgY291bnRcbiAgICBkaXNwYXRjaCh1cGRhdGVDYXJ0SXRlbXNDb3VudChxdWFudGl0eSkpO1xuICB9O1xufTtcblxuLy8gYWRkIHByb2R1Y3QgdG8gY2FydFxudmFyIGFkZFRvQ2FydCA9IGV4cG9ydHMuYWRkVG9DYXJ0ID0gZnVuY3Rpb24gYWRkVG9DYXJ0KHByb2R1Y3RWYXJpYW50LCBxdWFudGl0eSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBnZXRTdGF0ZSkge1xuICAgIF9zaG9waWZ5QVBJMi5kZWZhdWx0LmNhcnQuY3JlYXRlTGluZUl0ZW1zRnJvbVZhcmlhbnRzKHsgdmFyaWFudDogcHJvZHVjdFZhcmlhbnQsIHF1YW50aXR5OiBxdWFudGl0eSB9KS50aGVuKGZ1bmN0aW9uICh1cGRhdGVkQ2FydCkge1xuICAgICAgdmFyIHVwZGF0ZWRDYXJ0SXRlbXMgPSB1cGRhdGVkQ2FydC5saW5lSXRlbXM7XG4gICAgICBkaXNwYXRjaCh7IHR5cGU6ICdVUERBVEVfQ0FSVF9JVEVNUycsIHVwZGF0ZWRDYXJ0SXRlbXM6IHVwZGF0ZWRDYXJ0SXRlbXMgfSk7XG4gICAgICBkaXNwYXRjaChvcGVuQ2FydCgpKTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3JzKSB7XG4gICAgICBjb25zb2xlLmxvZygnRmFpbGVkIHRvIGFkZFRvQ2FydCcsIGVycm9ycyk7XG4gICAgfSk7XG4gIH07XG59O1xuXG4vLyB1cGRhdGUgY2FydCBzdWJ0b3RhbFxudmFyIHVwZGF0ZUNhcnRTdWJ0b3RhbCA9IGV4cG9ydHMudXBkYXRlQ2FydFN1YnRvdGFsID0gZnVuY3Rpb24gdXBkYXRlQ2FydFN1YnRvdGFsKCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBnZXRTdGF0ZSkge1xuICAgIHZhciBuZXdTdWJ0b3RhbCA9IF9zaG9waWZ5QVBJMi5kZWZhdWx0LmNhcnQuc3VidG90YWw7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnVVBEQVRFX0NBUlRfU1VCVE9UQUwnLCBuZXdTdWJ0b3RhbDogbmV3U3VidG90YWwgfSk7XG4gIH07XG59O1xuXG4vLyB1cGRhdGUgY2FydCBpdGVtcyBjb3VudFxudmFyIHVwZGF0ZUNhcnRJdGVtc0NvdW50ID0gZXhwb3J0cy51cGRhdGVDYXJ0SXRlbXNDb3VudCA9IGZ1bmN0aW9uIHVwZGF0ZUNhcnRJdGVtc0NvdW50KHF1YW50aXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIGdldFN0YXRlKSB7XG4gICAgdmFyIGNhcnQgPSBnZXRTdGF0ZSgpLmNhcnQ7XG4gICAgdmFyIHVwZGF0ZWRDYXJ0SXRlbXNDb3VudCA9IHBhcnNlSW50KGNhcnQubGluZUl0ZW1zQ291bnQpICsgcGFyc2VJbnQocXVhbnRpdHkpO1xuICAgIGNvbnNvbGUubG9nKCduZXcgcXVhbnRpdHk6ICcsIHF1YW50aXR5KTtcbiAgICBjb25zb2xlLmxvZygnb2xkIHF1YW50aXR5OiAnLCBjYXJ0LmxpbmVJdGVtc0NvdW50KTtcbiAgICBjb25zb2xlLmxvZygndXBkYXRlZENhcnRJdGVtc0NvdW50OiAnLCB1cGRhdGVkQ2FydEl0ZW1zQ291bnQpO1xuICAgIGRpc3BhdGNoKHsgdHlwZTogJ1VQREFURV9DQVJUX0lURU1TX0NPVU5UJywgdXBkYXRlZENhcnRJdGVtc0NvdW50OiB1cGRhdGVkQ2FydEl0ZW1zQ291bnQgfSk7XG5cbiAgICBpZiAocGFyc2VJbnQodXBkYXRlZENhcnRJdGVtc0NvdW50KSA8IDEpIHtcbiAgICAgIGRpc3BhdGNoKGNsb3NlQ2FydCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlzcGF0Y2gob3BlbkNhcnQoKSk7XG4gICAgfVxuICB9O1xufTtcblxuLy8gdXBkYXRlIGEgY2FydCBpdGVtXG52YXIgdXBkYXRlQ2FydEl0ZW0gPSBleHBvcnRzLnVwZGF0ZUNhcnRJdGVtID0gZnVuY3Rpb24gdXBkYXRlQ2FydEl0ZW0oc2VsZWN0ZWRDYXJ0SXRlbSwgcXVhbnRpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgZ2V0U3RhdGUpIHtcbiAgICB2YXIgY2FydCA9IGdldFN0YXRlKCkuY2FydDtcbiAgICB2YXIgdXBkYXRlZFF1YW50aXR5ID0gc2VsZWN0ZWRDYXJ0SXRlbS5xdWFudGl0eSArIHF1YW50aXR5O1xuICAgIHZhciB1cGRhdGVkQ2FydEl0ZW1zID0gW107XG5cbiAgICAvLyBpZiB0aGUgbmV3IHF1YW50aXR5IGlzIG1vcmUgdGhhbiAwLCBrZWVwIGl0IGluIHRoZSBuZXcgYXJyYXlcbiAgICBjYXJ0LmxpbmVJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChjYXJ0SXRlbSkge1xuICAgICAgaWYgKHNlbGVjdGVkQ2FydEl0ZW0uaWQgPT09IGNhcnRJdGVtLmlkKSB7XG4gICAgICAgIGlmICh1cGRhdGVkUXVhbnRpdHkgPiAwKSB7XG4gICAgICAgICAgdmFyIHVwZGF0ZWRDYXJ0SXRlbSA9IFtdO1xuXG4gICAgICAgICAgLy8gY2xvbmUgdGhlIGxpbmUgaXRlbVxuICAgICAgICAgIHVwZGF0ZWRDYXJ0SXRlbSA9IGNhcnRJdGVtO1xuXG4gICAgICAgICAgLy8gdXBkYXRlIHRoZSBxdWFudGl0eSBvZiB0aGUgbmV3IGNsb25lXG4gICAgICAgICAgdXBkYXRlZENhcnRJdGVtLnF1YW50aXR5ID0gdXBkYXRlZFF1YW50aXR5O1xuXG4gICAgICAgICAgLy8gcmV0dXJuIHRoZSB1cGRhdGVkIGNhcnQgaXRlbVxuICAgICAgICAgIHVwZGF0ZWRDYXJ0SXRlbXMucHVzaCh1cGRhdGVkQ2FydEl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZXR1cm4gdGhlIHVubW9kaWZpZWQgaXRlbVxuICAgICAgICB1cGRhdGVkQ2FydEl0ZW1zLnB1c2goY2FydEl0ZW0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIHRoZSBzaG9waWZ5IGNhcnQgYXBpIHNpbmdsZXRvblxuICAgIF9zaG9waWZ5QVBJMi5kZWZhdWx0LmNhcnQudXBkYXRlTGluZUl0ZW0oc2VsZWN0ZWRDYXJ0SXRlbS5pZCwgdXBkYXRlZFF1YW50aXR5KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHVwZGF0ZSB0aGUgbG9jYWwgY2FydCBpdGVtcyAoaW4gcmVkdXggc3RvcmUpXG4gICAgICBkaXNwYXRjaCh7IHR5cGU6ICdVUERBVEVfQ0FSVF9JVEVNUycsIHVwZGF0ZWRDYXJ0SXRlbXM6IHVwZGF0ZWRDYXJ0SXRlbXMgfSk7XG4gICAgfSk7XG4gIH07XG59O1xuXG4vLyBvcGVuIGNhcnRcbnZhciBvcGVuQ2FydCA9IGV4cG9ydHMub3BlbkNhcnQgPSBmdW5jdGlvbiBvcGVuQ2FydCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnT1BFTl9DQVJUJ1xuICB9O1xufTtcblxuLy8gY2xvc2UgY2FydFxudmFyIGNsb3NlQ2FydCA9IGV4cG9ydHMuY2xvc2VDYXJ0ID0gZnVuY3Rpb24gY2xvc2VDYXJ0KCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdDTE9TRV9DQVJUJ1xuICB9O1xufTtcblxuLyoqKi8gfSksXG4vKiAxNiAqLyxcbi8qIDE3ICovLFxuLyogMTggKi8sXG4vKiAxOSAqLyxcbi8qIDIwICovLFxuLyogMjEgKi8sXG4vKiAyMiAqLyxcbi8qIDIzICovLFxuLyogMjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFJlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBTaG9waWZ5QnV5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMzUpO1xudmFyIHN0b3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OSkuY29uZmlndXJlKCk7XG5cbnZhciBzaG9waWZ5QVBJID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBzaG9waWZ5QVBJKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBzaG9waWZ5QVBJKTtcblxuICAgIHRoaXMuY2xpZW50ID0gU2hvcGlmeUJ1eS5idWlsZENsaWVudCh7XG4gICAgICBhcGlLZXk6ICdlMGFiOGNmOWI1YTMwY2VlMjYxNmJmMTUxYTU2Yzc2MycsXG4gICAgICBkb21haW46ICdybWMtcHJldmlldy5teXNob3BpZnkuY29tJyxcbiAgICAgIGFwcElkOiAnNidcbiAgICB9KTtcbiAgICB0aGlzLmNhcnQgPSB7fTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhzaG9waWZ5QVBJLCBbe1xuICAgIGtleTogJ2NyZWF0ZUNhcnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVDYXJ0KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgX3RoaXMuY2xpZW50LmNyZWF0ZUNhcnQoKS50aGVuKGZ1bmN0aW9uIChuZXdDYXJ0KSB7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xhc3RDYXJ0SWQnLCBuZXdDYXJ0LmlkKTtcbiAgICAgICAgICBjb25zb2xlLmxvZygnY3JlYXRlZCBuZXcgY2FydCcsIG5ld0NhcnQpO1xuICAgICAgICAgIC8vIHNldCBzaW5nbGV0b24gY2FydCBvYmplY3QgdG8gcmVmZXJlbmNlIHNob3BpZnkgY2FydFxuICAgICAgICAgIF90aGlzLmNhcnQgPSBuZXdDYXJ0O1xuXG4gICAgICAgICAgLy8gc2V0IGxvY2FsQ2FydCAocmVkdXggY29ubmVjdGVkKSB0byBrZWVwIHRyYWNrIG9mIHN0YXRlIGNoYW5nZXNcbiAgICAgICAgICB2YXIgbG9jYWxDYXJ0ID0ge1xuICAgICAgICAgICAgaXNPcGVuOiBmYWxzZSxcbiAgICAgICAgICAgIGxpbmVJdGVtc0NvdW50OiAwLFxuICAgICAgICAgICAgbGluZUl0ZW1zOiBbXSxcbiAgICAgICAgICAgIHN1YnRvdGFsOiAwXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXNvbHZlKGxvY2FsQ2FydCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVzdG9yZUNhcnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN0b3JlQ2FydCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBfdGhpczIuY2xpZW50LmZldGNoQ2FydChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFzdENhcnRJZCcpKS50aGVuKGZ1bmN0aW9uIChyZW1vdGVDYXJ0KSB7XG4gICAgICAgICAgLy8gc2V0IHNpbmdsZXRvbiBjYXJ0IG9iamVjdCB0byByZWZlcmVuY2Ugc2hvcGlmeSBjYXJ0XG4gICAgICAgICAgX3RoaXMyLmNhcnQgPSByZW1vdGVDYXJ0O1xuXG4gICAgICAgICAgLy8gc2V0IGxvY2FsQ2FydCAocmVkdXggY29ubmVjdGVkKSB0byBrZWVwIHRyYWNrIG9mIHN0YXRlIGNoYW5nZXNcbiAgICAgICAgICB2YXIgbG9jYWxDYXJ0ID0ge1xuICAgICAgICAgICAgaXNPcGVuOiBmYWxzZSxcbiAgICAgICAgICAgIGxpbmVJdGVtc0NvdW50OiByZW1vdGVDYXJ0LmxpbmVJdGVtQ291bnQsXG4gICAgICAgICAgICBsaW5lSXRlbXM6IHJlbW90ZUNhcnQubGluZUl0ZW1zLFxuICAgICAgICAgICAgc3VidG90YWw6IHJlbW90ZUNhcnQuc3VidG90YWxcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJlc29sdmUobG9jYWxDYXJ0KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gc2hvcGlmeUFQSTtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbmV3IHNob3BpZnlBUEkoKTtcblxuLyoqKi8gfSksXG4vKiAyNSAqLyxcbi8qIDI2ICovLFxuLyogMjcgKi8sXG4vKiAyOCAqLyxcbi8qIDI5ICovLFxuLyogMzAgKi8sXG4vKiAzMSAqLyxcbi8qIDMyICovLFxuLyogMzMgKi8sXG4vKiAzNCAqLyxcbi8qIDM1ICovLFxuLyogMzYgKi8sXG4vKiAzNyAqLyxcbi8qIDM4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE2IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZykpO1xuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHRydWUpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0IShfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gW10sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fS5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcblxuXG4vKioqLyB9KSxcbi8qIDM5ICovLFxuLyogNDAgKi8sXG4vKiA0MSAqLyxcbi8qIDQyICovLFxuLyogNDMgKi8sXG4vKiA0NCAqLyxcbi8qIDQ1ICovLFxuLyogNDYgKi8sXG4vKiA0NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hZGRDb2xsZWN0aW9ucyA9IGV4cG9ydHMuc3RhcnRBZGRDb2xsZWN0aW9ucyA9IGV4cG9ydHMuc2V0QWN0aXZlQ29sbGVjdGlvbiA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9zaG9waWZ5QVBJID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cbnZhciBfc2hvcGlmeUFQSTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaG9waWZ5QVBJKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHNldEFjdGl2ZUNvbGxlY3Rpb24gPSBleHBvcnRzLnNldEFjdGl2ZUNvbGxlY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3RpdmVDb2xsZWN0aW9uKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gX3Nob3BpZnlBUEkyLmRlZmF1bHQuY2xpZW50LmZldGNoQ29sbGVjdGlvbihpZCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgdmFyIGNvbGxlY3Rpb24gPSBkYXRhIHx8IHt9O1xuICAgICAgdmFyIHBhcnNlZENvbGxlY3Rpb24gPSBfZXh0ZW5kcyh7fSwgY29sbGVjdGlvbik7XG4gICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfQUNUSVZFX0NPTExFQ1RJT04nLCBwYXJzZWRDb2xsZWN0aW9uOiBwYXJzZWRDb2xsZWN0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xufTtcblxuLy8gQWRkIGNvbGxlY3Rpb25zIHRvIHN0b3JlXG52YXIgc3RhcnRBZGRDb2xsZWN0aW9ucyA9IGV4cG9ydHMuc3RhcnRBZGRDb2xsZWN0aW9ucyA9IGZ1bmN0aW9uIHN0YXJ0QWRkQ29sbGVjdGlvbnMoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gX3Nob3BpZnlBUEkyLmRlZmF1bHQuY2xpZW50LmZldGNoQWxsQ29sbGVjdGlvbnMoKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICB2YXIgY29sbGVjdGlvbnMgPSBkYXRhIHx8IHt9O1xuICAgICAgdmFyIHBhcnNlZENvbGxlY3Rpb25zID0gW107XG5cbiAgICAgIE9iamVjdC5rZXlzKGNvbGxlY3Rpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChjb2xsZWN0aW9uSWQpIHtcbiAgICAgICAgcGFyc2VkQ29sbGVjdGlvbnMucHVzaChfZXh0ZW5kcyh7XG4gICAgICAgICAga2V5OiBjb2xsZWN0aW9uSWRcbiAgICAgICAgfSwgY29sbGVjdGlvbnNbY29sbGVjdGlvbklkXSkpO1xuICAgICAgfSk7XG5cbiAgICAgIGRpc3BhdGNoKGFkZENvbGxlY3Rpb25zKHBhcnNlZENvbGxlY3Rpb25zKSk7XG4gICAgfSk7XG4gIH07XG59O1xuXG52YXIgYWRkQ29sbGVjdGlvbnMgPSBleHBvcnRzLmFkZENvbGxlY3Rpb25zID0gZnVuY3Rpb24gYWRkQ29sbGVjdGlvbnMoY29sbGVjdGlvbnMpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQUREX0NPTExFQ1RJT05TJyxcbiAgICBjb2xsZWN0aW9uczogY29sbGVjdGlvbnNcbiAgfTtcbn07XG5cbi8qKiovIH0pLFxuLyogNDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudXBkYXRlQWN0aXZlUHJvZHVjdE9wdGlvbnMgPSBleHBvcnRzLmNsZWFyQWN0aXZlUHJvZHVjdCA9IGV4cG9ydHMuc2V0QWN0aXZlUHJvZHVjdCA9IGV4cG9ydHMucHJlbG9hZFByb2R1Y3RJbWFnZXMgPSBleHBvcnRzLmFkZFByb2R1Y3RzID0gZXhwb3J0cy5zdGFydEFkZFByb2R1Y3RzID0gdW5kZWZpbmVkO1xuXG52YXIgX3Nob3BpZnlBUEkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcblxudmFyIF9zaG9waWZ5QVBJMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Nob3BpZnlBUEkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBBZGQgcHJvZHVjdHMgdG8gc3RvcmVcbnZhciBzdGFydEFkZFByb2R1Y3RzID0gZXhwb3J0cy5zdGFydEFkZFByb2R1Y3RzID0gZnVuY3Rpb24gc3RhcnRBZGRQcm9kdWN0cygpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBfc2hvcGlmeUFQSTIuZGVmYXVsdC5jbGllbnQuZmV0Y2hBbGxQcm9kdWN0cygpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHZhciBwcm9kdWN0cyA9IGRhdGEgfHwge307XG4gICAgICB2YXIgcGFyc2VkUHJvZHVjdHMgPSBwcm9kdWN0cy5tYXAoZnVuY3Rpb24gKHByb2R1Y3QsIGluZGV4KSB7XG4gICAgICAgIHZhciB1cGRhdGVkUHJvZHVjdCA9IFtdO1xuICAgICAgICB1cGRhdGVkUHJvZHVjdCA9IHByb2R1Y3Q7XG4gICAgICAgIHVwZGF0ZWRQcm9kdWN0LmtleSA9IGluZGV4O1xuICAgICAgICByZXR1cm4gdXBkYXRlZFByb2R1Y3Q7XG4gICAgICB9KTtcblxuICAgICAgZGlzcGF0Y2goYWRkUHJvZHVjdHMocGFyc2VkUHJvZHVjdHMpKTtcbiAgICAgIGRpc3BhdGNoKHByZWxvYWRQcm9kdWN0SW1hZ2VzKCkpO1xuICAgIH0pO1xuICB9O1xufTtcblxudmFyIGFkZFByb2R1Y3RzID0gZXhwb3J0cy5hZGRQcm9kdWN0cyA9IGZ1bmN0aW9uIGFkZFByb2R1Y3RzKHByb2R1Y3RzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0FERF9QUk9EVUNUUycsXG4gICAgcHJvZHVjdHM6IHByb2R1Y3RzXG4gIH07XG59O1xuXG52YXIgcHJlbG9hZFByb2R1Y3RJbWFnZXMgPSBleHBvcnRzLnByZWxvYWRQcm9kdWN0SW1hZ2VzID0gZnVuY3Rpb24gcHJlbG9hZFByb2R1Y3RJbWFnZXMoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIGdldFN0YXRlKSB7XG4gICAgdmFyIHByb2R1Y3RzID0gZ2V0U3RhdGUoKS5wcm9kdWN0cy5hbGw7XG4gICAgdmFyIGltYWdlcyA9IFtdO1xuICAgIHByb2R1Y3RzLm1hcChmdW5jdGlvbiAocHJvZHVjdCwgaW5kZXgpIHtcbiAgICAgIGltYWdlc1tpbmRleF0gPSBuZXcgSW1hZ2UoKTtcbiAgICAgIGltYWdlc1tpbmRleF0uc3JjID0gcHJvZHVjdC5zZWxlY3RlZFZhcmlhbnQuaW1hZ2VWYXJpYW50c1s0XS5zcmM7XG4gICAgICByZXR1cm4gaW1hZ2VzW2luZGV4XTtcbiAgICB9KTtcbiAgfTtcbn07XG5cbi8vIHNldCBhY3RpdmUgcHJvZHVjdFxudmFyIHNldEFjdGl2ZVByb2R1Y3QgPSBleHBvcnRzLnNldEFjdGl2ZVByb2R1Y3QgPSBmdW5jdGlvbiBzZXRBY3RpdmVQcm9kdWN0KG9wdGlvbnMpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnU0VUX0FDVElWRV9QUk9EVUNUJyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH07XG59O1xuXG4vLyBjbGVhciBhY3RpdmUgcHJvZHVjdCBmcm9tIHJlZHV4XG52YXIgY2xlYXJBY3RpdmVQcm9kdWN0ID0gZXhwb3J0cy5jbGVhckFjdGl2ZVByb2R1Y3QgPSBmdW5jdGlvbiBjbGVhckFjdGl2ZVByb2R1Y3QoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0NMRUFSX0FDVElWRV9QUk9EVUNUJ1xuICB9O1xufTtcblxuLy8gdXBkYXRlIGFjdGl2ZSBwcm9kdWN0IG9wdGlvblxudmFyIHVwZGF0ZUFjdGl2ZVByb2R1Y3RPcHRpb25zID0gZXhwb3J0cy51cGRhdGVBY3RpdmVQcm9kdWN0T3B0aW9ucyA9IGZ1bmN0aW9uIHVwZGF0ZUFjdGl2ZVByb2R1Y3RPcHRpb25zKG9wdGlvbnMpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnVVBEQVRFX0FDVElWRV9QUk9EVUNUX09QVElPTlMnLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfTtcbn07XG5cbi8qKiovIH0pLFxuLyogNDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY29uZmlndXJlID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlZHV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDgpO1xuXG52YXIgcmVkdXggPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfcmVkdXgpO1xuXG52YXIgX3JlZHV4VGh1bmsgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzMCk7XG5cbnZhciBfcmVkdXhUaHVuazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWR1eFRodW5rKTtcblxudmFyIF9yZWR1Y2VycyA9IF9fd2VicGFja19yZXF1aXJlX18oMTY4KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxudmFyIGNvbmZpZ3VyZSA9IGV4cG9ydHMuY29uZmlndXJlID0gZnVuY3Rpb24gY29uZmlndXJlKCkge1xuICB2YXIgaW5pdGlhbFN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICB2YXIgcmVkdWNlciA9IHJlZHV4LmNvbWJpbmVSZWR1Y2Vycyh7XG4gICAgcHJvZHVjdHM6IF9yZWR1Y2Vycy5wcm9kdWN0c1JlZHVjZXIsXG4gICAgY29sbGVjdGlvbnM6IF9yZWR1Y2Vycy5jb2xsZWN0aW9uc1JlZHVjZXIsXG4gICAgY2FydDogX3JlZHVjZXJzLmNhcnRSZWR1Y2VyLFxuICAgIG5hdjogX3JlZHVjZXJzLm5hdlJlZHVjZXJcbiAgfSk7XG5cbiAgdmFyIHN0b3JlID0gcmVkdXguY3JlYXRlU3RvcmUocmVkdWNlciwgaW5pdGlhbFN0YXRlLCByZWR1eC5jb21wb3NlKHJlZHV4LmFwcGx5TWlkZGxld2FyZShfcmVkdXhUaHVuazIuZGVmYXVsdCksIHdpbmRvdy5kZXZUb29sc0V4dGVuc2lvbiA/IHdpbmRvdy5kZXZUb29sc0V4dGVuc2lvbigpIDogZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZjtcbiAgfSkpO1xuXG4gIHJldHVybiBzdG9yZTtcbn07XG5cbi8qKiovIH0pLFxuLyogNTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IExvYWRlcjtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBMb2FkZXIoKSB7XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICBcImRpdlwiLFxuICAgIHsgY2xhc3NOYW1lOiBcImxvYWRlclwiIH0sXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJpXCIsIHsgY2xhc3NOYW1lOiBcImZhIGZhLWNpcmNsZS1vLW5vdGNoIGZhLXNwaW4gZmEtM3ggZmEtZndcIiB9KVxuICApO1xufVxuXG4vKioqLyB9KSxcbi8qIDUxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBGb3JtYXQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZvcm1hdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9ybWF0KTtcbiAgfVxuXG4gIC8vIGZvcm1hdCBhbW91bnQgYXMgY3VycmVuY3lcblxuXG4gIF9jcmVhdGVDbGFzcyhGb3JtYXQsIFt7XG4gICAga2V5OiAnYXNNb25leScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFzTW9uZXkoYW1vdW50LCBjdXJyZW5jeSwgdGhvdXNhbmRTZXBhcmF0b3IsIGRlY2ltYWxTZXBhcmF0b3IsIGxvY2FsZURlY2ltYWxTZXBhcmF0b3IpIHtcbiAgICAgIGN1cnJlbmN5ID0gY3VycmVuY3kgfHwgJyQnO1xuICAgICAgdGhvdXNhbmRTZXBhcmF0b3IgPSB0aG91c2FuZFNlcGFyYXRvciB8fCAnLCc7XG4gICAgICBkZWNpbWFsU2VwYXJhdG9yID0gZGVjaW1hbFNlcGFyYXRvciB8fCAnLic7XG4gICAgICBsb2NhbGVEZWNpbWFsU2VwYXJhdG9yID0gbG9jYWxlRGVjaW1hbFNlcGFyYXRvciB8fCAnLic7XG4gICAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCcoXFxcXGQpKD89KFxcXFxkezN9KStcXFxcLiknLCAnZycpO1xuXG4gICAgICByZXR1cm4gY3VycmVuY3kgKyBwYXJzZUZsb2F0KGFtb3VudCwgMTApLnRvRml4ZWQoMikucmVwbGFjZShsb2NhbGVEZWNpbWFsU2VwYXJhdG9yLCBkZWNpbWFsU2VwYXJhdG9yKS5yZXBsYWNlKHJlZ2V4LCAnJDEnICsgdGhvdXNhbmRTZXBhcmF0b3IpLnRvU3RyaW5nKCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZvcm1hdDtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbmV3IEZvcm1hdCgpO1xuXG4vKioqLyB9KSxcbi8qIDUyICovLFxuLyogNTMgKi8sXG4vKiA1NCAqLyxcbi8qIDU1ICovLFxuLyogNTYgKi8sXG4vKiA1NyAqLyxcbi8qIDU4ICovLFxuLyogNTkgKi8sXG4vKiA2MCAqLyxcbi8qIDYxICovLFxuLyogNjIgKi8sXG4vKiA2MyAqLyxcbi8qIDY0ICovLFxuLyogNjUgKi8sXG4vKiA2NiAqLyxcbi8qIDY3ICovLFxuLyogNjggKi8sXG4vKiA2OSAqLyxcbi8qIDcwICovLFxuLyogNzEgKi8sXG4vKiA3MiAqLyxcbi8qIDczICovLFxuLyogNzQgKi8sXG4vKiA3NSAqLyxcbi8qIDc2ICovLFxuLyogNzcgKi8sXG4vKiA3OCAqLyxcbi8qIDc5ICovLFxuLyogODAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0RG9tID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX3RyYWNrSGVscGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDApO1xuXG52YXIgX29iamVjdEFzc2lnbiA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfb2JqZWN0QXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdEFzc2lnbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBoZWxwZXJzID0ge1xuICBpbml0aWFsaXplOiBmdW5jdGlvbiBpbml0aWFsaXplKHByb3BzKSB7XG4gICAgdmFyIHNsaWNrTGlzdCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzLmxpc3QpO1xuXG4gICAgdmFyIHNsaWRlQ291bnQgPSBfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4uY291bnQocHJvcHMuY2hpbGRyZW4pO1xuICAgIHZhciBsaXN0V2lkdGggPSB0aGlzLmdldFdpZHRoKHNsaWNrTGlzdCk7XG4gICAgdmFyIHRyYWNrV2lkdGggPSB0aGlzLmdldFdpZHRoKF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzLnRyYWNrKSk7XG4gICAgdmFyIHNsaWRlV2lkdGg7XG5cbiAgICBpZiAoIXByb3BzLnZlcnRpY2FsKSB7XG4gICAgICB2YXIgY2VudGVyUGFkZGluZ0FkaiA9IHByb3BzLmNlbnRlck1vZGUgJiYgcGFyc2VJbnQocHJvcHMuY2VudGVyUGFkZGluZykgKiAyO1xuICAgICAgc2xpZGVXaWR0aCA9ICh0aGlzLmdldFdpZHRoKF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKSkgLSBjZW50ZXJQYWRkaW5nQWRqKSAvIHByb3BzLnNsaWRlc1RvU2hvdztcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVXaWR0aCA9IHRoaXMuZ2V0V2lkdGgoX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpKTtcbiAgICB9XG5cbiAgICB2YXIgc2xpZGVIZWlnaHQgPSB0aGlzLmdldEhlaWdodChzbGlja0xpc3QucXVlcnlTZWxlY3RvcignW2RhdGEtaW5kZXg9XCIwXCJdJykpO1xuICAgIHZhciBsaXN0SGVpZ2h0ID0gc2xpZGVIZWlnaHQgKiBwcm9wcy5zbGlkZXNUb1Nob3c7XG5cbiAgICB2YXIgY3VycmVudFNsaWRlID0gcHJvcHMucnRsID8gc2xpZGVDb3VudCAtIDEgLSBwcm9wcy5pbml0aWFsU2xpZGUgOiBwcm9wcy5pbml0aWFsU2xpZGU7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNsaWRlQ291bnQ6IHNsaWRlQ291bnQsXG4gICAgICBzbGlkZVdpZHRoOiBzbGlkZVdpZHRoLFxuICAgICAgbGlzdFdpZHRoOiBsaXN0V2lkdGgsXG4gICAgICB0cmFja1dpZHRoOiB0cmFja1dpZHRoLFxuICAgICAgY3VycmVudFNsaWRlOiBjdXJyZW50U2xpZGUsXG4gICAgICBzbGlkZUhlaWdodDogc2xpZGVIZWlnaHQsXG4gICAgICBsaXN0SGVpZ2h0OiBsaXN0SGVpZ2h0XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICB2YXIgdGFyZ2V0TGVmdCA9ICgwLCBfdHJhY2tIZWxwZXIuZ2V0VHJhY2tMZWZ0KSgoMCwgX29iamVjdEFzc2lnbjIuZGVmYXVsdCkoe1xuICAgICAgICBzbGlkZUluZGV4OiB0aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSxcbiAgICAgICAgdHJhY2tSZWY6IHRoaXMudHJhY2tcbiAgICAgIH0sIHByb3BzLCB0aGlzLnN0YXRlKSk7XG4gICAgICAvLyBnZXRDU1MgZnVuY3Rpb24gbmVlZHMgcHJldmlvdXNseSBzZXQgc3RhdGVcbiAgICAgIHZhciB0cmFja1N0eWxlID0gKDAsIF90cmFja0hlbHBlci5nZXRUcmFja0NTUykoKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHsgbGVmdDogdGFyZ2V0TGVmdCB9LCBwcm9wcywgdGhpcy5zdGF0ZSkpO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHsgdHJhY2tTdHlsZTogdHJhY2tTdHlsZSB9KTtcblxuICAgICAgdGhpcy5hdXRvUGxheSgpOyAvLyBvbmNlIHdlJ3JlIHNldCB1cCwgdHJpZ2dlciB0aGUgaW5pdGlhbCBhdXRvcGxheS5cbiAgICB9KTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUocHJvcHMpIHtcbiAgICB2YXIgc2xpY2tMaXN0ID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMubGlzdCk7XG4gICAgLy8gVGhpcyBtZXRob2QgaGFzIG1vc3RseSBzYW1lIGNvZGUgYXMgaW5pdGlhbGl6ZSBtZXRob2QuXG4gICAgLy8gUmVmYWN0b3IgaXRcbiAgICB2YXIgc2xpZGVDb3VudCA9IF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5jb3VudChwcm9wcy5jaGlsZHJlbik7XG4gICAgdmFyIGxpc3RXaWR0aCA9IHRoaXMuZ2V0V2lkdGgoc2xpY2tMaXN0KTtcbiAgICB2YXIgdHJhY2tXaWR0aCA9IHRoaXMuZ2V0V2lkdGgoX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMudHJhY2spKTtcbiAgICB2YXIgc2xpZGVXaWR0aDtcblxuICAgIGlmICghcHJvcHMudmVydGljYWwpIHtcbiAgICAgIHZhciBjZW50ZXJQYWRkaW5nQWRqID0gcHJvcHMuY2VudGVyTW9kZSAmJiBwYXJzZUludChwcm9wcy5jZW50ZXJQYWRkaW5nKSAqIDI7XG4gICAgICBzbGlkZVdpZHRoID0gKHRoaXMuZ2V0V2lkdGgoX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpKSAtIGNlbnRlclBhZGRpbmdBZGopIC8gcHJvcHMuc2xpZGVzVG9TaG93O1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVdpZHRoID0gdGhpcy5nZXRXaWR0aChfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcykpO1xuICAgIH1cblxuICAgIHZhciBzbGlkZUhlaWdodCA9IHRoaXMuZ2V0SGVpZ2h0KHNsaWNrTGlzdC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pbmRleD1cIjBcIl0nKSk7XG4gICAgdmFyIGxpc3RIZWlnaHQgPSBzbGlkZUhlaWdodCAqIHByb3BzLnNsaWRlc1RvU2hvdztcblxuICAgIC8vIHBhdXNlIHNsaWRlciBpZiBhdXRvcGxheSBpcyBzZXQgdG8gZmFsc2VcbiAgICBpZiAocHJvcHMuYXV0b3BsYXkpIHtcbiAgICAgIHRoaXMucGF1c2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hdXRvUGxheSgpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2xpZGVDb3VudDogc2xpZGVDb3VudCxcbiAgICAgIHNsaWRlV2lkdGg6IHNsaWRlV2lkdGgsXG4gICAgICBsaXN0V2lkdGg6IGxpc3RXaWR0aCxcbiAgICAgIHRyYWNrV2lkdGg6IHRyYWNrV2lkdGgsXG4gICAgICBzbGlkZUhlaWdodDogc2xpZGVIZWlnaHQsXG4gICAgICBsaXN0SGVpZ2h0OiBsaXN0SGVpZ2h0XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICB2YXIgdGFyZ2V0TGVmdCA9ICgwLCBfdHJhY2tIZWxwZXIuZ2V0VHJhY2tMZWZ0KSgoMCwgX29iamVjdEFzc2lnbjIuZGVmYXVsdCkoe1xuICAgICAgICBzbGlkZUluZGV4OiB0aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSxcbiAgICAgICAgdHJhY2tSZWY6IHRoaXMudHJhY2tcbiAgICAgIH0sIHByb3BzLCB0aGlzLnN0YXRlKSk7XG4gICAgICAvLyBnZXRDU1MgZnVuY3Rpb24gbmVlZHMgcHJldmlvdXNseSBzZXQgc3RhdGVcbiAgICAgIHZhciB0cmFja1N0eWxlID0gKDAsIF90cmFja0hlbHBlci5nZXRUcmFja0NTUykoKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHsgbGVmdDogdGFyZ2V0TGVmdCB9LCBwcm9wcywgdGhpcy5zdGF0ZSkpO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHsgdHJhY2tTdHlsZTogdHJhY2tTdHlsZSB9KTtcbiAgICB9KTtcbiAgfSxcbiAgZ2V0V2lkdGg6IGZ1bmN0aW9uIGdldFdpZHRoKGVsZW0pIHtcbiAgICByZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB8fCBlbGVtLm9mZnNldFdpZHRoIHx8IDA7XG4gIH0sXG4gIGdldEhlaWdodDogZnVuY3Rpb24gZ2V0SGVpZ2h0KGVsZW0pIHtcbiAgICByZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgMDtcbiAgfSxcblxuICBhZGFwdEhlaWdodDogZnVuY3Rpb24gYWRhcHRIZWlnaHQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuYWRhcHRpdmVIZWlnaHQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9ICdbZGF0YS1pbmRleD1cIicgKyB0aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSArICdcIl0nO1xuICAgICAgaWYgKHRoaXMubGlzdCkge1xuICAgICAgICB2YXIgc2xpY2tMaXN0ID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMubGlzdCk7XG4gICAgICAgIHNsaWNrTGlzdC5zdHlsZS5oZWlnaHQgPSBzbGlja0xpc3QucXVlcnlTZWxlY3RvcihzZWxlY3Rvcikub2Zmc2V0SGVpZ2h0ICsgJ3B4JztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGNhbkdvTmV4dDogZnVuY3Rpb24gY2FuR29OZXh0KG9wdHMpIHtcbiAgICB2YXIgY2FuR28gPSB0cnVlO1xuICAgIGlmICghb3B0cy5pbmZpbml0ZSkge1xuICAgICAgaWYgKG9wdHMuY2VudGVyTW9kZSkge1xuICAgICAgICAvLyBjaGVjayBpZiBjdXJyZW50IHNsaWRlIGlzIGxhc3Qgc2xpZGVcbiAgICAgICAgaWYgKG9wdHMuY3VycmVudFNsaWRlID49IG9wdHMuc2xpZGVDb3VudCAtIDEpIHtcbiAgICAgICAgICBjYW5HbyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjaGVjayBpZiBhbGwgc2xpZGVzIGFyZSBzaG93biBpbiBzbGlkZXJcbiAgICAgICAgaWYgKG9wdHMuc2xpZGVDb3VudCA8PSBvcHRzLnNsaWRlc1RvU2hvdyB8fCBvcHRzLmN1cnJlbnRTbGlkZSA+PSBvcHRzLnNsaWRlQ291bnQgLSBvcHRzLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgIGNhbkdvID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNhbkdvO1xuICB9LFxuICBzbGlkZUhhbmRsZXI6IGZ1bmN0aW9uIHNsaWRlSGFuZGxlcihpbmRleCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBGdW5jdGlvbmFsaXR5IG9mIGFuaW1hdGVTbGlkZSBhbmQgcG9zdFNsaWRlIGlzIG1lcmdlZCBpbnRvIHRoaXMgZnVuY3Rpb25cbiAgICAvLyBjb25zb2xlLmxvZygnc2xpZGVIYW5kbGVyJywgaW5kZXgpO1xuICAgIHZhciB0YXJnZXRTbGlkZSwgY3VycmVudFNsaWRlO1xuICAgIHZhciB0YXJnZXRMZWZ0LCBjdXJyZW50TGVmdDtcbiAgICB2YXIgY2FsbGJhY2s7XG5cbiAgICBpZiAodGhpcy5wcm9wcy53YWl0Rm9yQW5pbWF0ZSAmJiB0aGlzLnN0YXRlLmFuaW1hdGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmZhZGUpIHtcbiAgICAgIGN1cnJlbnRTbGlkZSA9IHRoaXMuc3RhdGUuY3VycmVudFNsaWRlO1xuXG4gICAgICAvLyBEb24ndCBjaGFuZ2Ugc2xpZGUgaWYgaXQncyBub3QgaW5maXRlIGFuZCBjdXJyZW50IHNsaWRlIGlzIHRoZSBmaXJzdCBvciBsYXN0IHNsaWRlLlxuICAgICAgaWYgKHRoaXMucHJvcHMuaW5maW5pdGUgPT09IGZhbHNlICYmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5zdGF0ZS5zbGlkZUNvdW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vICBTaGlmdGluZyB0YXJnZXRTbGlkZSBiYWNrIGludG8gdGhlIHJhbmdlXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHRhcmdldFNsaWRlID0gaW5kZXggKyB0aGlzLnN0YXRlLnNsaWRlQ291bnQ7XG4gICAgICB9IGVsc2UgaWYgKGluZGV4ID49IHRoaXMuc3RhdGUuc2xpZGVDb3VudCkge1xuICAgICAgICB0YXJnZXRTbGlkZSA9IGluZGV4IC0gdGhpcy5zdGF0ZS5zbGlkZUNvdW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0U2xpZGUgPSBpbmRleDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucHJvcHMubGF6eUxvYWQgJiYgdGhpcy5zdGF0ZS5sYXp5TG9hZGVkTGlzdC5pbmRleE9mKHRhcmdldFNsaWRlKSA8IDApIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbGF6eUxvYWRlZExpc3Q6IHRoaXMuc3RhdGUubGF6eUxvYWRlZExpc3QuY29uY2F0KHRhcmdldFNsaWRlKVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjaygpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGFuaW1hdGluZzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5hZnRlckNoYW5nZSkge1xuICAgICAgICAgIF90aGlzLnByb3BzLmFmdGVyQ2hhbmdlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgX3RoaXMuYW5pbWF0aW9uRW5kQ2FsbGJhY2s7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYW5pbWF0aW5nOiB0cnVlLFxuICAgICAgICBjdXJyZW50U2xpZGU6IHRhcmdldFNsaWRlXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uRW5kQ2FsbGJhY2sgPSBzZXRUaW1lb3V0KGNhbGxiYWNrLCB0aGlzLnByb3BzLnNwZWVkKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5iZWZvcmVDaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5iZWZvcmVDaGFuZ2UodGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUsIHRhcmdldFNsaWRlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hdXRvUGxheSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRhcmdldFNsaWRlID0gaW5kZXg7XG4gICAgaWYgKHRhcmdldFNsaWRlIDwgMCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgIGN1cnJlbnRTbGlkZSA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuc2xpZGVDb3VudCAlIHRoaXMucHJvcHMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgY3VycmVudFNsaWRlID0gdGhpcy5zdGF0ZS5zbGlkZUNvdW50IC0gdGhpcy5zdGF0ZS5zbGlkZUNvdW50ICUgdGhpcy5wcm9wcy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRTbGlkZSA9IHRoaXMuc3RhdGUuc2xpZGVDb3VudCArIHRhcmdldFNsaWRlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGFyZ2V0U2xpZGUgPj0gdGhpcy5zdGF0ZS5zbGlkZUNvdW50KSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgY3VycmVudFNsaWRlID0gdGhpcy5zdGF0ZS5zbGlkZUNvdW50IC0gdGhpcy5wcm9wcy5zbGlkZXNUb1Nob3c7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuc2xpZGVDb3VudCAlIHRoaXMucHJvcHMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgY3VycmVudFNsaWRlID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRTbGlkZSA9IHRhcmdldFNsaWRlIC0gdGhpcy5zdGF0ZS5zbGlkZUNvdW50O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50U2xpZGUgPSB0YXJnZXRTbGlkZTtcbiAgICB9XG5cbiAgICB0YXJnZXRMZWZ0ID0gKDAsIF90cmFja0hlbHBlci5nZXRUcmFja0xlZnQpKCgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KSh7XG4gICAgICBzbGlkZUluZGV4OiB0YXJnZXRTbGlkZSxcbiAgICAgIHRyYWNrUmVmOiB0aGlzLnRyYWNrXG4gICAgfSwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZSkpO1xuXG4gICAgY3VycmVudExlZnQgPSAoMCwgX3RyYWNrSGVscGVyLmdldFRyYWNrTGVmdCkoKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHtcbiAgICAgIHNsaWRlSW5kZXg6IGN1cnJlbnRTbGlkZSxcbiAgICAgIHRyYWNrUmVmOiB0aGlzLnRyYWNrXG4gICAgfSwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZSkpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICB0YXJnZXRMZWZ0ID0gY3VycmVudExlZnQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYmVmb3JlQ2hhbmdlKSB7XG4gICAgICB0aGlzLnByb3BzLmJlZm9yZUNoYW5nZSh0aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSwgY3VycmVudFNsaWRlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5sYXp5TG9hZCkge1xuICAgICAgdmFyIGxvYWRlZCA9IHRydWU7XG4gICAgICB2YXIgc2xpZGVzVG9Mb2FkID0gW107XG4gICAgICBmb3IgKHZhciBpID0gdGFyZ2V0U2xpZGU7IGkgPCB0YXJnZXRTbGlkZSArIHRoaXMucHJvcHMuc2xpZGVzVG9TaG93OyBpKyspIHtcbiAgICAgICAgbG9hZGVkID0gbG9hZGVkICYmIHRoaXMuc3RhdGUubGF6eUxvYWRlZExpc3QuaW5kZXhPZihpKSA+PSAwO1xuICAgICAgICBpZiAoIWxvYWRlZCkge1xuICAgICAgICAgIHNsaWRlc1RvTG9hZC5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWxvYWRlZCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBsYXp5TG9hZGVkTGlzdDogdGhpcy5zdGF0ZS5sYXp5TG9hZGVkTGlzdC5jb25jYXQoc2xpZGVzVG9Mb2FkKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTbGlkZSBUcmFuc2l0aW9uIGhhcHBlbnMgaGVyZS5cbiAgICAvLyBhbmltYXRlZCB0cmFuc2l0aW9uIGhhcHBlbnMgdG8gdGFyZ2V0IFNsaWRlIGFuZFxuICAgIC8vIG5vbiAtIGFuaW1hdGVkIHRyYW5zaXRpb24gaGFwcGVucyB0byBjdXJyZW50IFNsaWRlXG4gICAgLy8gSWYgQ1NTIHRyYW5zaXRpb25zIGFyZSBmYWxzZSwgZGlyZWN0bHkgZ28gdGhlIGN1cnJlbnQgc2xpZGUuXG5cbiAgICBpZiAodGhpcy5wcm9wcy51c2VDU1MgPT09IGZhbHNlKSB7XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjdXJyZW50U2xpZGU6IGN1cnJlbnRTbGlkZSxcbiAgICAgICAgdHJhY2tTdHlsZTogKDAsIF90cmFja0hlbHBlci5nZXRUcmFja0NTUykoKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHsgbGVmdDogY3VycmVudExlZnQgfSwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZSkpXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmFmdGVyQ2hhbmdlKSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5hZnRlckNoYW5nZShjdXJyZW50U2xpZGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICB2YXIgbmV4dFN0YXRlQ2hhbmdlcyA9IHtcbiAgICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgICAgY3VycmVudFNsaWRlOiBjdXJyZW50U2xpZGUsXG4gICAgICAgIHRyYWNrU3R5bGU6ICgwLCBfdHJhY2tIZWxwZXIuZ2V0VHJhY2tDU1MpKCgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KSh7IGxlZnQ6IGN1cnJlbnRMZWZ0IH0sIHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpKSxcbiAgICAgICAgc3dpcGVMZWZ0OiBudWxsXG4gICAgICB9O1xuXG4gICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZShuZXh0U3RhdGVDaGFuZ2VzKTtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLmFmdGVyQ2hhbmdlKSB7XG4gICAgICAgICAgX3RoaXMucHJvcHMuYWZ0ZXJDaGFuZ2UoY3VycmVudFNsaWRlKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgX3RoaXMuYW5pbWF0aW9uRW5kQ2FsbGJhY2s7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYW5pbWF0aW5nOiB0cnVlLFxuICAgICAgICBjdXJyZW50U2xpZGU6IGN1cnJlbnRTbGlkZSxcbiAgICAgICAgdHJhY2tTdHlsZTogKDAsIF90cmFja0hlbHBlci5nZXRUcmFja0FuaW1hdGVDU1MpKCgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KSh7IGxlZnQ6IHRhcmdldExlZnQgfSwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZSkpXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uRW5kQ2FsbGJhY2sgPSBzZXRUaW1lb3V0KGNhbGxiYWNrLCB0aGlzLnByb3BzLnNwZWVkKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuYXV0b1BsYXkoKTtcbiAgfSxcbiAgc3dpcGVEaXJlY3Rpb246IGZ1bmN0aW9uIHN3aXBlRGlyZWN0aW9uKHRvdWNoT2JqZWN0KSB7XG4gICAgdmFyIHhEaXN0LCB5RGlzdCwgciwgc3dpcGVBbmdsZTtcblxuICAgIHhEaXN0ID0gdG91Y2hPYmplY3Quc3RhcnRYIC0gdG91Y2hPYmplY3QuY3VyWDtcbiAgICB5RGlzdCA9IHRvdWNoT2JqZWN0LnN0YXJ0WSAtIHRvdWNoT2JqZWN0LmN1clk7XG4gICAgciA9IE1hdGguYXRhbjIoeURpc3QsIHhEaXN0KTtcblxuICAgIHN3aXBlQW5nbGUgPSBNYXRoLnJvdW5kKHIgKiAxODAgLyBNYXRoLlBJKTtcbiAgICBpZiAoc3dpcGVBbmdsZSA8IDApIHtcbiAgICAgIHN3aXBlQW5nbGUgPSAzNjAgLSBNYXRoLmFicyhzd2lwZUFuZ2xlKTtcbiAgICB9XG4gICAgaWYgKHN3aXBlQW5nbGUgPD0gNDUgJiYgc3dpcGVBbmdsZSA+PSAwIHx8IHN3aXBlQW5nbGUgPD0gMzYwICYmIHN3aXBlQW5nbGUgPj0gMzE1KSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5ydGwgPT09IGZhbHNlID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9XG4gICAgaWYgKHN3aXBlQW5nbGUgPj0gMTM1ICYmIHN3aXBlQW5nbGUgPD0gMjI1KSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5ydGwgPT09IGZhbHNlID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICBpZiAoc3dpcGVBbmdsZSA+PSAzNSAmJiBzd2lwZUFuZ2xlIDw9IDEzNSkge1xuICAgICAgICByZXR1cm4gJ2Rvd24nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICd1cCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICd2ZXJ0aWNhbCc7XG4gIH0sXG4gIHBsYXk6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgdmFyIG5leHRJbmRleDtcblxuICAgIGlmICghdGhpcy5zdGF0ZS5tb3VudGVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMucnRsKSB7XG4gICAgICBuZXh0SW5kZXggPSB0aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSAtIHRoaXMucHJvcHMuc2xpZGVzVG9TY3JvbGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmNhbkdvTmV4dChfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZSkpKSB7XG4gICAgICAgIG5leHRJbmRleCA9IHRoaXMuc3RhdGUuY3VycmVudFNsaWRlICsgdGhpcy5wcm9wcy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNsaWRlSGFuZGxlcihuZXh0SW5kZXgpO1xuICB9LFxuICBhdXRvUGxheTogZnVuY3Rpb24gYXV0b1BsYXkoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuYXV0b1BsYXlUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc3RhdGUuYXV0b1BsYXlUaW1lcik7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLmF1dG9wbGF5KSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYXV0b1BsYXlUaW1lcjogc2V0VGltZW91dCh0aGlzLnBsYXksIHRoaXMucHJvcHMuYXV0b3BsYXlTcGVlZClcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgcGF1c2U6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmF1dG9QbGF5VGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnN0YXRlLmF1dG9QbGF5VGltZXIpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGF1dG9QbGF5VGltZXI6IG51bGxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gaGVscGVycztcblxuLyoqKi8gfSksXG4vKiA4MSAqLyxcbi8qIDgyICovLFxuLyogODMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oOCksXG4gICAgY29ubmVjdCA9IF9yZXF1aXJlLmNvbm5lY3Q7XG5cbnZhciBhY3Rpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nyk7XG5cbnZhciBDb2xsZWN0aW9uID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENvbGxlY3Rpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENvbGxlY3Rpb24oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbGxlY3Rpb24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDb2xsZWN0aW9uLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29sbGVjdGlvbikpLmNhbGwodGhpcykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvbGxlY3Rpb24sIFt7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgdmFyIGRpc3BhdGNoID0gdGhpcy5wcm9wcy5kaXNwYXRjaDtcblxuICAgICAgZGlzcGF0Y2goYWN0aW9ucy5zZXRBY3RpdmVDb2xsZWN0aW9uKHRoaXMucHJvcHMucGFyYW1zLmNvbGxlY3Rpb25JZCkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBjb2xsZWN0aW9uID0gdm9pZCAwO1xuICAgICAgY29sbGVjdGlvbiA9IHRoaXMucHJvcHMuY29sbGVjdGlvbjtcbiAgICAgIGlmIChjb2xsZWN0aW9uKSB7XG4gICAgICAgIHZhciBkaXNwYXRjaCA9IHRoaXMucHJvcHMuZGlzcGF0Y2g7XG4gICAgICAgIHZhciBfY29sbGVjdGlvbiA9IGNvbGxlY3Rpb24sXG4gICAgICAgICAgICBjb2xsZWN0aW9uX2lkID0gX2NvbGxlY3Rpb24uY29sbGVjdGlvbl9pZCxcbiAgICAgICAgICAgIHRpdGxlID0gX2NvbGxlY3Rpb24udGl0bGU7XG5cblxuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdjb2xsZWN0aW9uLWluZGV4JyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2gxJyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInIH0sXG4gICAgICAgICAgICB0aXRsZVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgICdMb2FkaW5nIGNvbGxlY3Rpb24uLi4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENvbGxlY3Rpb247XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjb25uZWN0KGZ1bmN0aW9uIChzdGF0ZSkge1xuICByZXR1cm4ge1xuICAgIGNvbGxlY3Rpb246IHN0YXRlLmNvbGxlY3Rpb25zLmFjdGl2ZVxuICB9O1xufSkoQ29sbGVjdGlvbik7XG5cbi8qKiovIH0pLFxuLyogODQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Um91dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cbnZhciBfZm9ybWF0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MSk7XG5cbnZhciBfZm9ybWF0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zvcm1hdCk7XG5cbnZhciBfcmVhY3RNb2RhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMjgzKTtcblxudmFyIF9yZWFjdE1vZGFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0TW9kYWwpO1xuXG52YXIgX3Nob3BpZnlBUEkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcblxudmFyIF9zaG9waWZ5QVBJMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Nob3BpZnlBUEkpO1xuXG52YXIgX0xvYWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oNTApO1xuXG52YXIgX0xvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2FkZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oOCksXG4gICAgY29ubmVjdCA9IF9yZXF1aXJlLmNvbm5lY3Q7XG5cbnZhciBwcm9kdWN0QWN0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oNDgpO1xudmFyIGNhcnRBY3Rpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cbnZhciBQcm9kdWN0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByb2R1Y3QsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFByb2R1Y3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb2R1Y3QpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFByb2R1Y3QuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQcm9kdWN0KSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1vZGFsSXNPcGVuOiBmYWxzZVxuICAgIH07XG5cbiAgICBfdGhpcy5vcGVuTW9kYWwgPSBfdGhpcy5vcGVuTW9kYWwuYmluZChfdGhpcyk7XG4gICAgX3RoaXMuY2xvc2VNb2RhbCA9IF90aGlzLmNsb3NlTW9kYWwuYmluZChfdGhpcyk7XG5cbiAgICB2YXIgZGlzcGF0Y2ggPSB2b2lkIDA7XG4gICAgdmFyIHByb2R1Y3QgPSB2b2lkIDA7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFByb2R1Y3QsIFt7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMuZGlzcGF0Y2ggPSB0aGlzLnByb3BzLmRpc3BhdGNoO1xuXG4gICAgICBfc2hvcGlmeUFQSTIuZGVmYXVsdC5jbGllbnQuZmV0Y2hQcm9kdWN0KHRoaXMucHJvcHMucGFyYW1zLnByb2R1Y3RJZCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgcHJvZHVjdCA9IGRhdGEgfHwge307XG4gICAgICAgIF90aGlzMi5wcm9kdWN0ID0gcHJvZHVjdDtcbiAgICAgICAgX3RoaXMyLmRpc3BhdGNoKHByb2R1Y3RBY3Rpb25zLnNldEFjdGl2ZVByb2R1Y3QocHJvZHVjdC5vcHRpb25zKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5kaXNwYXRjaChwcm9kdWN0QWN0aW9ucy5jbGVhckFjdGl2ZVByb2R1Y3QoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2xvc2VNb2RhbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlTW9kYWwoKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgbW9kYWxJc09wZW46IGZhbHNlIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29wZW5Nb2RhbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9wZW5Nb2RhbCgpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBtb2RhbElzT3BlbjogdHJ1ZSB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdoYW5kbGVPcHRpb25DaGFuZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVPcHRpb25DaGFuZ2Uob3B0aW9uTmFtZSwgdmFsdWUpIHtcbiAgICAgIC8vIHVwZGF0ZSBwcm9kdWN0IG9wdGlvbnMgaW4gdGhlIFNob3BpZnkgc2luZ2xldG9uXG4gICAgICB0aGlzLnByb2R1Y3Qub3B0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICByZXR1cm4gb3B0aW9uLm5hbWUgPT09IG9wdGlvbk5hbWU7XG4gICAgICB9KVswXS5zZWxlY3RlZCA9IHZhbHVlO1xuXG4gICAgICAvLyB1cGRhdGUgcHJvZHVjdCBvcHRpb25zXG4gICAgICB0aGlzLmRpc3BhdGNoKHByb2R1Y3RBY3Rpb25zLnVwZGF0ZUFjdGl2ZVByb2R1Y3RPcHRpb25zKHRoaXMucHJvZHVjdC5vcHRpb25zKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBhY3RpdmVQcm9kdWN0ID0gdm9pZCAwO1xuICAgICAgYWN0aXZlUHJvZHVjdCA9IHRoaXMucHJvZHVjdDtcbiAgICAgIGlmIChhY3RpdmVQcm9kdWN0KSB7XG4gICAgICAgIHZhciBkaXNwYXRjaCA9IHRoaXMucHJvcHMuZGlzcGF0Y2g7XG4gICAgICAgIHZhciBfYWN0aXZlUHJvZHVjdCRhdHRycyA9IGFjdGl2ZVByb2R1Y3QuYXR0cnMsXG4gICAgICAgICAgICBwcm9kdWN0X2lkID0gX2FjdGl2ZVByb2R1Y3QkYXR0cnMucHJvZHVjdF9pZCxcbiAgICAgICAgICAgIHRpdGxlID0gX2FjdGl2ZVByb2R1Y3QkYXR0cnMudGl0bGUsXG4gICAgICAgICAgICBpbWFnZXMgPSBfYWN0aXZlUHJvZHVjdCRhdHRycy5pbWFnZXMsXG4gICAgICAgICAgICBvcHRpb25zID0gX2FjdGl2ZVByb2R1Y3QkYXR0cnMub3B0aW9ucztcbiAgICAgICAgdmFyIF9hY3RpdmVQcm9kdWN0ID0gYWN0aXZlUHJvZHVjdCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gX2FjdGl2ZVByb2R1Y3QuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBzZWxlY3RlZFZhcmlhbnQgPSBfYWN0aXZlUHJvZHVjdC5zZWxlY3RlZFZhcmlhbnQsXG4gICAgICAgICAgICBzZWxlY3RlZFZhcmlhbnRJbWFnZSA9IF9hY3RpdmVQcm9kdWN0LnNlbGVjdGVkVmFyaWFudEltYWdlO1xuXG5cbiAgICAgICAgdmFyIHJlbmRlck9wdGlvbnMgPSBmdW5jdGlvbiByZW5kZXJPcHRpb25zKCkge1xuICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwcm9kdWN0LW9wdGlvbnMnIH0sXG4gICAgICAgICAgICBhY3RpdmVQcm9kdWN0Lm9wdGlvbnMubWFwKGZ1bmN0aW9uIChvcHRpb24sIGluZGV4KSB7XG4gICAgICAgICAgICAgIGlmIChvcHRpb24ubmFtZSAhPSBcIlNpemVcIiAmJiBvcHRpb24ubmFtZSAhPSBcIlRpdGxlXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAnc2VsZWN0JyxcbiAgICAgICAgICAgICAgICAgIHsga2V5OiBpbmRleCwgbmFtZTogb3B0aW9uLm5hbWUsIHZhbHVlOiBvcHRpb24uc2VsZWN0ZWQsIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgIF90aGlzMy5oYW5kbGVPcHRpb25DaGFuZ2Uob3B0aW9uLm5hbWUsIGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gfSxcbiAgICAgICAgICAgICAgICAgIG9wdGlvbi52YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICdvcHRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgIHsga2V5OiBpbmRleCwgdmFsdWU6IHZhbHVlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByZW5kZXJTaXplcyA9IGZ1bmN0aW9uIHJlbmRlclNpemVzKCkge1xuICAgICAgICAgIHJldHVybiBhY3RpdmVQcm9kdWN0Lm9wdGlvbnMubWFwKGZ1bmN0aW9uIChvcHRpb24sIG9wdGlvbnNJbmRleCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbi5uYW1lID09IFwiU2l6ZVwiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAndWwnLFxuICAgICAgICAgICAgICAgIHsga2V5OiBvcHRpb25zSW5kZXgsIGNsYXNzTmFtZTogJ3Byb2R1Y3Qtc2l6ZXMnIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9uLnZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAga2V5OiBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdwcm9kdWN0LXNpemUgJyArIChvcHRpb24uc2VsZWN0ZWQgPT09IHZhbHVlID8gJ3NlbGVjdGVkJyA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLmhhbmRsZU9wdGlvbkNoYW5nZShvcHRpb24ubmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zb2xlLmxvZygnYWN0aXZlUHJvZHVjdDogJywgYWN0aXZlUHJvZHVjdCk7XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY29udGFpbmVyJyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3JvdycgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdzbWFsbC0xMiBtZWRpdW0tOCBjb2x1bW4nIH0sXG4gICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdidXR0b24nLFxuICAgICAgICAgICAgICAgIHsgb25DbGljazogX3JlYWN0Um91dGVyLmJyb3dzZXJIaXN0b3J5LmdvQmFjaywgY2xhc3NOYW1lOiAnYnV0dG9uIGhvbGxvdycgfSxcbiAgICAgICAgICAgICAgICAnXFx1MjAzOSBCYWNrIHRvIHByb2R1Y3RzJ1xuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAncCcsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicgfSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaW1nJywgeyBzcmM6IHNlbGVjdGVkVmFyaWFudEltYWdlLnNyYywgYWx0OiAnJyB9KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3NtYWxsLTEyIG1lZGl1bS00IGNvbHVtbicgfSxcbiAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2gxJyxcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3Byb2R1Y3QtdGl0bGUnIH0sXG4gICAgICAgICAgICAgICAgdGl0bGVcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwcm9kdWN0LWluZm8nIH0sXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAnaDUnLFxuICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwcm9kdWN0LWluZm9fX2hlYWRsaW5lJyB9LFxuICAgICAgICAgICAgICAgICAgJ0FydGlzdCdcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgJ3AnLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICdKV0lTSDg4J1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAnaDUnLFxuICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwcm9kdWN0LWluZm9fX2hlYWRsaW5lJyB9LFxuICAgICAgICAgICAgICAgICAgJ0Rlc2NyaXB0aW9uJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiBkZXNjcmlwdGlvbiB9IH0pLFxuICAgICAgICAgICAgICAgIHJlbmRlck9wdGlvbnMoKSxcbiAgICAgICAgICAgICAgICByZW5kZXJTaXplcygpLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3Byb2R1Y3QtcHJpY2UnIH0sXG4gICAgICAgICAgICAgICAgICBfZm9ybWF0Mi5kZWZhdWx0LmFzTW9uZXkoc2VsZWN0ZWRWYXJpYW50LnByaWNlKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncHJvZHVjdC1jaGFyaXR5JyB9LFxuICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHBsYWNlaG9sZGVyOiAnQ2hvb3NlIENoYXJpdHknIH0pLFxuICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdidXR0b24nLFxuICAgICAgICAgICAgICAgICAgICB7IHR5cGU6ICdzdWJtaXQnLCBjbGFzc05hbWU6ICdwcm9kdWN0LWNoYXJpdHlfX2J1dHRvbicgfSxcbiAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2knLCB7IGNsYXNzTmFtZTogJ2ZhIGZhLWNhcmV0LXJpZ2h0JyB9KVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwcm9kdWN0LWNoYXJpdHlfX21vcmUtaW5mbycsIG9uQ2xpY2s6IHRoaXMub3Blbk1vZGFsIH0sXG4gICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpJywgeyBjbGFzc05hbWU6ICdmYSBmYS1pbmZvLWNpcmNsZScgfSksXG4gICAgICAgICAgICAgICAgICAgICcgJyxcbiAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgJ2EnLFxuICAgICAgICAgICAgICAgICAgICAgIHsgaHJlZjogJyMnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgJ21vcmUgaW5mbydcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3RNb2RhbDIuZGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIGlzT3BlbjogdGhpcy5zdGF0ZS5tb2RhbElzT3BlbixcbiAgICAgICAgICAgICAgICAgICAgICBvblJlcXVlc3RDbG9zZTogdGhpcy5jbG9zZU1vZGFsLFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRMYWJlbDogJ21vcmUgaW5mbycsXG4gICAgICAgICAgICAgICAgICAgICAgY2xvc2VUaW1lb3V0TVM6IDIwMCxcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdSZWFjdE1vZGFsX19Db250ZW50J1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAncCcsXG4gICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gUGVsbGVudGVzcXVlIGVnZXN0YXMsIG5pYmggc2VkIHRyaXN0aXF1ZSBvcm5hcmUsIG51bmMgZHVpIHNvbGxpY2l0dWRpbiBlbGl0LCBpZCBjb25zZWN0ZXR1ciBvZGlvIGxlY3R1cyBldSBudWxsYS4gUHJvaW4gZGFwaWJ1cyBjb252YWxsaXMgdXJuYSBzaXQgYW1ldCBkaWN0dW0uIFV0IHBvcnR0aXRvciBsaWd1bGEgYXQgcHVydXMgYXVjdG9yIG1vbGVzdGllLiBFdGlhbSB2ZWxpdCBuaWJoLCBwb3J0dGl0b3IgYXQgaXBzdW0gbWF0dGlzLCBjb25zZWN0ZXR1ciBlZ2VzdGFzIGFyY3UuIERvbmVjIHBlbGxlbnRlc3F1ZSBhdWd1ZSBzaXQgYW1ldCBlbGVtZW50dW0gZmFjaWxpc2lzLiBBZW5lYW4gc2VtcGVyIG1hbGVzdWFkYSBsaWd1bGEgZmF1Y2lidXMgc29sbGljaXR1ZGluLiBDdXJhYml0dXIgdXQgbG9yZW0gYWMgZXJhdCBwb3J0YSBsYWNpbmlhIHB1bHZpbmFyIGV0IHJpc3VzLidcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgJ3AnLFxuICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgJ1NlZCBhdCBudWxsYSBkb2xvci4gVXQgcXVpcyBxdWFtIGZpbmlidXMsIGVmZmljaXR1ciBtaSBzZWQsIHNvbGxpY2l0dWRpbiB1cm5hLiBOdW5jIHZlbCB0b3J0b3IgY29tbW9kbywgbW9sbGlzIGVzdCBldSwgYmxhbmRpdCBtYXNzYS4gVml2YW11cyBzZWQgbWkgdml0YWUgc2VtIGNvbW1vZG8gY29uc2VjdGV0dXIgZXUgaW4gc2VtLiBEb25lYyB1dCBmYWNpbGlzaXMgb2Rpby4gTnVsbGFtIGlkIGVsZW1lbnR1bSBlcm9zLCBub24gdGVtcHVzIHRvcnRvci4gTnVsbGFtIGluIG1hdHRpcyBmZWxpcy4gUHJhZXNlbnQgYmliZW5kdW0gYmxhbmRpdCBhbnRlLCBldCBlbGVtZW50dW0gbWV0dXMgY29uc2VjdGV0dXIgdml0YWUuJ1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAnYnV0dG9uJyxcbiAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2Nsb3NlLW1vZGFsLWljb24nLCBvbkNsaWNrOiB0aGlzLmNsb3NlTW9kYWwgfSxcbiAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaScsIHsgY2xhc3NOYW1lOiAnZmEgZmEtdGltZXMnIH0pXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgJ2J1dHRvbicsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goY2FydEFjdGlvbnMuc3RhcnRBZGRvclVwZGF0ZUNhcnRJdGVtKGFjdGl2ZVByb2R1Y3Quc2VsZWN0ZWRWYXJpYW50LCAxKSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2J1dHRvbiBsYXJnZSBhZGQtdG8tY2FydCcgfSxcbiAgICAgICAgICAgICAgICAgICdBZGQgVG8gQ2FydCdcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbWcnLCB7IHNyYzogJy9pbWFnZXMvY3JlZGl0LWNhcmRzLnBuZycsIGFsdDogJ0FjY2VwdGVkIGNyZWRpdCBjYXJkcycgfSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTG9hZGVyMi5kZWZhdWx0LCBudWxsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHJvZHVjdDtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNvbm5lY3QoZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiB7XG4gICAgYWN0aXZlUHJvZHVjdDogc3RhdGUucHJvZHVjdHMuYWN0aXZlXG4gIH07XG59KShQcm9kdWN0KTtcblxuLyoqKi8gfSksXG4vKiA4NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3RSb3V0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUHJvZHVjdEl0ZW0gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUHJvZHVjdEl0ZW0sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFByb2R1Y3RJdGVtKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm9kdWN0SXRlbSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFByb2R1Y3RJdGVtLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUHJvZHVjdEl0ZW0pKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQcm9kdWN0SXRlbSwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICB0aXRsZSA9IF9wcm9wcy50aXRsZSxcbiAgICAgICAgICBpZCA9IF9wcm9wcy5pZCxcbiAgICAgICAgICBpbWFnZSA9IF9wcm9wcy5pbWFnZTtcblxuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IGNsYXNzTmFtZTogJ3Byb2R1Y3QtaXRlbScgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdwcm9kdWN0LWl0ZW0taW5uZXInIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBfcmVhY3RSb3V0ZXIuTGluayxcbiAgICAgICAgICAgIHsgdG86ICcvcHJvZHVjdC8nICsgaWQgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogJ3Byb2R1Y3QtaXRlbS1pbWFnZScsIHN0eWxlOiB7IGJhY2tncm91bmRJbWFnZTogJ3VybCgnICsgaW1hZ2UgKyAnKScgfSB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2hyJywgbnVsbCksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnaDYnLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwcm9kdWN0LWl0ZW0tdGl0bGUnIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgX3JlYWN0Um91dGVyLkxpbmssXG4gICAgICAgICAgICAgIHsgdG86ICcvcHJvZHVjdC8nICsgaWQgfSxcbiAgICAgICAgICAgICAgdGl0bGVcbiAgICAgICAgICAgIClcbiAgICAgICAgICApLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2F1dGhvcicgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogJ2F1dGhvcl9fcGhvdG8nLCBzdHlsZTogeyBiYWNrZ3JvdW5kSW1hZ2U6ICd1cmwoJyArIGltYWdlICsgJyknIH0gfSksXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnYXV0aG9yX19pbmZvJyB9LFxuICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBfcmVhY3RSb3V0ZXIuTGluayxcbiAgICAgICAgICAgICAgICB7IHRvOiAnL2F1dGhvci8nIH0sXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnYXV0aG9yX19uYW1lJyB9LFxuICAgICAgICAgICAgICAgICAgJ0phbWVzODgnXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdhdXRob3JfX2xvY2F0aW9uJyB9LFxuICAgICAgICAgICAgICAgICAgJ0NhbnRvbiBPaGlvJ1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHJvZHVjdEl0ZW07XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb2R1Y3RJdGVtO1xuXG4vKioqLyB9KSxcbi8qIDg2ICovLFxuLyogODcgKi8sXG4vKiA4OCAqLyxcbi8qIDg5ICovLFxuLyogOTAgKi8sXG4vKiA5MSAqLyxcbi8qIDkyICovLFxuLyogOTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGNhbWVsMmh5cGhlbiA9IF9fd2VicGFja19yZXF1aXJlX18oMzM3KTtcblxudmFyIGlzRGltZW5zaW9uID0gZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgdmFyIHJlID0gL1toZWlnaHR8d2lkdGhdJC87XG4gIHJldHVybiByZS50ZXN0KGZlYXR1cmUpO1xufTtcblxudmFyIG9iajJtcSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIG1xID0gJyc7XG4gIHZhciBmZWF0dXJlcyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZlYXR1cmVzLmZvckVhY2goZnVuY3Rpb24gKGZlYXR1cmUsIGluZGV4KSB7XG4gICAgdmFyIHZhbHVlID0gb2JqW2ZlYXR1cmVdO1xuICAgIGZlYXR1cmUgPSBjYW1lbDJoeXBoZW4oZmVhdHVyZSk7XG4gICAgLy8gQWRkIHB4IHRvIGRpbWVuc2lvbiBmZWF0dXJlc1xuICAgIGlmIChpc0RpbWVuc2lvbihmZWF0dXJlKSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlICsgJ3B4JztcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICBtcSArPSBmZWF0dXJlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICBtcSArPSAnbm90ICcgKyBmZWF0dXJlO1xuICAgIH0gZWxzZSB7XG4gICAgICBtcSArPSAnKCcgKyBmZWF0dXJlICsgJzogJyArIHZhbHVlICsgJyknO1xuICAgIH1cbiAgICBpZiAoaW5kZXggPCBmZWF0dXJlcy5sZW5ndGgtMSkge1xuICAgICAgbXEgKz0gJyBhbmQgJ1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBtcTtcbn07XG5cbnZhciBqc29uMm1xID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gIHZhciBtcSA9ICcnO1xuICBpZiAodHlwZW9mIHF1ZXJ5ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBxdWVyeTtcbiAgfVxuICAvLyBIYW5kbGluZyBhcnJheSBvZiBtZWRpYSBxdWVyaWVzXG4gIGlmIChxdWVyeSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgcXVlcnkuZm9yRWFjaChmdW5jdGlvbiAocSwgaW5kZXgpIHtcbiAgICAgIG1xICs9IG9iajJtcShxKTtcbiAgICAgIGlmIChpbmRleCA8IHF1ZXJ5Lmxlbmd0aC0xKSB7XG4gICAgICAgIG1xICs9ICcsICdcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbXE7XG4gIH1cbiAgLy8gSGFuZGxpbmcgc2luZ2xlIG1lZGlhIHF1ZXJ5XG4gIHJldHVybiBvYmoybXEocXVlcnkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBqc29uMm1xO1xuXG4vKioqLyB9KSxcbi8qIDk0ICovLFxuLyogOTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgfVxuICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCksXG4gICAgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKiBEZXRlY3QgaWYgcHJvcGVydGllcyBzaGFkb3dpbmcgdGhvc2Ugb24gYE9iamVjdC5wcm90b3R5cGVgIGFyZSBub24tZW51bWVyYWJsZS4gKi9cbnZhciBub25FbnVtU2hhZG93cyA9ICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgJ3ZhbHVlT2YnOiAxIH0sICd2YWx1ZU9mJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAvLyBTYWZhcmkgOC4xIG1ha2VzIGBhcmd1bWVudHMuY2FsbGVlYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICAvLyBTYWZhcmkgOSBtYWtlcyBgYXJndW1lbnRzLmxlbmd0aGAgZW51bWVyYWJsZSBpbiBzdHJpY3QgbW9kZS5cbiAgdmFyIHJlc3VsdCA9IChpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpXG4gICAgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpXG4gICAgOiBbXTtcblxuICB2YXIgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aCxcbiAgICAgIHNraXBJbmRleGVzID0gISFsZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoa2V5ID09ICdsZW5ndGgnIHx8IGlzSW5kZXgoa2V5LCBsZW5ndGgpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICB9XG4gICAgaW5kZXggPSAtMTtcbiAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgfVxuICAgIG90aGVyQXJnc1tzdGFydF0gPSBhcnJheTtcbiAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgPyBzb3VyY2Vba2V5XSA6IG5ld1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgIGxlbmd0aCA9IDE7XG4gICAgfVxuICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHwgcmVJc1VpbnQudGVzdCh2YWx1ZSkpICYmXG4gICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgKSB7XG4gICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIC8vIFNhZmFyaSA4LjEgbWFrZXMgYGFyZ3VtZW50cy5jYWxsZWVgIGVudW1lcmFibGUgaW4gc3RyaWN0IG1vZGUuXG4gIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgKCFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgfHwgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gYXJnc1RhZyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gKiBpcyBhbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDgtOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gaXNPYmplY3QodmFsdWUpID8gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQXNzaWducyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGVcbiAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICogU3Vic2VxdWVudCBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgIGFuZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYE9iamVjdC5hc3NpZ25gXShodHRwczovL21kbi5pby9PYmplY3QvYXNzaWduKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMTAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICogQHNlZSBfLmFzc2lnbkluXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBCYXIoKSB7XG4gKiAgIHRoaXMuYyA9IDM7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gKlxuICogXy5hc3NpZ24oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAqL1xudmFyIGFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gIGlmIChub25FbnVtU2hhZG93cyB8fCBpc1Byb3RvdHlwZShzb3VyY2UpIHx8IGlzQXJyYXlMaWtlKHNvdXJjZSkpIHtcbiAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH1cbiAgfVxufSk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnbjtcblxuXG4vKioqLyB9KSxcbi8qIDk2ICovLFxuLyogOTcgKi8sXG4vKiA5OCAqLyxcbi8qIDk5ICovLFxuLyogMTAwICovLFxuLyogMTAxICovLFxuLyogMTAyICovLFxuLyogMTAzICovLFxuLyogMTA0ICovLFxuLyogMTA1ICovLFxuLyogMTA2ICovLFxuLyogMTA3ICovLFxuLyogMTA4ICovLFxuLyogMTA5ICovLFxuLyogMTEwICovLFxuLyogMTExICovLFxuLyogMTEyICovLFxuLyogMTEzICovLFxuLyogMTE0ICovLFxuLyogMTE1ICovLFxuLyogMTE2ICovLFxuLyogMTE3ICovLFxuLyogMTE4ICovLFxuLyogMTE5ICovLFxuLyogMTIwICovLFxuLyogMTIxICovLFxuLyogMTIyICovLFxuLyogMTIzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmZ1bmN0aW9uIHdhcm4ocykge1xuICBjb25zb2xlLndhcm4oJ1tyZWFjdC1nYV0nLCBzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuO1xuXG5cbi8qKiovIH0pLFxuLyogMTI0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8vIEdBIHN0cmluZ3MgbmVlZCB0byBoYXZlIGxlYWRpbmcvdHJhaWxpbmcgd2hpdGVzcGFjZSB0cmltbWVkLCBhbmQgbm90IGFsbFxuLy8gYnJvd3NlcnMgaGF2ZSBTdHJpbmcucHJvdG90b3lwZS50cmltKCkuXG5cbmZ1bmN0aW9uIHRyaW0ocykge1xuICByZXR1cm4gcy5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHJpbTtcblxuXG4vKioqLyB9KSxcbi8qIDEyNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vKiFcbiAqIEFkYXB0ZWQgZnJvbSBqUXVlcnkgVUkgY29yZVxuICpcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vY2F0ZWdvcnkvdWktY29yZS9cbiAqL1xuXG5mdW5jdGlvbiBmb2N1c2FibGUoZWxlbWVudCwgaXNUYWJJbmRleE5vdE5hTikge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAoL2lucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0Ly50ZXN0KG5vZGVOYW1lKSA/XG4gICAgIWVsZW1lbnQuZGlzYWJsZWQgOlxuICAgIFwiYVwiID09PSBub2RlTmFtZSA/XG4gICAgICBlbGVtZW50LmhyZWYgfHwgaXNUYWJJbmRleE5vdE5hTiA6XG4gICAgICBpc1RhYkluZGV4Tm90TmFOKSAmJiB2aXNpYmxlKGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBoaWRkZW4oZWwpIHtcbiAgcmV0dXJuIChlbC5vZmZzZXRXaWR0aCA8PSAwICYmIGVsLm9mZnNldEhlaWdodCA8PSAwKSB8fFxuICAgIGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJztcbn1cblxuZnVuY3Rpb24gdmlzaWJsZShlbGVtZW50KSB7XG4gIHdoaWxlIChlbGVtZW50KSB7XG4gICAgaWYgKGVsZW1lbnQgPT09IGRvY3VtZW50LmJvZHkpIGJyZWFrO1xuICAgIGlmIChoaWRkZW4oZWxlbWVudCkpIHJldHVybiBmYWxzZTtcbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiB0YWJiYWJsZShlbGVtZW50KSB7XG4gIHZhciB0YWJJbmRleCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpO1xuICBpZiAodGFiSW5kZXggPT09IG51bGwpIHRhYkluZGV4ID0gdW5kZWZpbmVkO1xuICB2YXIgaXNUYWJJbmRleE5hTiA9IGlzTmFOKHRhYkluZGV4KTtcbiAgcmV0dXJuIChpc1RhYkluZGV4TmFOIHx8IHRhYkluZGV4ID49IDApICYmIGZvY3VzYWJsZShlbGVtZW50LCAhaXNUYWJJbmRleE5hTik7XG59XG5cbmZ1bmN0aW9uIGZpbmRUYWJiYWJsZURlc2NlbmRhbnRzKGVsZW1lbnQpIHtcbiAgcmV0dXJuIFtdLnNsaWNlLmNhbGwoZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcqJyksIDApLmZpbHRlcihmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiB0YWJiYWJsZShlbCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbmRUYWJiYWJsZURlc2NlbmRhbnRzO1xuXG5cblxuLyoqKi8gfSksXG4vKiAxMjYgKi8sXG4vKiAxMjcgKi8sXG4vKiAxMjggKi8sXG4vKiAxMjkgKi8sXG4vKiAxMzAgKi8sXG4vKiAxMzEgKi8sXG4vKiAxMzIgKi8sXG4vKiAxMzMgKi8sXG4vKiAxMzQgKi8sXG4vKiAxMzUgKi8sXG4vKiAxMzYgKi8sXG4vKiAxMzcgKi8sXG4vKiAxMzggKi8sXG4vKiAxMzkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICAgIGNsYXNzTmFtZTogJycsXG4gICAgYWNjZXNzaWJpbGl0eTogdHJ1ZSxcbiAgICBhZGFwdGl2ZUhlaWdodDogZmFsc2UsXG4gICAgYXJyb3dzOiB0cnVlLFxuICAgIGF1dG9wbGF5OiBmYWxzZSxcbiAgICBhdXRvcGxheVNwZWVkOiAzMDAwLFxuICAgIGNlbnRlck1vZGU6IGZhbHNlLFxuICAgIGNlbnRlclBhZGRpbmc6ICc1MHB4JyxcbiAgICBjc3NFYXNlOiAnZWFzZScsXG4gICAgY3VzdG9tUGFnaW5nOiBmdW5jdGlvbiBjdXN0b21QYWdpbmcoaSkge1xuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnYnV0dG9uJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBpICsgMVxuICAgICAgICApO1xuICAgIH0sXG4gICAgZG90czogZmFsc2UsXG4gICAgZG90c0NsYXNzOiAnc2xpY2stZG90cycsXG4gICAgZHJhZ2dhYmxlOiB0cnVlLFxuICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgZWRnZUZyaWN0aW9uOiAwLjM1LFxuICAgIGZhZGU6IGZhbHNlLFxuICAgIGZvY3VzT25TZWxlY3Q6IGZhbHNlLFxuICAgIGluZmluaXRlOiB0cnVlLFxuICAgIGluaXRpYWxTbGlkZTogMCxcbiAgICBsYXp5TG9hZDogZmFsc2UsXG4gICAgcGF1c2VPbkhvdmVyOiB0cnVlLFxuICAgIHJlc3BvbnNpdmU6IG51bGwsXG4gICAgcnRsOiBmYWxzZSxcbiAgICBzbGlkZTogJ2RpdicsXG4gICAgc2xpZGVzVG9TaG93OiAxLFxuICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgIHNwZWVkOiA1MDAsXG4gICAgc3dpcGU6IHRydWUsXG4gICAgc3dpcGVUb1NsaWRlOiBmYWxzZSxcbiAgICB0b3VjaE1vdmU6IHRydWUsXG4gICAgdG91Y2hUaHJlc2hvbGQ6IDUsXG4gICAgdXNlQ1NTOiB0cnVlLFxuICAgIHZhcmlhYmxlV2lkdGg6IGZhbHNlLFxuICAgIHZlcnRpY2FsOiBmYWxzZSxcbiAgICB3YWl0Rm9yQW5pbWF0ZTogdHJ1ZSxcbiAgICBhZnRlckNoYW5nZTogbnVsbCxcbiAgICBiZWZvcmVDaGFuZ2U6IG51bGwsXG4gICAgZWRnZUV2ZW50OiBudWxsLFxuICAgIGluaXQ6IG51bGwsXG4gICAgc3dpcGVFdmVudDogbnVsbCxcbiAgICAvLyBuZXh0QXJyb3csIHByZXZBcnJvdyBhcmUgcmVhY3QgY29tcG9uZXRzXG4gICAgbmV4dEFycm93OiBudWxsLFxuICAgIHByZXZBcnJvdzogbnVsbFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0UHJvcHM7XG5cbi8qKiovIH0pLFxuLyogMTQwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmdldFRyYWNrTGVmdCA9IGV4cG9ydHMuZ2V0VHJhY2tBbmltYXRlQ1NTID0gZXhwb3J0cy5nZXRUcmFja0NTUyA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9vYmplY3RBc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX29iamVjdEFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RBc3NpZ24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY2hlY2tTcGVjS2V5cyA9IGZ1bmN0aW9uIGNoZWNrU3BlY0tleXMoc3BlYywga2V5c0FycmF5KSB7XG4gIHJldHVybiBrZXlzQXJyYXkucmVkdWNlKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHNwZWMuaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgfSwgdHJ1ZSkgPyBudWxsIDogY29uc29sZS5lcnJvcignS2V5cyBNaXNzaW5nJywgc3BlYyk7XG59O1xuXG52YXIgZ2V0VHJhY2tDU1MgPSBleHBvcnRzLmdldFRyYWNrQ1NTID0gZnVuY3Rpb24gZ2V0VHJhY2tDU1Moc3BlYykge1xuICBjaGVja1NwZWNLZXlzKHNwZWMsIFsnbGVmdCcsICd2YXJpYWJsZVdpZHRoJywgJ3NsaWRlQ291bnQnLCAnc2xpZGVzVG9TaG93JywgJ3NsaWRlV2lkdGgnXSk7XG5cbiAgdmFyIHRyYWNrV2lkdGgsIHRyYWNrSGVpZ2h0O1xuXG4gIHZhciB0cmFja0NoaWxkcmVuID0gc3BlYy5zbGlkZUNvdW50ICsgMiAqIHNwZWMuc2xpZGVzVG9TaG93O1xuXG4gIGlmICghc3BlYy52ZXJ0aWNhbCkge1xuICAgIGlmIChzcGVjLnZhcmlhYmxlV2lkdGgpIHtcbiAgICAgIHRyYWNrV2lkdGggPSAoc3BlYy5zbGlkZUNvdW50ICsgMiAqIHNwZWMuc2xpZGVzVG9TaG93KSAqIHNwZWMuc2xpZGVXaWR0aDtcbiAgICB9IGVsc2UgaWYgKHNwZWMuY2VudGVyTW9kZSkge1xuICAgICAgdHJhY2tXaWR0aCA9IChzcGVjLnNsaWRlQ291bnQgKyAyICogKHNwZWMuc2xpZGVzVG9TaG93ICsgMSkpICogc3BlYy5zbGlkZVdpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFja1dpZHRoID0gKHNwZWMuc2xpZGVDb3VudCArIDIgKiBzcGVjLnNsaWRlc1RvU2hvdykgKiBzcGVjLnNsaWRlV2lkdGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRyYWNrSGVpZ2h0ID0gdHJhY2tDaGlsZHJlbiAqIHNwZWMuc2xpZGVIZWlnaHQ7XG4gIH1cblxuICB2YXIgc3R5bGUgPSB7XG4gICAgb3BhY2l0eTogMSxcbiAgICBXZWJraXRUcmFuc2Zvcm06ICFzcGVjLnZlcnRpY2FsID8gJ3RyYW5zbGF0ZTNkKCcgKyBzcGVjLmxlZnQgKyAncHgsIDBweCwgMHB4KScgOiAndHJhbnNsYXRlM2QoMHB4LCAnICsgc3BlYy5sZWZ0ICsgJ3B4LCAwcHgpJyxcbiAgICB0cmFuc2Zvcm06ICFzcGVjLnZlcnRpY2FsID8gJ3RyYW5zbGF0ZTNkKCcgKyBzcGVjLmxlZnQgKyAncHgsIDBweCwgMHB4KScgOiAndHJhbnNsYXRlM2QoMHB4LCAnICsgc3BlYy5sZWZ0ICsgJ3B4LCAwcHgpJyxcbiAgICB0cmFuc2l0aW9uOiAnJyxcbiAgICBXZWJraXRUcmFuc2l0aW9uOiAnJyxcbiAgICBtc1RyYW5zZm9ybTogIXNwZWMudmVydGljYWwgPyAndHJhbnNsYXRlWCgnICsgc3BlYy5sZWZ0ICsgJ3B4KScgOiAndHJhbnNsYXRlWSgnICsgc3BlYy5sZWZ0ICsgJ3B4KSdcbiAgfTtcblxuICBpZiAodHJhY2tXaWR0aCkge1xuICAgICgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KShzdHlsZSwgeyB3aWR0aDogdHJhY2tXaWR0aCB9KTtcbiAgfVxuXG4gIGlmICh0cmFja0hlaWdodCkge1xuICAgICgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KShzdHlsZSwgeyBoZWlnaHQ6IHRyYWNrSGVpZ2h0IH0pO1xuICB9XG5cbiAgLy8gRmFsbGJhY2sgZm9yIElFOFxuICBpZiAod2luZG93ICYmICF3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAmJiB3aW5kb3cuYXR0YWNoRXZlbnQpIHtcbiAgICBpZiAoIXNwZWMudmVydGljYWwpIHtcbiAgICAgIHN0eWxlLm1hcmdpbkxlZnQgPSBzcGVjLmxlZnQgKyAncHgnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5tYXJnaW5Ub3AgPSBzcGVjLmxlZnQgKyAncHgnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn07XG5cbnZhciBnZXRUcmFja0FuaW1hdGVDU1MgPSBleHBvcnRzLmdldFRyYWNrQW5pbWF0ZUNTUyA9IGZ1bmN0aW9uIGdldFRyYWNrQW5pbWF0ZUNTUyhzcGVjKSB7XG4gIGNoZWNrU3BlY0tleXMoc3BlYywgWydsZWZ0JywgJ3ZhcmlhYmxlV2lkdGgnLCAnc2xpZGVDb3VudCcsICdzbGlkZXNUb1Nob3cnLCAnc2xpZGVXaWR0aCcsICdzcGVlZCcsICdjc3NFYXNlJ10pO1xuXG4gIHZhciBzdHlsZSA9IGdldFRyYWNrQ1NTKHNwZWMpO1xuICAvLyB1c2VDU1MgaXMgdHJ1ZSBieSBkZWZhdWx0IHNvIGl0IGNhbiBiZSB1bmRlZmluZWRcbiAgc3R5bGUuV2Via2l0VHJhbnNpdGlvbiA9ICctd2Via2l0LXRyYW5zZm9ybSAnICsgc3BlYy5zcGVlZCArICdtcyAnICsgc3BlYy5jc3NFYXNlO1xuICBzdHlsZS50cmFuc2l0aW9uID0gJ3RyYW5zZm9ybSAnICsgc3BlYy5zcGVlZCArICdtcyAnICsgc3BlYy5jc3NFYXNlO1xuICByZXR1cm4gc3R5bGU7XG59O1xuXG52YXIgZ2V0VHJhY2tMZWZ0ID0gZXhwb3J0cy5nZXRUcmFja0xlZnQgPSBmdW5jdGlvbiBnZXRUcmFja0xlZnQoc3BlYykge1xuXG4gIGNoZWNrU3BlY0tleXMoc3BlYywgWydzbGlkZUluZGV4JywgJ3RyYWNrUmVmJywgJ2luZmluaXRlJywgJ2NlbnRlck1vZGUnLCAnc2xpZGVDb3VudCcsICdzbGlkZXNUb1Nob3cnLCAnc2xpZGVzVG9TY3JvbGwnLCAnc2xpZGVXaWR0aCcsICdsaXN0V2lkdGgnLCAndmFyaWFibGVXaWR0aCcsICdzbGlkZUhlaWdodCddKTtcblxuICB2YXIgc2xpZGVPZmZzZXQgPSAwO1xuICB2YXIgdGFyZ2V0TGVmdDtcbiAgdmFyIHRhcmdldFNsaWRlO1xuICB2YXIgdmVydGljYWxPZmZzZXQgPSAwO1xuXG4gIGlmIChzcGVjLmZhZGUpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmIChzcGVjLmluZmluaXRlKSB7XG4gICAgaWYgKHNwZWMuc2xpZGVDb3VudCA+PSBzcGVjLnNsaWRlc1RvU2hvdykge1xuICAgICAgc2xpZGVPZmZzZXQgPSBzcGVjLnNsaWRlV2lkdGggKiBzcGVjLnNsaWRlc1RvU2hvdyAqIC0xO1xuICAgICAgdmVydGljYWxPZmZzZXQgPSBzcGVjLnNsaWRlSGVpZ2h0ICogc3BlYy5zbGlkZXNUb1Nob3cgKiAtMTtcbiAgICB9XG4gICAgaWYgKHNwZWMuc2xpZGVDb3VudCAlIHNwZWMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgIGlmIChzcGVjLnNsaWRlSW5kZXggKyBzcGVjLnNsaWRlc1RvU2Nyb2xsID4gc3BlYy5zbGlkZUNvdW50ICYmIHNwZWMuc2xpZGVDb3VudCA+IHNwZWMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgIGlmIChzcGVjLnNsaWRlSW5kZXggPiBzcGVjLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICBzbGlkZU9mZnNldCA9IChzcGVjLnNsaWRlc1RvU2hvdyAtIChzcGVjLnNsaWRlSW5kZXggLSBzcGVjLnNsaWRlQ291bnQpKSAqIHNwZWMuc2xpZGVXaWR0aCAqIC0xO1xuICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKHNwZWMuc2xpZGVzVG9TaG93IC0gKHNwZWMuc2xpZGVJbmRleCAtIHNwZWMuc2xpZGVDb3VudCkpICogc3BlYy5zbGlkZUhlaWdodCAqIC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gc3BlYy5zbGlkZUNvdW50ICUgc3BlYy5zbGlkZXNUb1Njcm9sbCAqIHNwZWMuc2xpZGVXaWR0aCAqIC0xO1xuICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gc3BlYy5zbGlkZUNvdW50ICUgc3BlYy5zbGlkZXNUb1Njcm9sbCAqIHNwZWMuc2xpZGVIZWlnaHQgKiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcblxuICAgIGlmIChzcGVjLnNsaWRlQ291bnQgJSBzcGVjLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICBpZiAoc3BlYy5zbGlkZUluZGV4ICsgc3BlYy5zbGlkZXNUb1Njcm9sbCA+IHNwZWMuc2xpZGVDb3VudCAmJiBzcGVjLnNsaWRlQ291bnQgPiBzcGVjLnNsaWRlc1RvU2hvdykge1xuICAgICAgICB2YXIgc2xpZGVzVG9PZmZzZXQgPSBzcGVjLnNsaWRlc1RvU2hvdyAtIHNwZWMuc2xpZGVDb3VudCAlIHNwZWMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgIHNsaWRlT2Zmc2V0ID0gc2xpZGVzVG9PZmZzZXQgKiBzcGVjLnNsaWRlV2lkdGg7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHNwZWMuY2VudGVyTW9kZSkge1xuICAgIGlmIChzcGVjLmluZmluaXRlKSB7XG4gICAgICBzbGlkZU9mZnNldCArPSBzcGVjLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKHNwZWMuc2xpZGVzVG9TaG93IC8gMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlT2Zmc2V0ID0gc3BlYy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihzcGVjLnNsaWRlc1RvU2hvdyAvIDIpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghc3BlYy52ZXJ0aWNhbCkge1xuICAgIHRhcmdldExlZnQgPSBzcGVjLnNsaWRlSW5kZXggKiBzcGVjLnNsaWRlV2lkdGggKiAtMSArIHNsaWRlT2Zmc2V0O1xuICB9IGVsc2Uge1xuICAgIHRhcmdldExlZnQgPSBzcGVjLnNsaWRlSW5kZXggKiBzcGVjLnNsaWRlSGVpZ2h0ICogLTEgKyB2ZXJ0aWNhbE9mZnNldDtcbiAgfVxuXG4gIGlmIChzcGVjLnZhcmlhYmxlV2lkdGggPT09IHRydWUpIHtcbiAgICB2YXIgdGFyZ2V0U2xpZGVJbmRleDtcbiAgICBpZiAoc3BlYy5zbGlkZUNvdW50IDw9IHNwZWMuc2xpZGVzVG9TaG93IHx8IHNwZWMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICB0YXJnZXRTbGlkZSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShzcGVjLnRyYWNrUmVmKS5jaGlsZE5vZGVzW3NwZWMuc2xpZGVJbmRleF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldFNsaWRlSW5kZXggPSBzcGVjLnNsaWRlSW5kZXggKyBzcGVjLnNsaWRlc1RvU2hvdztcbiAgICAgIHRhcmdldFNsaWRlID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHNwZWMudHJhY2tSZWYpLmNoaWxkTm9kZXNbdGFyZ2V0U2xpZGVJbmRleF07XG4gICAgfVxuICAgIHRhcmdldExlZnQgPSB0YXJnZXRTbGlkZSA/IHRhcmdldFNsaWRlLm9mZnNldExlZnQgKiAtMSA6IDA7XG4gICAgaWYgKHNwZWMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgaWYgKHNwZWMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgIHRhcmdldFNsaWRlID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHNwZWMudHJhY2tSZWYpLmNoaWxkcmVuW3NwZWMuc2xpZGVJbmRleF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRTbGlkZSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShzcGVjLnRyYWNrUmVmKS5jaGlsZHJlbltzcGVjLnNsaWRlSW5kZXggKyBzcGVjLnNsaWRlc1RvU2hvdyArIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFyZ2V0U2xpZGUpIHtcbiAgICAgICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlLm9mZnNldExlZnQgKiAtMSArIChzcGVjLmxpc3RXaWR0aCAtIHRhcmdldFNsaWRlLm9mZnNldFdpZHRoKSAvIDI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldExlZnQ7XG59O1xuXG4vKioqLyB9KSxcbi8qIDE0MSAqLyxcbi8qIDE0MiAqLyxcbi8qIDE0MyAqLyxcbi8qIDE0NCAqLyxcbi8qIDE0NSAqLyxcbi8qIDE0NiAqLyxcbi8qIDE0NyAqLyxcbi8qIDE0OCAqLyxcbi8qIDE0OSAqLyxcbi8qIDE1MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG50aHJvdyBuZXcgRXJyb3IoXCJNb2R1bGUgcGFyc2UgZmFpbGVkOiAvVXNlcnMvanVsaWFuam9yZ2Vuc2VuL3NpdGVzL3JtYy9hcHAvc3R5bGVzL2FwcC5zY3NzIFVuZXhwZWN0ZWQgY2hhcmFjdGVyICdAJyAoMTowKVxcbllvdSBtYXkgbmVlZCBhbiBhcHByb3ByaWF0ZSBsb2FkZXIgdG8gaGFuZGxlIHRoaXMgZmlsZSB0eXBlLlxcbnwgQGltcG9ydCBcXFwiYmFzZS92YXJpYWJsZXNcXFwiO1xcbnwgXFxufCAvLyBmb3VuZGF0aW9uXCIpO1xuXG4vKioqLyB9KSxcbi8qIDE1MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3RSb3V0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblxudmFyIF9yZWFjdERvY3VtZW50TWV0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG52YXIgX3JlYWN0RG9jdW1lbnRNZXRhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9jdW1lbnRNZXRhKTtcblxudmFyIF9NYWluID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTkpO1xuXG52YXIgX01haW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTWFpbik7XG5cbnZhciBfSW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1OCk7XG5cbnZhciBfSW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSW5kZXgpO1xuXG52YXIgX1Byb2R1Y3RzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjApO1xuXG52YXIgX1Byb2R1Y3RzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Byb2R1Y3RzKTtcblxudmFyIF9Qcm9kdWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NCk7XG5cbnZhciBfUHJvZHVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qcm9kdWN0KTtcblxudmFyIF9Db2xsZWN0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oMTU1KTtcblxudmFyIF9Db2xsZWN0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db2xsZWN0aW9ucyk7XG5cbnZhciBfQ29sbGVjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oODMpO1xuXG52YXIgX0NvbGxlY3Rpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29sbGVjdGlvbik7XG5cbnZhciBfVXBsb2FkID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjEpO1xuXG52YXIgX1VwbG9hZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9VcGxvYWQpO1xuXG52YXIgX09yZGVyU3RhdHVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjcpO1xuXG52YXIgX09yZGVyU3RhdHVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX09yZGVyU3RhdHVzKTtcblxudmFyIF9NYXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2Nik7XG5cbnZhciBfTWFwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01hcCk7XG5cbnZhciBfTG9naW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2NSk7XG5cbnZhciBfTG9naW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTG9naW4pO1xuXG52YXIgX0Fib3V0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjMpO1xuXG52YXIgX0Fib3V0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Fib3V0KTtcblxudmFyIF9Db250YWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjQpO1xuXG52YXIgX0NvbnRhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29udGFjdCk7XG5cbnZhciBfcmVhY3RHYSA9IF9fd2VicGFja19yZXF1aXJlX18oMjcyKTtcblxudmFyIF9yZWFjdEdhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0R2EpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpLFxuICAgIGNvbm5lY3QgPSBfcmVxdWlyZS5jb25uZWN0O1xuXG52YXIgc3RvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KS5jb25maWd1cmUoKTtcblxuLy8gUmVhY3RHQS5pbml0aWFsaXplKCdVQS02MjQxODI1LTknKTsgLy8gaW5pdGlhbGl6ZSBHb29nbGUgQW5hbHl0aWNzXG5cbmZ1bmN0aW9uIGxvZ1BhZ2VWaWV3KGxvY2F0aW9uKSB7XG4gIF9yZWFjdEdhMi5kZWZhdWx0LnNldCh7IHBhZ2U6IGxvY2F0aW9uLnBhdGhuYW1lIH0pO1xuICBfcmVhY3RHYTIuZGVmYXVsdC5wYWdldmlldyhsb2NhdGlvbi5wYXRobmFtZSk7XG59XG5cbl9yZWFjdFJvdXRlci5icm93c2VySGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gIGxvZ1BhZ2VWaWV3KGxvY2F0aW9uKTtcblxuICAvLyBzY3JvbGwgdG8gdG9wIHdoZW4gY2hhbmdpbmcgcGFnZVxuICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gIF9yZWFjdFJvdXRlci5Sb3V0ZXIsXG4gIHsgaGlzdG9yeTogX3JlYWN0Um91dGVyLmJyb3dzZXJIaXN0b3J5IH0sXG4gIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgIF9yZWFjdFJvdXRlci5Sb3V0ZSxcbiAgICB7IHBhdGg6ICcvJywgY29tcG9uZW50OiBfTWFpbjIuZGVmYXVsdCB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJvdXRlci5JbmRleFJvdXRlLCB7IHBhdGg6ICcvJywgY29tcG9uZW50OiBfSW5kZXgyLmRlZmF1bHQgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Um91dGVyLlJvdXRlLCB7IHBhdGg6ICdjb2xsZWN0aW9ucycsIGNvbXBvbmVudDogX0NvbGxlY3Rpb25zMi5kZWZhdWx0IH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJvdXRlci5Sb3V0ZSwgeyBwYXRoOiAnY29sbGVjdGlvbi86Y29sbGVjdGlvbklkJywgY29tcG9uZW50OiBfQ29sbGVjdGlvbjIuZGVmYXVsdCB9KSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RSb3V0ZXIuUm91dGUsIHsgcGF0aDogJ3Byb2R1Y3RzJywgY29tcG9uZW50OiBfUHJvZHVjdHMyLmRlZmF1bHQgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Um91dGVyLlJvdXRlLCB7IHBhdGg6ICdwcm9kdWN0Lzpwcm9kdWN0SWQnLCBjb21wb25lbnQ6IF9Qcm9kdWN0Mi5kZWZhdWx0IH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJvdXRlci5Sb3V0ZSwgeyBwYXRoOiAnbXktY2l0eScsIGNvbXBvbmVudDogX1Byb2R1Y3RzMi5kZWZhdWx0IH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJvdXRlci5Sb3V0ZSwgeyBwYXRoOiAndXBsb2FkJywgY29tcG9uZW50OiBfVXBsb2FkMi5kZWZhdWx0IH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJvdXRlci5Sb3V0ZSwgeyBwYXRoOiAnb3JkZXItc3RhdHVzJywgY29tcG9uZW50OiBfT3JkZXJTdGF0dXMyLmRlZmF1bHQgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Um91dGVyLlJvdXRlLCB7IHBhdGg6ICdtYXAnLCBjb21wb25lbnQ6IF9NYXAyLmRlZmF1bHQgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Um91dGVyLlJvdXRlLCB7IHBhdGg6ICdsb2dpbicsIGNvbXBvbmVudDogX0xvZ2luMi5kZWZhdWx0IH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJvdXRlci5Sb3V0ZSwgeyBwYXRoOiAnYWJvdXQnLCBjb21wb25lbnQ6IF9BYm91dDIuZGVmYXVsdCB9KSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RSb3V0ZXIuUm91dGUsIHsgcGF0aDogJ2NvbnRhY3QnLCBjb21wb25lbnQ6IF9Db250YWN0Mi5kZWZhdWx0IH0pXG4gIClcbik7XG5cbi8vIGNvbnN0IGNvbXBvbmVudFJvdXRlcyA9IHtcbi8vICAgY29tcG9uZW50OiAnTWFpbicsXG4vLyAgIHBhdGg6ICcvJyxcbi8vICAgaW5kZXhSb3V0ZTogeyBjb21wb25lbnQ6ICdJbmRleCcgfSxcbi8vICAgY2hpbGRSb3V0ZXM6IFtcbi8vICAgICB7XG4vLyAgICAgICBwYXRoOiAnY29sbGVjdGlvbnMnLFxuLy8gICAgICAgZ2V0Q29tcG9uZW50KGxvY2F0aW9uLCBjYikge1xuLy8gICAgICAgICBTeXN0ZW0uaW1wb3J0KCdDb2xsZWN0aW9ucycpXG4vLyAgICAgICAgICAgLnRoZW4obW9kdWxlID0+IGNiKG51bGwsIG1vZHVsZS5kZWZhdWx0KSk7XG4vLyAgICAgICB9XG4vLyAgICAgfSxcbi8vICAgICB7XG4vLyAgICAgICBwYXRoOiAnY29sbGVjdGlvbi86Y29sbGVjdGlvbklkJyxcbi8vICAgICAgIGdldENvbXBvbmVudChsb2NhdGlvbiwgY2IpIHtcbi8vICAgICAgICAgU3lzdGVtLmltcG9ydCgnQ29sbGVjdGlvbicpXG4vLyAgICAgICAgICAgLnRoZW4obW9kdWxlID0+IGNiKG51bGwsIG1vZHVsZS5kZWZhdWx0KSk7XG4vLyAgICAgICB9XG4vLyAgICAgfSxcbi8vICAgICB7XG4vLyAgICAgICBwYXRoOiAncHJvZHVjdHMnLFxuLy8gICAgICAgZ2V0Q29tcG9uZW50KGxvY2F0aW9uLCBjYikge1xuLy8gICAgICAgICBTeXN0ZW0uaW1wb3J0KCdQcm9kdWN0cycpXG4vLyAgICAgICAgICAgLnRoZW4obW9kdWxlID0+IGNiKG51bGwsIG1vZHVsZS5kZWZhdWx0KSk7XG4vLyAgICAgICB9XG4vLyAgICAgfSxcbi8vICAgICB7XG4vLyAgICAgICBwYXRoOiAncHJvZHVjdC9wcm9kdWN0SWQnLFxuLy8gICAgICAgZ2V0Q29tcG9uZW50KGxvY2F0aW9uLCBjYikge1xuLy8gICAgICAgICBTeXN0ZW0uaW1wb3J0KCdQcm9kdWN0Jylcbi8vICAgICAgICAgICAudGhlbihtb2R1bGUgPT4gY2IobnVsbCwgbW9kdWxlLmRlZmF1bHQpKTtcbi8vICAgICAgIH1cbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgIHBhdGg6ICdteS1jaXR5Jyxcbi8vICAgICAgIGdldENvbXBvbmVudChsb2NhdGlvbiwgY2IpIHtcbi8vICAgICAgICAgU3lzdGVtLmltcG9ydCgnUHJvZHVjdHMnKVxuLy8gICAgICAgICAgIC50aGVuKG1vZHVsZSA9PiBjYihudWxsLCBtb2R1bGUuZGVmYXVsdCkpO1xuLy8gICAgICAgfVxuLy8gICAgIH0sXG4vLyAgICAge1xuLy8gICAgICAgcGF0aDogJ2Fib3V0Jyxcbi8vICAgICAgIGdldENvbXBvbmVudChsb2NhdGlvbiwgY2IpIHtcbi8vICAgICAgICAgU3lzdGVtLmltcG9ydCgnQWJvdXQnKVxuLy8gICAgICAgICAgIC50aGVuKG1vZHVsZSA9PiBjYihudWxsLCBtb2R1bGUuZGVmYXVsdCkpO1xuLy8gICAgICAgfVxuLy8gICAgIH0sXG4vLyAgICAge1xuLy8gICAgICAgcGF0aDogJ2NvbnRhY3QnLFxuLy8gICAgICAgZ2V0Q29tcG9uZW50KGxvY2F0aW9uLCBjYikge1xuLy8gICAgICAgICBTeXN0ZW0uaW1wb3J0KCdDb250YWN0Jylcbi8vICAgICAgICAgICAudGhlbihtb2R1bGUgPT4gY2IobnVsbCwgbW9kdWxlLmRlZmF1bHQpKTtcbi8vICAgICAgIH1cbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgIHBhdGg6ICd1cGxvYWQnLFxuLy8gICAgICAgZ2V0Q29tcG9uZW50KGxvY2F0aW9uLCBjYikge1xuLy8gICAgICAgICBTeXN0ZW0uaW1wb3J0KCdVcGxvYWQnKVxuLy8gICAgICAgICAgIC50aGVuKG1vZHVsZSA9PiBjYihudWxsLCBtb2R1bGUuZGVmYXVsdCkpO1xuLy8gICAgICAgfVxuLy8gICAgIH0sXG4vLyAgICAge1xuLy8gICAgICAgcGF0aDogJ21hcCcsXG4vLyAgICAgICBnZXRDb21wb25lbnQobG9jYXRpb24sIGNiKSB7XG4vLyAgICAgICAgIFN5c3RlbS5pbXBvcnQoJ01hcCcpXG4vLyAgICAgICAgICAgLnRoZW4obW9kdWxlID0+IGNiKG51bGwsIG1vZHVsZS5kZWZhdWx0KSk7XG4vLyAgICAgICB9XG4vLyAgICAgfSxcbi8vICAgICB7XG4vLyAgICAgICBwYXRoOiAnbG9naW4nLFxuLy8gICAgICAgZ2V0Q29tcG9uZW50KGxvY2F0aW9uLCBjYikge1xuLy8gICAgICAgICBTeXN0ZW0uaW1wb3J0KCdMb2dpbicpXG4vLyAgICAgICAgICAgLnRoZW4obW9kdWxlID0+IGNiKG51bGwsIG1vZHVsZS5kZWZhdWx0KSk7XG4vLyAgICAgICB9XG4vLyAgICAgfSxcbi8vICAgICB7XG4vLyAgICAgICBwYXRoOiAnb3JkZXItc3RhdHVzJyxcbi8vICAgICAgIGdldENvbXBvbmVudChsb2NhdGlvbiwgY2IpIHtcbi8vICAgICAgICAgU3lzdGVtLmltcG9ydCgnT3JkZXJTdGF0dXMnKVxuLy8gICAgICAgICAgIC50aGVuKG1vZHVsZSA9PiBjYihudWxsLCBtb2R1bGUuZGVmYXVsdCkpO1xuLy8gICAgICAgfVxuLy8gICAgIH1cbi8vICAgXVxuLy8gfTtcblxuLyoqKi8gfSksXG4vKiAxNTIgKi8sXG4vKiAxNTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2Zvcm1hdCA9IF9fd2VicGFja19yZXF1aXJlX18oNTEpO1xuXG52YXIgX2Zvcm1hdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mb3JtYXQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oOCksXG4gICAgY29ubmVjdCA9IF9yZXF1aXJlLmNvbm5lY3Q7XG5cbnZhciBhY3Rpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cbnZhciBDYXJ0SXRlbSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDYXJ0SXRlbSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2FydEl0ZW0oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhcnRJdGVtKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ2FydEl0ZW0uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDYXJ0SXRlbSkpLmNhbGwodGhpcykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENhcnRJdGVtLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGRpc3BhdGNoID0gX3Byb3BzLmRpc3BhdGNoLFxuICAgICAgICAgIGl0ZW0gPSBfcHJvcHMuaXRlbSxcbiAgICAgICAgICBpbmNyZW1lbnRMaW5lSXRlbSA9IF9wcm9wcy5pbmNyZW1lbnRMaW5lSXRlbSxcbiAgICAgICAgICBxdWFudGl0eSA9IF9wcm9wcy5xdWFudGl0eTtcblxuXG4gICAgICB2YXIgY2hhbmdlUXVhbnRpdHkgPSBmdW5jdGlvbiBjaGFuZ2VRdWFudGl0eShxdWFudGl0eSkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnY2FydCBJdGVtIG9iamVjdDogJywgaXRlbSk7XG4gICAgICAgIGRpc3BhdGNoKGFjdGlvbnMuc3RhcnRBZGRvclVwZGF0ZUNhcnRJdGVtKGl0ZW0sIHBhcnNlSW50KHF1YW50aXR5KSkpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdjYXJ0LWl0ZW0nIH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogJ2NhcnQtaXRlbV9faW1nJywgc3R5bGU6IHsgYmFja2dyb3VuZEltYWdlOiAndXJsKCcgKyBpdGVtLmltYWdlVmFyaWFudHNbMl0uc3JjICsgJyknIH0gfSksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY2FydC1pdGVtX19jb250ZW50JyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2NhcnQtaXRlbV9fY29udGVudC1yb3cnIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY2FydC1pdGVtX192YXJpYW50LXRpdGxlJyB9LFxuICAgICAgICAgICAgICBpdGVtLnZhcmlhbnRfdGl0bGVcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2NhcnQtaXRlbV9fdGl0bGUnIH0sXG4gICAgICAgICAgICAgIGl0ZW0udGl0bGVcbiAgICAgICAgICAgIClcbiAgICAgICAgICApLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2NhcnQtaXRlbV9fY29udGVudC1yb3cnIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY2FydC1pdGVtX19xdWFudGl0eS1jb250YWluZXInIH0sXG4gICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdidXR0b24nLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2J0bi0tc2VhbWxlc3MgcXVhbnRpdHktZGVjcmVtZW50JyxcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICdidXR0b24nLFxuICAgICAgICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlUXVhbnRpdHkoLTEpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgJy0nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnaGlkZScgfSxcbiAgICAgICAgICAgICAgICAgICdEZWNyZW1lbnQnXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHF1YW50aXR5LFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2NhcnQtaXRlbV9fcXVhbnRpdHknLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIG1pbjogJzAnLFxuICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnYnV0dG9uJyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdidG4tLXNlYW1sZXNzIHF1YW50aXR5LWluY3JlbWVudCcsXG4gICAgICAgICAgICAgICAgICB0eXBlOiAnYnV0dG9uJyxcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZVF1YW50aXR5KDEpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgJysnXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnaGlkZScgfSxcbiAgICAgICAgICAgICAgICAgICdJbmNyZW1lbnQnXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdjYXJ0LWl0ZW1fX3ByaWNlJyB9LFxuICAgICAgICAgICAgICBfZm9ybWF0Mi5kZWZhdWx0LmFzTW9uZXkoaXRlbS5wcmljZSAqIHF1YW50aXR5KVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ2FydEl0ZW07XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjb25uZWN0KGZ1bmN0aW9uIChzdGF0ZSkge1xuICByZXR1cm4ge1xuICAgIGNhcnQ6IHN0YXRlLmNhcnRcbiAgfTtcbn0pKENhcnRJdGVtKTtcblxuLyoqKi8gfSksXG4vKiAxNTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Um91dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIENvbGxlY3Rpb25JdGVtID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENvbGxlY3Rpb25JdGVtLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDb2xsZWN0aW9uSXRlbSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29sbGVjdGlvbkl0ZW0pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDb2xsZWN0aW9uSXRlbS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbGxlY3Rpb25JdGVtKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ29sbGVjdGlvbkl0ZW0sIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgdGl0bGUgPSBfcHJvcHMudGl0bGUsXG4gICAgICAgICAgaWQgPSBfcHJvcHMuaWQ7XG5cblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdjb2xsZWN0aW9uLWl0ZW0nIH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY29sbGVjdGlvbi1pdGVtLWlubmVyJyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2gyJyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgX3JlYWN0Um91dGVyLkxpbmssXG4gICAgICAgICAgICAgIHsgdG86ICcvY29sbGVjdGlvbi8nICsgaWQgfSxcbiAgICAgICAgICAgICAgdGl0bGVcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENvbGxlY3Rpb25JdGVtO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb2xsZWN0aW9uSXRlbTtcblxuLyoqKi8gfSksXG4vKiAxNTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX0NvbGxlY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgzKTtcblxudmFyIF9Db2xsZWN0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbGxlY3Rpb24pO1xuXG52YXIgX0NvbGxlY3Rpb25JdGVtID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTQpO1xuXG52YXIgX0NvbGxlY3Rpb25JdGVtMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbGxlY3Rpb25JdGVtKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpLFxuICAgIGNvbm5lY3QgPSBfcmVxdWlyZS5jb25uZWN0O1xuXG52YXIgYWN0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oNDcpO1xuXG52YXIgQ29sbGVjdGlvbnMgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ29sbGVjdGlvbnMsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENvbGxlY3Rpb25zKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xsZWN0aW9ucyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENvbGxlY3Rpb25zLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29sbGVjdGlvbnMpKS5jYWxsKHRoaXMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb2xsZWN0aW9ucywgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgY29sbGVjdGlvbnMgPSB0aGlzLnByb3BzLmNvbGxlY3Rpb25zO1xuXG5cbiAgICAgIGlmIChjb2xsZWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ3JvdycgfSxcbiAgICAgICAgICBjb2xsZWN0aW9ucy5tYXAoZnVuY3Rpb24gKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQ29sbGVjdGlvbkl0ZW0yLmRlZmF1bHQsIHsga2V5OiBjb2xsZWN0aW9uLmNvbGxlY3Rpb25faWQsIGlkOiBjb2xsZWN0aW9uLmNvbGxlY3Rpb25faWQsIHRpdGxlOiBjb2xsZWN0aW9uLnRpdGxlIH0pO1xuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICAnTG9hZGluZyBjb2xsZWN0aW9ucy4uLidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29sbGVjdGlvbnM7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjb25uZWN0KGZ1bmN0aW9uIChzdGF0ZSkge1xuICByZXR1cm4ge1xuICAgIGNvbGxlY3Rpb25zOiBzdGF0ZS5jb2xsZWN0aW9ucy5hbGxcbiAgfTtcbn0pKENvbGxlY3Rpb25zKTtcblxuLyoqKi8gfSksXG4vKiAxNTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Um91dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEZvb3RlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhGb290ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZvb3RlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9vdGVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRm9vdGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRm9vdGVyKSkuY2FsbCh0aGlzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRm9vdGVyLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2Zvb3RlcicsXG4gICAgICAgIHsgaWQ6ICdzaXRlLWZvb3RlcicgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ25hdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdmb290ZXItbmF2JyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgX3JlYWN0Um91dGVyLkxpbmssXG4gICAgICAgICAgICAgIHsgdG86ICcvYWJvdXQnLCBhY3RpdmVDbGFzc05hbWU6ICdhY3RpdmUnIH0sXG4gICAgICAgICAgICAgICdBYm91dCdcbiAgICAgICAgICAgIClcbiAgICAgICAgICApLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgX3JlYWN0Um91dGVyLkxpbmssXG4gICAgICAgICAgICAgIHsgdG86ICcvcHJvZHVjdHMnLCBhY3RpdmVDbGFzc05hbWU6ICdhY3RpdmUnIH0sXG4gICAgICAgICAgICAgICdTaG9wIEFsbCdcbiAgICAgICAgICAgIClcbiAgICAgICAgICApLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgX3JlYWN0Um91dGVyLkxpbmssXG4gICAgICAgICAgICAgIHsgdG86ICcvY29udGFjdCcsIGFjdGl2ZUNsYXNzTmFtZTogJ2FjdGl2ZScgfSxcbiAgICAgICAgICAgICAgJ0NvbnRhY3QnXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIF9yZWFjdFJvdXRlci5MaW5rLFxuICAgICAgICAgICAgICB7IHRvOiAnL3VwbG9hZCcsIGFjdGl2ZUNsYXNzTmFtZTogJ2FjdGl2ZScgfSxcbiAgICAgICAgICAgICAgJ1VwbG9hZCBEZXNpZ24nXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAncCcsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sYXIgc2l0IGFtaXQuIFNlZCBkb25vIGF2ZWMuJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBGb290ZXI7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZvb3RlcjtcblxuLyoqKi8gfSksXG4vKiAxNTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Um91dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KSxcbiAgICBjb25uZWN0ID0gX3JlcXVpcmUuY29ubmVjdDtcblxudmFyIGNhcnRBY3Rpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cbnZhciBIZWFkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSGVhZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIZWFkZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhlYWRlcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEhlYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEhlYWRlcikpLmNhbGwodGhpcykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEhlYWRlciwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBkaXNwYXRjaCA9IF9wcm9wcy5kaXNwYXRjaCxcbiAgICAgICAgICBjYXJ0SXRlbXMgPSBfcHJvcHMuY2FydEl0ZW1zO1xuXG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2hlYWRlcicsXG4gICAgICAgIHsgaWQ6ICdzaXRlLWhlYWRlcicgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3VsJyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ21pbmktbmF2JyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnbWluaS1uYXYtaXRlbScgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBfcmVhY3RSb3V0ZXIuTGluayxcbiAgICAgICAgICAgICAgeyB0bzogJy9hYm91dCcsIGFjdGl2ZUNsYXNzTmFtZTogJ2FjdGl2ZScgfSxcbiAgICAgICAgICAgICAgJ0Fib3V0J1xuICAgICAgICAgICAgKVxuICAgICAgICAgICksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdtaW5pLW5hdi1pdGVtJyB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIF9yZWFjdFJvdXRlci5MaW5rLFxuICAgICAgICAgICAgICB7IHRvOiAnL29yZGVyLXN0YXR1cycsIGFjdGl2ZUNsYXNzTmFtZTogJ2FjdGl2ZScgfSxcbiAgICAgICAgICAgICAgJ09yZGVyIFN0YXR1cydcbiAgICAgICAgICAgIClcbiAgICAgICAgICApLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnbWluaS1uYXYtaXRlbScgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBfcmVhY3RSb3V0ZXIuTGluayxcbiAgICAgICAgICAgICAgeyB0bzogJy9tYXAnLCBhY3RpdmVDbGFzc05hbWU6ICdhY3RpdmUnIH0sXG4gICAgICAgICAgICAgICdNYXAnXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ21pbmktbmF2LWl0ZW0nIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgX3JlYWN0Um91dGVyLkxpbmssXG4gICAgICAgICAgICAgIHsgdG86ICcvbG9naW4nLCBhY3RpdmVDbGFzc05hbWU6ICdhY3RpdmUnIH0sXG4gICAgICAgICAgICAgICdMb2dpbidcbiAgICAgICAgICAgIClcbiAgICAgICAgICApLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnbWluaS1uYXYtaXRlbSBtaW5pLW5hdi1pdGVtLWNhcnQnLCBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKGNhcnRBY3Rpb25zLm9wZW5DYXJ0KCkpO1xuICAgICAgICAgICAgICB9IH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaScsIHsgY2xhc3NOYW1lOiAnZmEgZmEtc2hvcHBpbmctY2FydCcgfSksXG4gICAgICAgICAgICAnICcsXG4gICAgICAgICAgICBjYXJ0SXRlbXMgPiAwID8gJ1snICsgY2FydEl0ZW1zICsgJ10nIDogJydcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgaWQ6ICdzaXRlLWxvZ28nIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBfcmVhY3RSb3V0ZXIuSW5kZXhMaW5rLFxuICAgICAgICAgICAgeyB0bzogJy8nLCBhY3RpdmVDbGFzc05hbWU6ICdhY3RpdmUnLCBhY3RpdmVTdHlsZTogeyBmb250V2VpZ2h0OiAnYm9sZCcgfSB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2ltZycsIHsgc3JjOiAnL2ltYWdlcy9sb2dvLnBuZycgfSlcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICduYXYnLFxuICAgICAgICAgIHsgaWQ6ICdzaXRlLW5hdicgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3NpdGUtbmF2LWl0ZW0nIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgX3JlYWN0Um91dGVyLkxpbmssXG4gICAgICAgICAgICAgIHsgdG86ICcvcHJvZHVjdHMnLCBhY3RpdmVDbGFzc05hbWU6ICdhY3RpdmUnIH0sXG4gICAgICAgICAgICAgICdTaG9wJ1xuICAgICAgICAgICAgKVxuICAgICAgICAgICksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdzaXRlLW5hdi1pdGVtJyB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIF9yZWFjdFJvdXRlci5MaW5rLFxuICAgICAgICAgICAgICB7IHRvOiAnL215LWNpdHknLCBhY3RpdmVDbGFzc05hbWU6ICdhY3RpdmUnIH0sXG4gICAgICAgICAgICAgICdNeSBDaXR5J1xuICAgICAgICAgICAgKVxuICAgICAgICAgICksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdzaXRlLW5hdi1pdGVtJyB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIF9yZWFjdFJvdXRlci5MaW5rLFxuICAgICAgICAgICAgICB7IHRvOiAnL2NhdGVnb3JpZXMnLCBhY3RpdmVDbGFzc05hbWU6ICdhY3RpdmUnIH0sXG4gICAgICAgICAgICAgICdDYXRlZ29yaWVzJ1xuICAgICAgICAgICAgKVxuICAgICAgICAgICksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgaWQ6ICdzaXRlLW5hdi11cGxvYWQnIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgX3JlYWN0Um91dGVyLkxpbmssXG4gICAgICAgICAgICAgIHsgdG86ICcvdXBsb2FkJyB9LFxuICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaW1nJywgeyBzcmM6ICcvaW1hZ2VzL3VwbG9hZC5wbmcnIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBIZWFkZXI7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjb25uZWN0KGZ1bmN0aW9uIChzdGF0ZSkge1xuICByZXR1cm4ge1xuICAgIGNhcnRJdGVtczogc3RhdGUuY2FydC5saW5lSXRlbXNDb3VudFxuICB9O1xufSkoSGVhZGVyKTtcblxuLyoqKi8gfSksXG4vKiAxNTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0U2xpY2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxMyk7XG5cbnZhciBfcmVhY3RTbGljazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdFNsaWNrKTtcblxudmFyIF9yZWFjdFJvdXRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXG52YXIgX0xvYWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oNTApO1xuXG52YXIgX0xvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2FkZXIpO1xuXG52YXIgX1Byb2R1Y3RJdGVtID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSk7XG5cbnZhciBfUHJvZHVjdEl0ZW0yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUHJvZHVjdEl0ZW0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oOCksXG4gICAgY29ubmVjdCA9IF9yZXF1aXJlLmNvbm5lY3Q7XG5cbnZhciBhY3Rpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cbnZhciBJbmRleCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhJbmRleCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW5kZXgoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEluZGV4KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoSW5kZXguX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJbmRleCkpLmNhbGwodGhpcykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEluZGV4LCBbe1xuICAgIGtleTogJ2hhbmRsZUFkZFRvQ2FydCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUFkZFRvQ2FydChwcm9kdWN0KSB7XG4gICAgICB2YXIgZGlzcGF0Y2ggPSB0aGlzLnByb3BzLmRpc3BhdGNoO1xuXG4gICAgICBkaXNwYXRjaChhY3Rpb25zLnN0YXJ0QWRkb3JVcGRhdGVDYXJ0SXRlbShwcm9kdWN0LnNlbGVjdGVkVmFyaWFudCwgMSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgcHJvZHVjdHMgPSB0aGlzLnByb3BzLnByb2R1Y3RzO1xuXG4gICAgICBwcm9kdWN0cyA9IHByb2R1Y3RzLnNsaWNlKDAsIDEyKTtcblxuICAgICAgLy8gc2xpZGVyIHNldHRpbmdzXG4gICAgICB2YXIgc2V0dGluZ3MgPSB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2NlbnRlciBwcm9kdWN0cy1jYXJvdXNlbCcsXG4gICAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgICBjZW50ZXJQYWRkaW5nOiAnNjBweCcsXG4gICAgICAgIGF1dG9wbGF5OiB0cnVlLFxuICAgICAgICBzbGlkZXNUb1Nob3c6IDQsXG4gICAgICAgIHNwZWVkOiA1MDAsXG4gICAgICAgIGFycm93czogZmFsc2UsXG4gICAgICAgIGxhenlMb2FkOiB0cnVlLFxuICAgICAgICByZXNwb25zaXZlOiBbe1xuICAgICAgICAgIGJyZWFrcG9pbnQ6IDEwMjQsXG4gICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMyxcbiAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAzLFxuICAgICAgICAgICAgaW5maW5pdGU6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBicmVha3BvaW50OiA2MDAsXG4gICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMixcbiAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAyLFxuICAgICAgICAgICAgaW5pdGlhbFNsaWRlOiAyXG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgYnJlYWtwb2ludDogNDgwLFxuICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMVxuICAgICAgICAgIH1cbiAgICAgICAgfV1cbiAgICAgIH07XG5cbiAgICAgIGlmIChwcm9kdWN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgX3JlYWN0U2xpY2syLmRlZmF1bHQsXG4gICAgICAgICAgICBzZXR0aW5ncyxcbiAgICAgICAgICAgIHByb2R1Y3RzLm1hcChmdW5jdGlvbiAocHJvZHVjdCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHsga2V5OiBpbmRleCwgY2xhc3NOYW1lOiAncHJvZHVjdHMtY2Fyb3VzZWwtaXRlbScgfSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgIF9yZWFjdFJvdXRlci5MaW5rLFxuICAgICAgICAgICAgICAgICAgeyB0bzogJy9wcm9kdWN0LycgKyBwcm9kdWN0LmF0dHJzLnByb2R1Y3RfaWQgfSxcbiAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogJ3Byb2R1Y3QtaXRlbS1pbWFnZScsIHN0eWxlOiB7IGJhY2tncm91bmRJbWFnZTogJ3VybCgnICsgcHJvZHVjdC5zZWxlY3RlZFZhcmlhbnQuaW1hZ2VWYXJpYW50c1s1XS5zcmMgKyAnKScgfSB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdzZWN0aW9uJyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnc2VjdGlvbi1jYWxsb3V0JyB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2NvbnRhaW5lcicgfSxcbiAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2g0JyxcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3NlY3Rpb24taGVhZGxpbmUnIH0sXG4gICAgICAgICAgICAgICAgJ1Nob3cgeW91ciBwcmlkZS4gRGlzcGxheSB5b3VyIHRhbGVudHMuICcsXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2ZvbnQtd2hpdGUnIH0sXG4gICAgICAgICAgICAgICAgICAnUmVwIHlvdXIgY2l0eS4nXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAncCcsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gTnVsbGFtIHNlbXBlciBudWxsYSB2ZWwgZWxpdCBncmF2aWRhLCB2ZWwgcGxhY2VyYXQgdHVycGlzIGNvbnZhbGxpcy4gUHJhZXNlbnQgZXUgbG9yZW0gc3VzY2lwaXQsIGdyYXZpZGEgbGVvIHNlZCwgbHVjdHVzIGVyYXQuIE51bGxhbSBjb25zZWN0ZXR1ciwgdG9ydG9yIGEgZmFjaWxpc2lzIGxvYm9ydGlzLCB2ZWxpdCBtYXNzYSBtYXR0aXMgcmlzdXMsIGVnZXQgaW1wZXJkaWV0IHZlbGl0IGFyY3Ugbm9uIG1hdXJpcy4gTWF1cmlzIGJpYmVuZHVtIGJpYmVuZHVtIGxpZ3VsYSwgbmVjIG1heGltdXMgc2FwaWVuIHBvcnRhIG5vbi4nXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnc2VjdGlvbi1jYWxsb3V0X19jdGEtaXRlbXMnIH0sXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICBfcmVhY3RSb3V0ZXIuTGluayxcbiAgICAgICAgICAgICAgICAgIHsgdG86ICcvcHJvZHVjdHMnIH0sXG4gICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaW1nJywgeyBzcmM6ICcvaW1hZ2VzL2J1dHRvbi1zaG9wLnBuZycsIGFsdDogJ1Nob3Agbm93JyB9KVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnc2VhcmNoLWJveCcgfSxcbiAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpJywgeyBjbGFzc05hbWU6ICdmYSBmYS1zZWFyY2gnIH0pLFxuICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgeyB0eWVwOiAndGV4dCcsIHBsYWNlaG9sZGVyOiAnS2V5d29yZCBTZWFyY2gnIH0pXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgIF9yZWFjdFJvdXRlci5MaW5rLFxuICAgICAgICAgICAgICAgICAgeyB0bzogJy91cGxvYWQnIH0sXG4gICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaW1nJywgeyBzcmM6ICcvaW1hZ2VzL2J1dHRvbi11cGxvYWQucG5nJywgYWx0OiAnU2hvcCBub3cnIH0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdjb250YWluZXInIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2gzJyxcbiAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwcm9kdWN0cy1ncmlkLXRpdGxlJyB9LFxuICAgICAgICAgICAgICAnV2hhdFxcJ3MgaG90IC8gV2hhdFxcJ3MgbmV3J1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwcm9kdWN0cy1ncmlkJyB9LFxuICAgICAgICAgICAgICBwcm9kdWN0cy5tYXAoZnVuY3Rpb24gKHByb2R1Y3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1Byb2R1Y3RJdGVtMi5kZWZhdWx0LCB7IGtleTogcHJvZHVjdC5rZXksIGFkZFRvQ2FydDogZnVuY3Rpb24gYWRkVG9DYXJ0KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmhhbmRsZUFkZFRvQ2FydChwcm9kdWN0KTtcbiAgICAgICAgICAgICAgICAgIH0sIGlkOiBwcm9kdWN0LmF0dHJzLnByb2R1Y3RfaWQsIHRpdGxlOiBwcm9kdWN0LmF0dHJzLnRpdGxlLCBpbWFnZTogcHJvZHVjdC5zZWxlY3RlZFZhcmlhbnQuaW1hZ2VWYXJpYW50c1s1XS5zcmMgfSk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Mb2FkZXIyLmRlZmF1bHQsIG51bGwpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJbmRleDtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNvbm5lY3QoZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiB7XG4gICAgcHJvZHVjdHM6IHN0YXRlLnByb2R1Y3RzLmFsbFxuICB9O1xufSkoSW5kZXgpO1xuXG4vKioqLyB9KSxcbi8qIDE1OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfSGVhZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTcpO1xuXG52YXIgX0hlYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9IZWFkZXIpO1xuXG52YXIgX0Zvb3RlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTU2KTtcblxudmFyIF9Gb290ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRm9vdGVyKTtcblxudmFyIF9yZWFjdERvY3VtZW50TWV0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG52YXIgX3JlYWN0RG9jdW1lbnRNZXRhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9jdW1lbnRNZXRhKTtcblxudmFyIF9jYXJ0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjIpO1xuXG52YXIgX2NhcnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FydCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIE1haW4gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWFpbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWFpbihwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYWluKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChNYWluLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTWFpbikpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgdGl0bGU6ICcnLFxuICAgICAgY29udGVudDogJydcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNYWluLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBtZXRhID0ge1xuICAgICAgICB0aXRsZTogJ1JlcCBZb3VyIENpdHknLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1JlcCBZb3VyIENpdHkgZGVzY3JpcHRpb24nLFxuICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgY2hhcnNldDogJ3V0Zi04J1xuICAgICAgICB9LFxuICAgICAgICBhdXRvOiB7XG4gICAgICAgICAgb2dyYXBoOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBwYWdlTmFtZSA9IHRoaXMucHJvcHMubG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKDEpLnNwbGl0KCcvJyk7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgaWQ6ICdtYWluJywgY2xhc3NOYW1lOiAncGFnZS0nICsgKHBhZ2VOYW1lWzBdID8gcGFnZU5hbWVbMF0gKyAnIHN1YnBhZ2UnIDogJ2hvbWUnKSB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3REb2N1bWVudE1ldGEyLmRlZmF1bHQsIG1ldGEpLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfSGVhZGVyMi5kZWZhdWx0LCBudWxsKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBpZDogJ21haW4tY29udGFpbmVyJyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jYXJ0Mi5kZWZhdWx0LCBudWxsKSxcbiAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgICAgICksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Gb290ZXIyLmRlZmF1bHQsIG51bGwpXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNYWluO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYWluO1xuXG4vKioqLyB9KSxcbi8qIDE2MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfTG9hZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7XG5cbnZhciBfTG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xvYWRlcik7XG5cbnZhciBfUHJvZHVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oODQpO1xuXG52YXIgX1Byb2R1Y3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUHJvZHVjdCk7XG5cbnZhciBfUHJvZHVjdEl0ZW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1KTtcblxudmFyIF9Qcm9kdWN0SXRlbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qcm9kdWN0SXRlbSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KSxcbiAgICBjb25uZWN0ID0gX3JlcXVpcmUuY29ubmVjdDtcblxudmFyIGFjdGlvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblxudmFyIFByb2R1Y3RzID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByb2R1Y3RzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQcm9kdWN0cygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvZHVjdHMpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQcm9kdWN0cy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFByb2R1Y3RzKSkuY2FsbCh0aGlzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUHJvZHVjdHMsIFt7XG4gICAga2V5OiAnaGFuZGxlQWRkVG9DYXJ0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQWRkVG9DYXJ0KHByb2R1Y3QpIHtcbiAgICAgIHZhciBkaXNwYXRjaCA9IHRoaXMucHJvcHMuZGlzcGF0Y2g7XG5cbiAgICAgIGRpc3BhdGNoKGFjdGlvbnMuc3RhcnRBZGRvclVwZGF0ZUNhcnRJdGVtKHByb2R1Y3Quc2VsZWN0ZWRWYXJpYW50LCAxKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBwcm9kdWN0cyA9IHRoaXMucHJvcHMucHJvZHVjdHM7XG5cblxuICAgICAgaWYgKHByb2R1Y3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY29udGFpbmVyJyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3JvdycgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdzbWFsbC0xMiBtZWRpdW0tMyBjb2x1bW5zJyB9LFxuICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnbmF2JyxcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3Byb2R1Y3RzLW5hdicgfSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICdoNCcsXG4gICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3Byb2R1Y3RzLW5hdl9faGVhZGxpbmUnIH0sXG4gICAgICAgICAgICAgICAgICAnQ2F0ZWdvcmllcydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgJ3VsJyxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgJ0NpdHkgLyBzdGF0ZSdcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgJ1Nwb3J0cydcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgJ0hvYmJpZXMnXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICdNdXNpYydcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgJ0FuaW1hbHMnXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICdTaG93IGFsbCdcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgJ2g0JyxcbiAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncHJvZHVjdHMtbmF2X19oZWFkbGluZScgfSxcbiAgICAgICAgICAgICAgICAgICdTdHlsZSdcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3Byb2R1Y3RzLW5hdl9fc2VhcmNoJyB9LFxuICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHBsYWNlaG9sZGVyOiAnU2VsZWN0IHN0eWxlJyB9KSxcbiAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnYnV0dG9uJyxcbiAgICAgICAgICAgICAgICAgICAgeyB0eXBlOiAnc3VibWl0JywgY2xhc3NOYW1lOiAncHJvZHVjdHMtbmF2X19zZWFyY2gtYnV0dG9uJyB9LFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaScsIHsgY2xhc3NOYW1lOiAnZmEgZmEtc2VhcmNoJyB9KVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAnaDQnLFxuICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwcm9kdWN0cy1uYXZfX2hlYWRsaW5lJyB9LFxuICAgICAgICAgICAgICAgICAgJ1NlYXJjaCdcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3Byb2R1Y3RzLW5hdl9fc2VhcmNoJyB9LFxuICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHBsYWNlaG9sZGVyOiAnRW50ZXIga2V5d29yZHMnIH0pLFxuICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdidXR0b24nLFxuICAgICAgICAgICAgICAgICAgICB7IHR5cGU6ICdzdWJtaXQnLCBjbGFzc05hbWU6ICdwcm9kdWN0cy1uYXZfX3NlYXJjaC1idXR0b24nIH0sXG4gICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpJywgeyBjbGFzc05hbWU6ICdmYSBmYS1zZWFyY2gnIH0pXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3NtYWxsLTEyIG1lZGl1bS05IGNvbHVtbicgfSxcbiAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwcm9kdWN0cy1ncmlkJyB9LFxuICAgICAgICAgICAgICAgIHByb2R1Y3RzLm1hcChmdW5jdGlvbiAocHJvZHVjdCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Qcm9kdWN0SXRlbTIuZGVmYXVsdCwgeyBrZXk6IHByb2R1Y3Qua2V5LCBhZGRUb0NhcnQ6IGZ1bmN0aW9uIGFkZFRvQ2FydCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmhhbmRsZUFkZFRvQ2FydChwcm9kdWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfSwgaWQ6IHByb2R1Y3QuYXR0cnMucHJvZHVjdF9pZCwgdGl0bGU6IHByb2R1Y3QuYXR0cnMudGl0bGUsIGltYWdlOiBwcm9kdWN0LnNlbGVjdGVkVmFyaWFudC5pbWFnZVZhcmlhbnRzWzRdLnNyYyB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Mb2FkZXIyLmRlZmF1bHQsIG51bGwpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQcm9kdWN0cztcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNvbm5lY3QoZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiB7XG4gICAgcHJvZHVjdHM6IHN0YXRlLnByb2R1Y3RzLmFsbFxuICB9O1xufSkoUHJvZHVjdHMpO1xuXG4vKioqLyB9KSxcbi8qIDE2MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3RSb3V0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpLFxuICAgIGNvbm5lY3QgPSBfcmVxdWlyZS5jb25uZWN0O1xuXG52YXIgcHJvZHVjdEFjdGlvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KTtcbnZhciBjYXJ0QWN0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXG52YXIgVXBsb2FkID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFVwbG9hZCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVXBsb2FkKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVcGxvYWQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChVcGxvYWQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihVcGxvYWQpKS5jYWxsKHRoaXMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhVcGxvYWQsIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGRpc3BhdGNoID0gdGhpcy5wcm9wcy5kaXNwYXRjaDtcblxuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IGNsYXNzTmFtZTogJ2NvbnRhaW5lciB0ZXh0LWNlbnRlcicgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2ltZycsIHsgc3JjOiAnL2ltYWdlcy91cGxvYWQtcGxhY2Vob2xkZXIucG5nJyB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVXBsb2FkO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY29ubmVjdChmdW5jdGlvbiAoc3RhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICBhY3RpdmVQcm9kdWN0OiBzdGF0ZS5wcm9kdWN0cy5hY3RpdmVcbiAgfTtcbn0pKFVwbG9hZCk7XG5cbi8qKiovIH0pLFxuLyogMTYyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9zaG9waWZ5QVBJID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cbnZhciBfc2hvcGlmeUFQSTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaG9waWZ5QVBJKTtcblxudmFyIF9DYXJ0SXRlbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTUzKTtcblxudmFyIF9DYXJ0SXRlbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DYXJ0SXRlbSk7XG5cbnZhciBfZm9ybWF0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MSk7XG5cbnZhciBfZm9ybWF0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zvcm1hdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KSxcbiAgICBjb25uZWN0ID0gX3JlcXVpcmUuY29ubmVjdDtcblxudmFyIGFjdGlvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblxudmFyIENhcnQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ2FydCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2FydCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2FydCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ2FydC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENhcnQpKS5jYWxsKHRoaXMpKTtcblxuICAgIHZhciBkaXNwYXRjaCA9IHZvaWQgMDtcbiAgICB2YXIgaGFuZGxlQ2hlY2tvdXQgPSBfdGhpcy5oYW5kbGVDaGVja291dCgpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDYXJ0LCBbe1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2ggPSB0aGlzLnByb3BzLmRpc3BhdGNoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhbmRsZUNsb3NlQ2FydCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUNsb3NlQ2FydCgpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2goYWN0aW9ucy5jbG9zZUNhcnQoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGFuZGxlQ2hlY2tvdXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDaGVja291dCgpIHtcbiAgICAgIHdpbmRvdy5vcGVuKF9zaG9waWZ5QVBJMi5kZWZhdWx0LmNhcnQuY2hlY2tvdXRVcmwsICdfc2VsZicpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMkY2FydCA9IHRoaXMucHJvcHMuY2FydCxcbiAgICAgICAgICBpc09wZW4gPSBfcHJvcHMkY2FydC5pc09wZW4sXG4gICAgICAgICAgbGluZUl0ZW1zID0gX3Byb3BzJGNhcnQubGluZUl0ZW1zLFxuICAgICAgICAgIGxpbmVJdGVtQ291bnQgPSBfcHJvcHMkY2FydC5saW5lSXRlbUNvdW50LFxuICAgICAgICAgIHN1YnRvdGFsID0gX3Byb3BzJGNhcnQuc3VidG90YWw7XG5cbiAgICAgIHZhciByZW5kZXJMaW5lSXRlbXMgPSBmdW5jdGlvbiByZW5kZXJMaW5lSXRlbXMoKSB7XG4gICAgICAgIGlmIChsaW5lSXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybiBsaW5lSXRlbXMubWFwKGZ1bmN0aW9uIChsaW5lSXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9DYXJ0SXRlbTIuZGVmYXVsdCwge1xuICAgICAgICAgICAgICBrZXk6IGxpbmVJdGVtLmlkLFxuICAgICAgICAgICAgICBpdGVtOiBsaW5lSXRlbSxcbiAgICAgICAgICAgICAgcXVhbnRpdHk6IGxpbmVJdGVtLnF1YW50aXR5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6IFwiY2FydCBcIiArIChpc09wZW4gPyAnanMtYWN0aXZlJyA6ICcnKSB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ2NhcnQtc2VjdGlvbiBjYXJ0LXNlY3Rpb24tLXRvcCcgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdoMicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2NhcnQtdGl0bGUnIH0sXG4gICAgICAgICAgICAnWW91ciBjYXJ0OiAnLFxuICAgICAgICAgICAgaXNPcGVuXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdidXR0b24nLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdidG4tLWNsb3NlJyB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICB7IG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xvc2VDYXJ0LmJpbmQodGhpcykgfSxcbiAgICAgICAgICAgICAgJ1xceEQ3J1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnaGlkZScgfSxcbiAgICAgICAgICAgICAgJ0Nsb3NlJ1xuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdjYXJ0LWZvcm0nIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY2FydC1pdGVtLWNvbnRhaW5lciBjYXJ0LXNlY3Rpb24nIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIHJlbmRlckxpbmVJdGVtcygpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdjYXJ0LWJvdHRvbScgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdjYXJ0LWluZm8gY2xlYXJmaXggY2FydC1zZWN0aW9uJyB9LFxuICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3R5cGUtLWNhcHMgY2FydC1pbmZvX190b3RhbCBjYXJ0LWluZm9fX3NtYWxsJyB9LFxuICAgICAgICAgICAgICAgICdUb3RhbCdcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdjYXJ0LWluZm9fX3ByaWNpbmcnIH0sXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2NhcnQtaW5mb19fc21hbGwgY2FydC1pbmZvX190b3RhbCcgfSxcbiAgICAgICAgICAgICAgICAgICdVU0QnXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncHJpY2luZyBwcmljaW5nLS1uby1wYWRkaW5nJyB9LFxuICAgICAgICAgICAgICAgICAgX2Zvcm1hdDIuZGVmYXVsdC5hc01vbmV5KHN1YnRvdGFsKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdjYXJ0LWFjdGlvbnMtY29udGFpbmVyIGNhcnQtc2VjdGlvbiB0eXBlLS1jZW50ZXInIH0sXG4gICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY2FydC1kaXNjb3VudC1ub3RpY2UgY2FydC1pbmZvX19zbWFsbCcgfSxcbiAgICAgICAgICAgICAgICAnU2hpcHBpbmcgYW5kIGRpc2NvdW50IGNvZGVzIGFyZSBhZGRlZCBhdCBjaGVja291dC4nXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3VibWl0JyxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdidG4gYnRuLS1jYXJ0LWNoZWNrb3V0JyxcbiAgICAgICAgICAgICAgICBpZDogJ2NoZWNrb3V0JyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnY2hlY2tvdXQnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAnQ2hlY2tvdXQnLFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2hlY2tvdXRcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENhcnQ7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjb25uZWN0KGZ1bmN0aW9uIChzdGF0ZSkge1xuICByZXR1cm4ge1xuICAgIGNhcnQ6IHN0YXRlLmNhcnRcbiAgfTtcbn0pKENhcnQpO1xuXG4vKioqLyB9KSxcbi8qIDE2MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3REb2N1bWVudE1ldGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblxudmFyIF9yZWFjdERvY3VtZW50TWV0YTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvY3VtZW50TWV0YSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEFib3V0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEFib3V0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBBYm91dCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWJvdXQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChBYm91dC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEFib3V0KSkuY2FsbCh0aGlzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQWJvdXQsIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc2VjdGlvbicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAnc2VjdGlvbicgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdjb250YWluZXInIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnaDEnLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICdBYm91dCB1cydcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFib3V0O1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBYm91dDtcblxuLyoqKi8gfSksXG4vKiAxNjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0RG9jdW1lbnRNZXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbnZhciBfcmVhY3REb2N1bWVudE1ldGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb2N1bWVudE1ldGEpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBDb250YWN0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENvbnRhY3QsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENvbnRhY3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnRhY3QpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDb250YWN0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29udGFjdCkpLmNhbGwodGhpcykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvbnRhY3QsIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc2VjdGlvbicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAnc2VjdGlvbicgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdjb250YWluZXInIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnaDEnLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICdDb250YWN0J1xuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29udGFjdDtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udGFjdDtcblxuLyoqKi8gfSksXG4vKiAxNjUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0RG9jdW1lbnRNZXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbnZhciBfcmVhY3REb2N1bWVudE1ldGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb2N1bWVudE1ldGEpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBMb2dpbiA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMb2dpbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTG9naW4oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvZ2luKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTG9naW4uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2dpbikpLmNhbGwodGhpcykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKExvZ2luLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NlY3Rpb24nLFxuICAgICAgICB7IGNsYXNzTmFtZTogJ3NlY3Rpb24nIH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY29udGFpbmVyJyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2gxJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAnTG9naW4nXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdmb3JtJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgcGxhY2Vob2xkZXI6ICdFbWFpbCcgfSksXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IHR5cGU6ICdwYXNzd29yZCcsIHBsYWNlaG9sZGVyOiAnUGFzc3dvcmQnIH0pLFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgeyB0eXBlOiAnc3VibWl0JywgY2xhc3NOYW1lOiAnYnV0dG9uJywgdmFsdWU6ICdMb2dpbicgfSlcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExvZ2luO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBMb2dpbjtcblxuLyoqKi8gfSksXG4vKiAxNjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0RG9jdW1lbnRNZXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbnZhciBfcmVhY3REb2N1bWVudE1ldGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb2N1bWVudE1ldGEpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBNYXAgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWFwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNYXAoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hcCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE1hcC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE1hcCkpLmNhbGwodGhpcykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1hcCwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzZWN0aW9uJyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdzZWN0aW9uJyB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ2NvbnRhaW5lcicgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdoMScsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgJ01hcCBwYWdlJ1xuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWFwO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXA7XG5cbi8qKiovIH0pLFxuLyogMTY3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvY3VtZW50TWV0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG52YXIgX3JlYWN0RG9jdW1lbnRNZXRhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9jdW1lbnRNZXRhKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgT3JkZXJTdGF0dXMgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoT3JkZXJTdGF0dXMsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE9yZGVyU3RhdHVzKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPcmRlclN0YXR1cyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE9yZGVyU3RhdHVzLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoT3JkZXJTdGF0dXMpKS5jYWxsKHRoaXMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhPcmRlclN0YXR1cywgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzZWN0aW9uJyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdzZWN0aW9uJyB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ2NvbnRhaW5lcicgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdoMScsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgJ09yZGVyIFN0YXR1cyBwYWdlJ1xuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gT3JkZXJTdGF0dXM7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9yZGVyU3RhdHVzO1xuXG4vKioqLyB9KSxcbi8qIDE2OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgcHJvZHVjdHNSZWR1Y2VyID0gZXhwb3J0cy5wcm9kdWN0c1JlZHVjZXIgPSBmdW5jdGlvbiBwcm9kdWN0c1JlZHVjZXIoKSB7XG4gIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogeyBhbGw6IFtdLCBhY3RpdmU6IG51bGwgfTtcbiAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50c1sxXTtcblxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnQUREX1BST0RVQ1RTJzpcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgYWxsOiBhY3Rpb24ucHJvZHVjdHNcbiAgICAgIH0pO1xuICAgIGNhc2UgJ1NFVF9BQ1RJVkVfUFJPRFVDVCc6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIGFjdGl2ZTogX2V4dGVuZHMoe30sIHN0YXRlLmFjdGl2ZSwge1xuICAgICAgICAgIGZldGNoZWQ6IHRydWUsXG4gICAgICAgICAgb3B0aW9uczogYWN0aW9uLm9wdGlvbnNcbiAgICAgICAgfSlcbiAgICAgIH0pO1xuICAgIGNhc2UgJ0NMRUFSX0FDVElWRV9QUk9EVUNUJzpcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgYWN0aXZlOiBudWxsXG4gICAgICB9KTtcbiAgICBjYXNlICdVUERBVEVfQUNUSVZFX1BST0RVQ1RfT1BUSU9OUyc6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIGFjdGl2ZTogX2V4dGVuZHMoe30sIHN0YXRlLmFjdGl2ZSwge1xuICAgICAgICAgIG9wdGlvbnM6IGFjdGlvbi5vcHRpb25zXG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG52YXIgY29sbGVjdGlvbnNSZWR1Y2VyID0gZXhwb3J0cy5jb2xsZWN0aW9uc1JlZHVjZXIgPSBmdW5jdGlvbiBjb2xsZWN0aW9uc1JlZHVjZXIoKSB7XG4gIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogeyBhbGw6IFtdLCBhY3RpdmU6IG51bGwgfTtcbiAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50c1sxXTtcblxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnQUREX0NPTExFQ1RJT05TJzpcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgYWxsOiBhY3Rpb24uY29sbGVjdGlvbnNcbiAgICAgIH0pO1xuICAgIGNhc2UgJ1NFVF9BQ1RJVkVfQ09MTEVDVElPTic6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIGFjdGl2ZTogYWN0aW9uLnBhcnNlZENvbGxlY3Rpb25cbiAgICAgIH0pO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cbnZhciBjYXJ0UmVkdWNlciA9IGV4cG9ydHMuY2FydFJlZHVjZXIgPSBmdW5jdGlvbiBjYXJ0UmVkdWNlcigpIHtcbiAgdmFyIHN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7IGlzT3BlbjogZmFsc2UsIGxpbmVJdGVtczogW10gfTtcbiAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50c1sxXTtcblxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgLy8gY2FzZSAnUkVTVE9SRV9QUkVWSU9VU19DQVJUJzpcbiAgICAvLyAgIHJldHVybiBhY3Rpb24ucmVtb3RlQ2FydDtcbiAgICBjYXNlICdTRVRfSU5JVElBTF9DQVJUX1NUQVRFJzpcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYWN0aW9uLmxvY2FsQ2FydCk7XG4gICAgY2FzZSAnVVBEQVRFX0NBUlRfSVRFTVMnOlxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICBsaW5lSXRlbXM6IGFjdGlvbi51cGRhdGVkQ2FydEl0ZW1zXG4gICAgICB9KTtcbiAgICBjYXNlICdVUERBVEVfQ0FSVF9JVEVNU19DT1VOVCc6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIGxpbmVJdGVtc0NvdW50OiBhY3Rpb24udXBkYXRlZENhcnRJdGVtc0NvdW50XG4gICAgICB9KTtcbiAgICBjYXNlICdVUERBVEVfQ0FSVF9TVUJUT1RBTCc6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIHN1YnRvdGFsOiBhY3Rpb24ubmV3U3VidG90YWxcbiAgICAgIH0pO1xuICAgIGNhc2UgJ09QRU5fQ0FSVCc6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIGlzT3BlbjogdHJ1ZVxuICAgICAgfSk7XG4gICAgY2FzZSAnQ0xPU0VfQ0FSVCc6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIGlzT3BlbjogZmFsc2VcbiAgICAgIH0pO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cbnZhciBuYXZSZWR1Y2VyID0gZXhwb3J0cy5uYXZSZWR1Y2VyID0gZnVuY3Rpb24gbmF2UmVkdWNlcigpIHtcbiAgdmFyIHN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7IHNob3dDbG9zZTogZmFsc2UsIHNob3dOYXY6IGZhbHNlIH07XG4gIHZhciBhY3Rpb24gPSBhcmd1bWVudHNbMV07XG5cbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgJ1RPR0dMRV9OQVZfSUNPTic6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIHNob3dDbG9zZTogIXN0YXRlLnNob3dDbG9zZSxcbiAgICAgICAgc2hvd05hdjogc3RhdGUuc2hvd05hdlxuICAgICAgfSk7XG4gICAgY2FzZSAnVE9HR0xFX05BVic6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIHNob3dDbG9zZTogIXN0YXRlLnNob3dDbG9zZSxcbiAgICAgICAgc2hvd05hdjogIXN0YXRlLnNob3dOYXZcbiAgICAgIH0pO1xuICAgIGNhc2UgJ0NMT1NFX05BVic6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIHNob3dDbG9zZTogZmFsc2UsXG4gICAgICAgIHNob3dOYXY6IGZhbHNlXG4gICAgICB9KTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG4vKioqLyB9KSxcbi8qIDE2OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIHBsYWNlSG9sZGVyc0NvdW50IChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIHRoZSBudW1iZXIgb2YgZXF1YWwgc2lnbnMgKHBsYWNlIGhvbGRlcnMpXG4gIC8vIGlmIHRoZXJlIGFyZSB0d28gcGxhY2Vob2xkZXJzLCB0aGFuIHRoZSB0d28gY2hhcmFjdGVycyBiZWZvcmUgaXRcbiAgLy8gcmVwcmVzZW50IG9uZSBieXRlXG4gIC8vIGlmIHRoZXJlIGlzIG9ubHkgb25lLCB0aGVuIHRoZSB0aHJlZSBjaGFyYWN0ZXJzIGJlZm9yZSBpdCByZXByZXNlbnQgMiBieXRlc1xuICAvLyB0aGlzIGlzIGp1c3QgYSBjaGVhcCBoYWNrIHRvIG5vdCBkbyBpbmRleE9mIHR3aWNlXG4gIHJldHVybiBiNjRbbGVuIC0gMl0gPT09ICc9JyA/IDIgOiBiNjRbbGVuIC0gMV0gPT09ICc9JyA/IDEgOiAwXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICAvLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbiAgcmV0dXJuIGI2NC5sZW5ndGggKiAzIC8gNCAtIHBsYWNlSG9sZGVyc0NvdW50KGI2NClcbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgaSwgaiwgbCwgdG1wLCBwbGFjZUhvbGRlcnMsIGFyclxuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuICBwbGFjZUhvbGRlcnMgPSBwbGFjZUhvbGRlcnNDb3VudChiNjQpXG5cbiAgYXJyID0gbmV3IEFycihsZW4gKiAzIC8gNCAtIHBsYWNlSG9sZGVycylcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIGwgPSBwbGFjZUhvbGRlcnMgPiAwID8gbGVuIC0gNCA6IGxlblxuXG4gIHZhciBMID0gMFxuXG4gIGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbDsgaSArPSA0LCBqICs9IDMpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHwgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbTCsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnMgPT09IDIpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9IGVsc2UgaWYgKHBsYWNlSG9sZGVycyA9PT0gMSkge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICsgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9ICh1aW50OFtpXSA8PCAxNikgKyAodWludDhbaSArIDFdIDw8IDgpICsgKHVpbnQ4W2kgKyAyXSlcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIG91dHB1dCA9ICcnXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBvdXRwdXQgKz0gbG9va3VwW3RtcCA+PiAyXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9ICc9PSdcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgKHVpbnQ4W2xlbiAtIDFdKVxuICAgIG91dHB1dCArPSBsb29rdXBbdG1wID4+IDEwXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gJz0nXG4gIH1cblxuICBwYXJ0cy5wdXNoKG91dHB1dClcblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cblxuXG4vKioqLyB9KSxcbi8qIDE3MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHsvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG5cblxudmFyIGJhc2U2NCA9IF9fd2VicGFja19yZXF1aXJlX18oMTY5KVxudmFyIGllZWU3NTQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5NClcbnZhciBpc0FycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzEpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyg0NikpKVxuXG4vKioqLyB9KSxcbi8qIDE3MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDE3MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgY2FuVXNlRE9NID0gISEoXG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gIHdpbmRvdy5kb2N1bWVudCAmJlxuICB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudFxuKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjYW5Vc2VET007XG5cbi8qKiovIH0pLFxuLyogMTczICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0cykge1xuICByZXR1cm4gbmV3IEVsZW1lbnRDbGFzcyhvcHRzKVxufVxuXG5mdW5jdGlvbiBpbmRleE9mKGFyciwgcHJvcCkge1xuICBpZiAoYXJyLmluZGV4T2YpIHJldHVybiBhcnIuaW5kZXhPZihwcm9wKVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKVxuICAgIGlmIChhcnJbaV0gPT09IHByb3ApIHJldHVybiBpXG4gIHJldHVybiAtMVxufVxuXG5mdW5jdGlvbiBFbGVtZW50Q2xhc3Mob3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRWxlbWVudENsYXNzKSkgcmV0dXJuIG5ldyBFbGVtZW50Q2xhc3Mob3B0cylcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmICghb3B0cykgb3B0cyA9IHt9XG5cbiAgLy8gc2ltaWxhciBkb2luZyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IGJ1dCB3b3JrcyBpbiBJRThcbiAgaWYgKG9wdHMubm9kZVR5cGUpIG9wdHMgPSB7ZWw6IG9wdHN9XG5cbiAgdGhpcy5vcHRzID0gb3B0c1xuICB0aGlzLmVsID0gb3B0cy5lbCB8fCBkb2N1bWVudC5ib2R5XG4gIGlmICh0eXBlb2YgdGhpcy5lbCAhPT0gJ29iamVjdCcpIHRoaXMuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuZWwpXG59XG5cbkVsZW1lbnRDbGFzcy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gIHZhciBlbCA9IHRoaXMuZWxcbiAgaWYgKCFlbCkgcmV0dXJuXG4gIGlmIChlbC5jbGFzc05hbWUgPT09IFwiXCIpIHJldHVybiBlbC5jbGFzc05hbWUgPSBjbGFzc05hbWVcbiAgdmFyIGNsYXNzZXMgPSBlbC5jbGFzc05hbWUuc3BsaXQoJyAnKVxuICBpZiAoaW5kZXhPZihjbGFzc2VzLCBjbGFzc05hbWUpID4gLTEpIHJldHVybiBjbGFzc2VzXG4gIGNsYXNzZXMucHVzaChjbGFzc05hbWUpXG4gIGVsLmNsYXNzTmFtZSA9IGNsYXNzZXMuam9pbignICcpXG4gIHJldHVybiBjbGFzc2VzXG59XG5cbkVsZW1lbnRDbGFzcy5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gIHZhciBlbCA9IHRoaXMuZWxcbiAgaWYgKCFlbCkgcmV0dXJuXG4gIGlmIChlbC5jbGFzc05hbWUgPT09IFwiXCIpIHJldHVyblxuICB2YXIgY2xhc3NlcyA9IGVsLmNsYXNzTmFtZS5zcGxpdCgnICcpXG4gIHZhciBpZHggPSBpbmRleE9mKGNsYXNzZXMsIGNsYXNzTmFtZSlcbiAgaWYgKGlkeCA+IC0xKSBjbGFzc2VzLnNwbGljZShpZHgsIDEpXG4gIGVsLmNsYXNzTmFtZSA9IGNsYXNzZXMuam9pbignICcpXG4gIHJldHVybiBjbGFzc2VzXG59XG5cbkVsZW1lbnRDbGFzcy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gIHZhciBlbCA9IHRoaXMuZWxcbiAgaWYgKCFlbCkgcmV0dXJuXG4gIHZhciBjbGFzc2VzID0gZWwuY2xhc3NOYW1lLnNwbGl0KCcgJylcbiAgcmV0dXJuIGluZGV4T2YoY2xhc3NlcywgY2xhc3NOYW1lKSA+IC0xXG59XG5cbkVsZW1lbnRDbGFzcy5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gIHZhciBlbCA9IHRoaXMuZWxcbiAgaWYgKCFlbCkgcmV0dXJuXG4gIGlmICh0aGlzLmhhcyhjbGFzc05hbWUpKSB0aGlzLnJlbW92ZShjbGFzc05hbWUpXG4gIGVsc2UgdGhpcy5hZGQoY2xhc3NOYW1lKVxufVxuXG5cbi8qKiovIH0pLFxuLyogMTc0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsvKiFcbiAqIGVucXVpcmUuanMgdjIuMS4xIC0gQXdlc29tZSBNZWRpYSBRdWVyaWVzIGluIEphdmFTY3JpcHRcbiAqIENvcHlyaWdodCAoYykgMjAxNCBOaWNrIFdpbGxpYW1zIC0gaHR0cDovL3dpY2t5Lm5pbGxpYS5tcy9lbnF1aXJlLmpzXG4gKiBMaWNlbnNlOiBNSVQgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuICovXG5cbjsoZnVuY3Rpb24gKG5hbWUsIGNvbnRleHQsIGZhY3RvcnkpIHtcblx0dmFyIG1hdGNoTWVkaWEgPSB3aW5kb3cubWF0Y2hNZWRpYTtcblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkobWF0Y2hNZWRpYSk7XG5cdH1cblx0ZWxzZSBpZiAodHJ1ZSkge1xuXHRcdCEoX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiAoY29udGV4dFtuYW1lXSA9IGZhY3RvcnkobWF0Y2hNZWRpYSkpO1xuXHRcdH0uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fLCBleHBvcnRzLCBtb2R1bGUpLFxuXHRcdFx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Y29udGV4dFtuYW1lXSA9IGZhY3RvcnkobWF0Y2hNZWRpYSk7XG5cdH1cbn0oJ2VucXVpcmUnLCB0aGlzLCBmdW5jdGlvbiAobWF0Y2hNZWRpYSkge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuICAgIC8qanNoaW50IHVudXNlZDpmYWxzZSAqL1xuICAgIC8qKlxuICAgICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgaXRlcmF0aW5nIG92ZXIgYSBjb2xsZWN0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sbGVjdGlvblxuICAgICAqIEBwYXJhbSBmblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVhY2goY29sbGVjdGlvbiwgZm4pIHtcbiAgICAgICAgdmFyIGkgICAgICA9IDAsXG4gICAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgICAgIGNvbnQ7XG5cbiAgICAgICAgZm9yKGk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29udCA9IGZuKGNvbGxlY3Rpb25baV0sIGkpO1xuICAgICAgICAgICAgaWYoY29udCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBicmVhazsgLy9hbGxvdyBlYXJseSBleGl0XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGRldGVybWluaW5nIHdoZXRoZXIgdGFyZ2V0IG9iamVjdCBpcyBhbiBhcnJheVxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldCB0aGUgb2JqZWN0IHVuZGVyIHRlc3RcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGFycmF5LCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5KHRhcmdldCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseSh0YXJnZXQpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgZGV0ZXJtaW5pbmcgd2hldGhlciB0YXJnZXQgb2JqZWN0IGlzIGEgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YXJnZXQgdGhlIG9iamVjdCB1bmRlciB0ZXN0XG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBmdW5jdGlvbiwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbic7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZWdhdGUgdG8gaGFuZGxlIGEgbWVkaWEgcXVlcnkgYmVpbmcgbWF0Y2hlZCBhbmQgdW5tYXRjaGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcHRpb25zLm1hdGNoIGNhbGxiYWNrIGZvciB3aGVuIHRoZSBtZWRpYSBxdWVyeSBpcyBtYXRjaGVkXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMudW5tYXRjaF0gY2FsbGJhY2sgZm9yIHdoZW4gdGhlIG1lZGlhIHF1ZXJ5IGlzIHVubWF0Y2hlZFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLnNldHVwXSBvbmUtdGltZSBjYWxsYmFjayB0cmlnZ2VyZWQgdGhlIGZpcnN0IHRpbWUgYSBxdWVyeSBpcyBtYXRjaGVkXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5kZWZlclNldHVwPWZhbHNlXSBzaG91bGQgdGhlIHNldHVwIGNhbGxiYWNrIGJlIHJ1biBpbW1lZGlhdGVseSwgcmF0aGVyIHRoYW4gZmlyc3QgdGltZSBxdWVyeSBpcyBtYXRjaGVkP1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFF1ZXJ5SGFuZGxlcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgICFvcHRpb25zLmRlZmVyU2V0dXAgJiYgdGhpcy5zZXR1cCgpO1xuICAgIH1cbiAgICBRdWVyeUhhbmRsZXIucHJvdG90eXBlID0ge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb29yZGluYXRlcyBzZXR1cCBvZiB0aGUgaGFuZGxlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIHNldHVwIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuc2V0dXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2V0dXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGlzZWQgPSB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb29yZGluYXRlcyBzZXR1cCBhbmQgdHJpZ2dlcmluZyBvZiB0aGUgaGFuZGxlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIG9uIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAhdGhpcy5pbml0aWFsaXNlZCAmJiB0aGlzLnNldHVwKCk7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMubWF0Y2ggJiYgdGhpcy5vcHRpb25zLm1hdGNoKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvb3JkaW5hdGVzIHRoZSB1bm1hdGNoIGV2ZW50IGZvciB0aGUgaGFuZGxlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIG9mZiA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnVubWF0Y2ggJiYgdGhpcy5vcHRpb25zLnVubWF0Y2goKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdoZW4gYSBoYW5kbGVyIGlzIHRvIGJlIGRlc3Ryb3llZC5cbiAgICAgICAgICogZGVsZWdhdGVzIHRvIHRoZSBkZXN0cm95IG9yIHVubWF0Y2ggY2FsbGJhY2tzLCBkZXBlbmRpbmcgb24gYXZhaWxhYmlsaXR5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIGRlc3Ryb3kgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5kZXN0cm95ID8gdGhpcy5vcHRpb25zLmRlc3Ryb3koKSA6IHRoaXMub2ZmKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRldGVybWluZXMgZXF1YWxpdHkgYnkgcmVmZXJlbmNlLlxuICAgICAgICAgKiBpZiBvYmplY3QgaXMgc3VwcGxpZWQgY29tcGFyZSBvcHRpb25zLCBpZiBmdW5jdGlvbiwgY29tcGFyZSBtYXRjaCBjYWxsYmFja1xuICAgICAgICAgKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtvYmplY3QgfHwgZnVuY3Rpb259IFt0YXJnZXRdIHRoZSB0YXJnZXQgZm9yIGNvbXBhcmlzb25cbiAgICAgICAgICovXG4gICAgICAgIGVxdWFscyA6IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucyA9PT0gdGFyZ2V0IHx8IHRoaXMub3B0aW9ucy5tYXRjaCA9PT0gdGFyZ2V0O1xuICAgICAgICB9XG5cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSBzaW5nbGUgbWVkaWEgcXVlcnksIG1hbmFnZXMgaXQncyBzdGF0ZSBhbmQgcmVnaXN0ZXJlZCBoYW5kbGVycyBmb3IgdGhpcyBxdWVyeVxuICAgICAqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IHRoZSBtZWRpYSBxdWVyeSBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1VuY29uZGl0aW9uYWw9ZmFsc2VdIHdoZXRoZXIgdGhlIG1lZGlhIHF1ZXJ5IHNob3VsZCBydW4gcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZSBjb25kaXRpb25zIGFyZSBtZXQuIFByaW1hcmlseSBmb3IgaGVscGluZyBvbGRlciBicm93c2VycyBkZWFsIHdpdGggbW9iaWxlLWZpcnN0IGRlc2lnblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE1lZGlhUXVlcnkocXVlcnksIGlzVW5jb25kaXRpb25hbCkge1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgICAgIHRoaXMuaXNVbmNvbmRpdGlvbmFsID0gaXNVbmNvbmRpdGlvbmFsO1xuICAgICAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gICAgICAgIHRoaXMubXFsID0gbWF0Y2hNZWRpYShxdWVyeSk7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLmxpc3RlbmVyID0gZnVuY3Rpb24obXFsKSB7XG4gICAgICAgICAgICBzZWxmLm1xbCA9IG1xbDtcbiAgICAgICAgICAgIHNlbGYuYXNzZXNzKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubXFsLmFkZExpc3RlbmVyKHRoaXMubGlzdGVuZXIpO1xuICAgIH1cbiAgICBNZWRpYVF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogYWRkIGEgaGFuZGxlciBmb3IgdGhpcyBxdWVyeSwgdHJpZ2dlcmluZyBpZiBhbHJlYWR5IGFjdGl2ZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gaGFuZGxlclxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBoYW5kbGVyLm1hdGNoIGNhbGxiYWNrIGZvciB3aGVuIHF1ZXJ5IGlzIGFjdGl2YXRlZFxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbaGFuZGxlci51bm1hdGNoXSBjYWxsYmFjayBmb3Igd2hlbiBxdWVyeSBpcyBkZWFjdGl2YXRlZFxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbaGFuZGxlci5zZXR1cF0gY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSBleGVjdXRpb24gd2hlbiBhIHF1ZXJ5IGhhbmRsZXIgaXMgcmVnaXN0ZXJlZFxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtoYW5kbGVyLmRlZmVyU2V0dXA9ZmFsc2VdIHNob3VsZCB0aGUgc2V0dXAgY2FsbGJhY2sgYmUgZGVmZXJyZWQgdW50aWwgdGhlIGZpcnN0IHRpbWUgdGhlIGhhbmRsZXIgaXMgbWF0Y2hlZD9cbiAgICAgICAgICovXG4gICAgICAgIGFkZEhhbmRsZXIgOiBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgICAgICAgICB2YXIgcWggPSBuZXcgUXVlcnlIYW5kbGVyKGhhbmRsZXIpO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVycy5wdXNoKHFoKTtcblxuICAgICAgICAgICAgdGhpcy5tYXRjaGVzKCkgJiYgcWgub24oKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogcmVtb3ZlcyB0aGUgZ2l2ZW4gaGFuZGxlciBmcm9tIHRoZSBjb2xsZWN0aW9uLCBhbmQgY2FsbHMgaXQncyBkZXN0cm95IG1ldGhvZHNcbiAgICAgICAgICogXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0IHx8IGZ1bmN0aW9ufSBoYW5kbGVyIHRoZSBoYW5kbGVyIHRvIHJlbW92ZVxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlSGFuZGxlciA6IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnM7XG4gICAgICAgICAgICBlYWNoKGhhbmRsZXJzLCBmdW5jdGlvbihoLCBpKSB7XG4gICAgICAgICAgICAgICAgaWYoaC5lcXVhbHMoaGFuZGxlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgaC5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhaGFuZGxlcnMuc3BsaWNlKGksMSk7IC8vcmVtb3ZlIGZyb20gYXJyYXkgYW5kIGV4aXQgZWFjaCBlYXJseVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgbWVkaWEgcXVlcnkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBtYXRjaFxuICAgICAgICAgKiBcbiAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBtZWRpYSBxdWVyeSBjYW4gYmUgY29uc2lkZXJlZCBhIG1hdGNoLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgICAgICovXG4gICAgICAgIG1hdGNoZXMgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1xbC5tYXRjaGVzIHx8IHRoaXMuaXNVbmNvbmRpdGlvbmFsO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDbGVhcnMgYWxsIGhhbmRsZXJzIGFuZCB1bmJpbmRzIGV2ZW50c1xuICAgICAgICAgKi9cbiAgICAgICAgY2xlYXIgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1xbC5yZW1vdmVMaXN0ZW5lcih0aGlzLmxpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlcnMubGVuZ3RoID0gMDsgLy9jbGVhciBhcnJheVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIEFzc2Vzc2VzIHRoZSBxdWVyeSwgdHVybmluZyBvbiBhbGwgaGFuZGxlcnMgaWYgaXQgbWF0Y2hlcywgdHVybmluZyB0aGVtIG9mZiBpZiBpdCBkb2Vzbid0IG1hdGNoXG4gICAgICAgICAqL1xuICAgICAgICBhc3Nlc3MgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhY3Rpb24gPSB0aGlzLm1hdGNoZXMoKSA/ICdvbicgOiAnb2ZmJztcblxuICAgICAgICAgICAgZWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlclthY3Rpb25dKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQWxsb3dzIGZvciByZWdpc3RyYXRpb24gb2YgcXVlcnkgaGFuZGxlcnMuXG4gICAgICogTWFuYWdlcyB0aGUgcXVlcnkgaGFuZGxlcidzIHN0YXRlIGFuZCBpcyByZXNwb25zaWJsZSBmb3Igd2lyaW5nIHVwIGJyb3dzZXIgZXZlbnRzXG4gICAgICpcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNZWRpYVF1ZXJ5RGlzcGF0Y2ggKCkge1xuICAgICAgICBpZighbWF0Y2hNZWRpYSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXRjaE1lZGlhIG5vdCBwcmVzZW50LCBsZWdhY3kgYnJvd3NlcnMgcmVxdWlyZSBhIHBvbHlmaWxsJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnF1ZXJpZXMgPSB7fTtcbiAgICAgICAgdGhpcy5icm93c2VySXNJbmNhcGFibGUgPSAhbWF0Y2hNZWRpYSgnb25seSBhbGwnKS5tYXRjaGVzO1xuICAgIH1cblxuICAgIE1lZGlhUXVlcnlEaXNwYXRjaC5wcm90b3R5cGUgPSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlZ2lzdGVycyBhIGhhbmRsZXIgZm9yIHRoZSBnaXZlbiBtZWRpYSBxdWVyeVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcSB0aGUgbWVkaWEgcXVlcnlcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3QgfHwgQXJyYXkgfHwgRnVuY3Rpb259IG9wdGlvbnMgZWl0aGVyIGEgc2luZ2xlIHF1ZXJ5IGhhbmRsZXIgb2JqZWN0LCBhIGZ1bmN0aW9uLCBvciBhbiBhcnJheSBvZiBxdWVyeSBoYW5kbGVyc1xuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcHRpb25zLm1hdGNoIGZpcmVkIHdoZW4gcXVlcnkgbWF0Y2hlZFxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy51bm1hdGNoXSBmaXJlZCB3aGVuIGEgcXVlcnkgaXMgbm8gbG9uZ2VyIG1hdGNoZWRcbiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMuc2V0dXBdIGZpcmVkIHdoZW4gaGFuZGxlciBmaXJzdCB0cmlnZ2VyZWRcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5kZWZlclNldHVwPWZhbHNlXSB3aGV0aGVyIHNldHVwIHNob3VsZCBiZSBydW4gaW1tZWRpYXRlbHkgb3IgZGVmZXJyZWQgdW50aWwgcXVlcnkgaXMgZmlyc3QgbWF0Y2hlZFxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaG91bGREZWdyYWRlPWZhbHNlXSB3aGV0aGVyIHRoaXMgcGFydGljdWxhciBtZWRpYSBxdWVyeSBzaG91bGQgYWx3YXlzIHJ1biBvbiBpbmNhcGFibGUgYnJvd3NlcnNcbiAgICAgICAgICovXG4gICAgICAgIHJlZ2lzdGVyIDogZnVuY3Rpb24ocSwgb3B0aW9ucywgc2hvdWxkRGVncmFkZSkge1xuICAgICAgICAgICAgdmFyIHF1ZXJpZXMgICAgICAgICA9IHRoaXMucXVlcmllcyxcbiAgICAgICAgICAgICAgICBpc1VuY29uZGl0aW9uYWwgPSBzaG91bGREZWdyYWRlICYmIHRoaXMuYnJvd3NlcklzSW5jYXBhYmxlO1xuXG4gICAgICAgICAgICBpZighcXVlcmllc1txXSkge1xuICAgICAgICAgICAgICAgIHF1ZXJpZXNbcV0gPSBuZXcgTWVkaWFRdWVyeShxLCBpc1VuY29uZGl0aW9uYWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL25vcm1hbGlzZSB0byBvYmplY3QgaW4gYW4gYXJyYXlcbiAgICAgICAgICAgIGlmKGlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0geyBtYXRjaCA6IG9wdGlvbnMgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCFpc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IFtvcHRpb25zXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVhY2gob3B0aW9ucywgZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHF1ZXJpZXNbcV0uYWRkSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdW5yZWdpc3RlcnMgYSBxdWVyeSBhbmQgYWxsIGl0J3MgaGFuZGxlcnMsIG9yIGEgc3BlY2lmaWMgaGFuZGxlciBmb3IgYSBxdWVyeVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcSB0aGUgbWVkaWEgcXVlcnkgdG8gdGFyZ2V0XG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0IHx8IGZ1bmN0aW9ufSBbaGFuZGxlcl0gc3BlY2lmaWMgaGFuZGxlciB0byB1bnJlZ2lzdGVyXG4gICAgICAgICAqL1xuICAgICAgICB1bnJlZ2lzdGVyIDogZnVuY3Rpb24ocSwgaGFuZGxlcikge1xuICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzW3FdO1xuXG4gICAgICAgICAgICBpZihxdWVyeSkge1xuICAgICAgICAgICAgICAgIGlmKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnkucmVtb3ZlSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5LmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnF1ZXJpZXNbcV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH07XG5cblx0cmV0dXJuIG5ldyBNZWRpYVF1ZXJ5RGlzcGF0Y2goKTtcblxufSkpO1xuXG4vKioqLyB9KSxcbi8qIDE3NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187LyohXG4gIENvcHlyaWdodCAoYykgMjAxNSBKZWQgV2F0c29uLlxuICBCYXNlZCBvbiBjb2RlIHRoYXQgaXMgQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgY2FuVXNlRE9NID0gISEoXG5cdFx0dHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcblx0XHR3aW5kb3cuZG9jdW1lbnQgJiZcblx0XHR3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudFxuXHQpO1xuXG5cdHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuXHRcdGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG5cdFx0Y2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cblx0XHRjYW5Vc2VFdmVudExpc3RlbmVyczpcblx0XHRcdGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG5cdFx0Y2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW5cblxuXHR9O1xuXG5cdGlmICh0cnVlKSB7XG5cdFx0IShfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBFeGVjdXRpb25FbnZpcm9ubWVudDtcblx0XHR9LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXywgZXhwb3J0cywgbW9kdWxlKSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuRXhlY3V0aW9uRW52aXJvbm1lbnQgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcblx0fVxuXG59KCkpO1xuXG5cbi8qKiovIH0pLFxuLyogMTc2ICovLFxuLyogMTc3ICovLFxuLyogMTc4ICovLFxuLyogMTc5ICovLFxuLyogMTgwICovLFxuLyogMTgxICovLFxuLyogMTgyICovLFxuLyogMTgzICovLFxuLyogMTg0ICovLFxuLyogMTg1ICovLFxuLyogMTg2ICovLFxuLyogMTg3ICovLFxuLyogMTg4ICovLFxuLyogMTg5ICovLFxuLyogMTkwICovLFxuLyogMTkxICovLFxuLyogMTkyICovLFxuLyogMTkzICovLFxuLyogMTk0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuXG5cbi8qKiovIH0pLFxuLyogMTk1ICovLFxuLyogMTk2ICovLFxuLyogMTk3ICovLFxuLyogMTk4ICovLFxuLyogMTk5ICovLFxuLyogMjAwICovLFxuLyogMjAxICovLFxuLyogMjAyICovLFxuLyogMjAzICovLFxuLyogMjA0ICovLFxuLyogMjA1ICovLFxuLyogMjA2ICovLFxuLyogMjA3ICovLFxuLyogMjA4ICovLFxuLyogMjA5ICovLFxuLyogMjEwICovLFxuLyogMjExICovLFxuLyogMjEyICovLFxuLyogMjEzICovLFxuLyogMjE0ICovLFxuLyogMjE1ICovLFxuLyogMjE2ICovLFxuLyogMjE3ICovLFxuLyogMjE4ICovLFxuLyogMjE5ICovLFxuLyogMjIwICovLFxuLyogMjIxICovLFxuLyogMjIyICovLFxuLyogMjIzICovLFxuLyogMjI0ICovLFxuLyogMjI1ICovLFxuLyogMjI2ICovLFxuLyogMjI3ICovLFxuLyogMjI4ICovLFxuLyogMjI5ICovLFxuLyogMjMwICovLFxuLyogMjMxICovLFxuLyogMjMyICovLFxuLyogMjMzICovLFxuLyogMjM0ICovLFxuLyogMjM1ICovLFxuLyogMjM2ICovLFxuLyogMjM3ICovLFxuLyogMjM4ICovLFxuLyogMjM5ICovLFxuLyogMjQwICovLFxuLyogMjQxICovLFxuLyogMjQyICovLFxuLyogMjQzICovLFxuLyogMjQ0ICovLFxuLyogMjQ1ICovLFxuLyogMjQ2ICovLFxuLyogMjQ3ICovLFxuLyogMjQ4ICovLFxuLyogMjQ5ICovLFxuLyogMjUwICovLFxuLyogMjUxICovLFxuLyogMjUyICovLFxuLyogMjUzICovLFxuLyogMjU0ICovLFxuLyogMjU1ICovLFxuLyogMjU2ICovLFxuLyogMjU3ICovLFxuLyogMjU4ICovLFxuLyogMjU5ICovLFxuLyogMjYwICovLFxuLyogMjYxICovLFxuLyogMjYyICovLFxuLyogMjYzICovLFxuLyogMjY0ICovLFxuLyogMjY1ICovLFxuLyogMjY2ICovLFxuLyogMjY3ICovLFxuLyogMjY4ICovLFxuLyogMjY5ICovLFxuLyogMjcwICovLFxuLyogMjcxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBSZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgYXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIE5FV1RBQiA9ICdfYmxhbmsnO1xuXG52YXIgT3V0Ym91bmRMaW5rID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ091dGJvdW5kTGluaycsXG4gIHByb3BUeXBlczoge1xuICAgIGV2ZW50TGFiZWw6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxuICB9LFxuICBzdGF0aWNzOiB7XG4gICAgdHJhY2tMaW5rOiBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2dhIHRyYWNraW5nIG5vdCBlbmFibGVkJyk7XG4gICAgfVxuICB9LFxuICBoYW5kbGVDbGljazogZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgZXZlbnRNZXRhID0geyBsYWJlbDogcHJvcHMuZXZlbnRMYWJlbCB9O1xuICAgIE91dGJvdW5kTGluay50cmFja0xpbmsoZXZlbnRNZXRhLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvcHMudGFyZ2V0ID09PSBORVdUQUIpIHtcbiAgICAgICAgd2luZG93Lm9wZW4ocHJvcHMudG8sIE5FV1RBQik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHByb3BzLnRvO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHByb3BzLm9uQ2xpY2spIHtcbiAgICAgIHByb3BzLm9uQ2xpY2soZSk7XG4gICAgfVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9wcyA9IGFzc2lnbih7fSwgdGhpcy5wcm9wcywge1xuICAgICAgaHJlZjogdGhpcy5wcm9wcy50byxcbiAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2tcbiAgICB9KTtcbiAgICBkZWxldGUgcHJvcHMuZXZlbnRMYWJlbDtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnYScsIHByb3BzKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gT3V0Ym91bmRMaW5rO1xuXG5cbi8qKiovIH0pLFxuLyogMjcyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qKlxuICogUmVhY3QgR29vZ2xlIEFuYWx5dGljcyBNb2R1bGVcbiAqXG4gKiBAcGFja2FnZSByZWFjdC1nYVxuICogQGF1dGhvciAgQWRhbSBMb2Z0aW5nIDxhZGFtQG1vemlsbGFmb3VuZGF0aW9uLm9yZz5cbiAqICAgICAgICAgIEF0dWwgVmFybWEgPGF0dWxAbW96aWxsYWZvdW5kYXRpb24ub3JnPlxuICovXG5cbi8qKlxuICogVXRpbGl0aWVzXG4gKi9cbnZhciBmb3JtYXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3NCk7XG52YXIgcmVtb3ZlTGVhZGluZ1NsYXNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNzYpO1xudmFyIHRyaW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNCk7XG5cbnZhciB3YXJuID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjMpO1xudmFyIGxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMjczKTtcblxudmFyIF9kZWJ1ZyA9IGZhbHNlO1xudmFyIF90aXRsZUNhc2UgPSB0cnVlO1xuXG52YXIgX2Zvcm1hdCA9IGZ1bmN0aW9uIChzKSB7XG4gIHJldHVybiBmb3JtYXQocywgX3RpdGxlQ2FzZSk7XG59O1xuXG52YXIgUmVhY3RHQSA9IHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKGdhVHJhY2tpbmdJRCwgb3B0aW9ucykge1xuICAgIGlmICghZ2FUcmFja2luZ0lEKSB7XG4gICAgICB3YXJuKCdnYVRyYWNraW5nSUQgaXMgcmVxdWlyZWQgaW4gaW5pdGlhbGl6ZSgpJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zLmRlYnVnICYmIG9wdGlvbnMuZGVidWcgPT09IHRydWUpIHtcbiAgICAgICAgX2RlYnVnID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMudGl0bGVDYXNlID09PSBmYWxzZSkge1xuICAgICAgICBfdGl0bGVDYXNlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5hbHl0aWNzL2Rldmd1aWRlcy9jb2xsZWN0aW9uL2FuYWx5dGljc2pzL1xuICAgIC8vIGpzY3M6ZGlzYWJsZVxuICAgIChmdW5jdGlvbiAoaSwgcywgbywgZywgciwgYSwgbSkge1xuICAgICAgaVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByO1xuICAgICAgaVtyXSA9IGlbcl0gfHwgZnVuY3Rpb24gKCkge1xuICAgICAgICAoaVtyXS5xID0gaVtyXS5xIHx8IFtdKS5wdXNoKGFyZ3VtZW50cyk7XG4gICAgICB9LCBpW3JdLmwgPSAxICogbmV3IERhdGUoKTtcbiAgICAgIGEgPSBzLmNyZWF0ZUVsZW1lbnQobyksXG4gICAgICAgICAgbSA9IHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobylbMF07XG4gICAgICBhLmFzeW5jID0gMTtcbiAgICAgIGEuc3JjID0gZztcbiAgICAgIG0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSwgbSk7XG4gICAgfSkod2luZG93LCBkb2N1bWVudCwgJ3NjcmlwdCcsICdodHRwczovL3d3dy5nb29nbGUtYW5hbHl0aWNzLmNvbS9hbmFseXRpY3MuanMnLCAnZ2EnKTtcbiAgICAvLyBqc2NzOmVuYWJsZVxuXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5nYU9wdGlvbnMpIHtcbiAgICAgIGdhKCdjcmVhdGUnLCBnYVRyYWNraW5nSUQsIG9wdGlvbnMuZ2FPcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2EoJ2NyZWF0ZScsIGdhVHJhY2tpbmdJRCwgJ2F1dG8nKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIGdhOlxuICAgKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBHQSBvYmplY3QuXG4gICAqL1xuICBnYTogZnVuY3Rpb24gKCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgZ2EuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgbG9nKCdjYWxsZWQgZ2EoXFwnYXJndW1lbnRzXFwnKTsnKTtcbiAgICAgICAgbG9nKCd3aXRoIGFyZ3VtZW50czogJyArIEpTT04uc3RyaW5naWZ5KFtdLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBnYTtcbiAgfSxcblxuICAvKipcbiAgICogc2V0OlxuICAgKiBHQSB0cmFja2VyIHNldCBtZXRob2RcbiAgICogQHBhcmFtIHtPYmplY3R9IGZpZWxkc09iamVjdCAtIGEgZmllbGQvdmFsdWUgcGFpciBvciBhIGdyb3VwIG9mIGZpZWxkL3ZhbHVlIHBhaXJzIG9uIHRoZSB0cmFja2VyXG4gICAqL1xuICBzZXQ6IGZ1bmN0aW9uIChmaWVsZHNPYmplY3QpIHtcbiAgICBpZiAodHlwZW9mIGdhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoIWZpZWxkc09iamVjdCkge1xuICAgICAgICB3YXJuKCdgZmllbGRzT2JqZWN0YCBpcyByZXF1aXJlZCBpbiAuc2V0KCknKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGZpZWxkc09iamVjdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgd2FybignRXhwZWN0ZWQgYGZpZWxkc09iamVjdGAgYXJnIHRvIGJlIGFuIE9iamVjdCcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyhmaWVsZHNPYmplY3QpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB3YXJuKCdlbXB0eSBgZmllbGRzT2JqZWN0YCBnaXZlbiB0byAuc2V0KCknKTtcbiAgICAgIH1cblxuICAgICAgZ2EoJ3NldCcsIGZpZWxkc09iamVjdCk7XG5cbiAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgbG9nKCdjYWxsZWQgZ2EoXFwnc2V0XFwnLCBmaWVsZHNPYmplY3QpOycpO1xuICAgICAgICBsb2coJ3dpdGggZmllbGRzT2JqZWN0OiAnICsgSlNPTi5zdHJpbmdpZnkoZmllbGRzT2JqZWN0KSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBzZW5kOlxuICAgKiBDbG9uZSBvZiB0aGUgbG93IGxldmVsIGBnYS5zZW5kYCBtZXRob2RcbiAgICogV0FSTklORzogTm8gdmFsaWRhdGlvbnMgd2lsbCBiZSBhcHBsaWVkIHRvIHRoaXNcbiAgICogQHBhcmFtICB7T2JqZWN0fSBmaWVsZE9iamVjdCAtIGZpZWxkIG9iamVjdCBmb3IgdHJhY2tpbmcgZGlmZmVyZW50IGFuYWx5dGljc1xuICAgKi9cbiAgc2VuZDogZnVuY3Rpb24gKGZpZWxkT2JqZWN0KSB7XG4gICAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZ2EoJ3NlbmQnLCBmaWVsZE9iamVjdCk7XG5cbiAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgbG9nKCdjYWxsZWQgZ2EoXFwnc2VuZFxcJywgZmllbGRPYmplY3QpOycpO1xuICAgICAgICBsb2coJ3dpdGggZmllbGRPYmplY3Q6ICcgKyBKU09OLnN0cmluZ2lmeShmaWVsZE9iamVjdCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogcGFnZXZpZXc6XG4gICAqIEJhc2ljIEdBIHBhZ2V2aWV3IHRyYWNraW5nXG4gICAqIEBwYXJhbSAge1N0cmluZ30gcGF0aCAtIHRoZSBjdXJyZW50IHBhZ2UgcGFnZSBlLmcuICcvYWJvdXQnXG4gICAqL1xuICBwYWdldmlldzogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICBpZiAoIXBhdGgpIHtcbiAgICAgIHdhcm4oJ3BhdGggaXMgcmVxdWlyZWQgaW4gLnBhZ2V2aWV3KCknKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwYXRoID0gdHJpbShwYXRoKTtcbiAgICBpZiAocGF0aCA9PT0gJycpIHtcbiAgICAgIHdhcm4oJ3BhdGggY2Fubm90IGJlIGFuIGVtcHR5IHN0cmluZyBpbiAucGFnZXZpZXcoKScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZ2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGdhKCdzZW5kJywgJ3BhZ2V2aWV3JywgcGF0aCk7XG5cbiAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgbG9nKCdjYWxsZWQgZ2EoXFwnc2VuZFxcJywgXFwncGFnZXZpZXdcXCcsIHBhdGgpOycpO1xuICAgICAgICBsb2coJ3dpdGggcGF0aDogJyArIHBhdGgpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogbW9kYWx2aWV3OlxuICAgKiBhIHByb3h5IHRvIGJhc2ljIEdBIHBhZ2V2aWV3IHRyYWNraW5nIHRvIGNvbnNpc3RlbnRseSB0cmFja1xuICAgKiBtb2RhbCB2aWV3cyB0aGF0IGFyZSBhbiBlcXVpdmFsZW50IFVYIHRvIGEgdHJhZGl0aW9uYWwgcGFnZXZpZXdcbiAgICogQHBhcmFtICB7U3RyaW5nfSBtb2RhbE5hbWUgZS5nLiAnYWRkLW9yLWVkaXQtY2x1YidcbiAgICovXG4gIG1vZGFsdmlldzogZnVuY3Rpb24gKG1vZGFsTmFtZSkge1xuICAgIGlmICghbW9kYWxOYW1lKSB7XG4gICAgICB3YXJuKCdtb2RhbE5hbWUgaXMgcmVxdWlyZWQgaW4gLm1vZGFsdmlldyhtb2RhbE5hbWUpJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbW9kYWxOYW1lID0gdHJpbShtb2RhbE5hbWUpO1xuICAgIG1vZGFsTmFtZSA9IHJlbW92ZUxlYWRpbmdTbGFzaChtb2RhbE5hbWUpO1xuXG4gICAgaWYgKG1vZGFsTmFtZSA9PT0gJycpIHtcbiAgICAgIHdhcm4oJ21vZGFsTmFtZSBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nIG9yIGEgc2luZ2xlIC8gaW4gLm1vZGFsdmlldygpJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbW9kYWxOYW1lID0gdHJpbShtb2RhbE5hbWUpO1xuICAgICAgdmFyIHBhdGggPSAnL21vZGFsLycgKyBtb2RhbE5hbWU7XG4gICAgICBnYSgnc2VuZCcsICdwYWdldmlldycsIHBhdGgpO1xuXG4gICAgICBpZiAoX2RlYnVnKSB7XG4gICAgICAgIGxvZygnY2FsbGVkIGdhKFxcJ3NlbmRcXCcsIFxcJ3BhZ2V2aWV3XFwnLCBwYXRoKTsnKTtcbiAgICAgICAgbG9nKCd3aXRoIHBhdGg6ICcgKyBwYXRoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIHRpbWluZzpcbiAgICogR0EgdGltaW5nXG4gICAqIEBwYXJhbSBhcmdzLmNhdGVnb3J5IHtTdHJpbmd9IHJlcXVpcmVkXG4gICAqIEBwYXJhbSBhcmdzLnZhcmlhYmxlIHtTdHJpbmd9IHJlcXVpcmVkXG4gICAqIEBwYXJhbSBhcmdzLnZhbHVlICB7SW50fSAgcmVxdWlyZWRcbiAgICogQHBhcmFtIGFyZ3MubGFiZWwgIHtTdHJpbmd9IHJlcXVpcmVkXG4gICAqL1xuICB0aW1pbmc6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKCFhcmdzIHx8ICFhcmdzLmNhdGVnb3J5IHx8ICFhcmdzLnZhcmlhYmxlXG4gICAgICAgICAgfHwgIWFyZ3MudmFsdWUgfHwgdHlwZW9mIGFyZ3MudmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHdhcm4oJ2FyZ3MuY2F0ZWdvcnksIGFyZ3MudmFyaWFibGUgJyArXG4gICAgICAgICAgICAgICdBTkQgYXJncy52YWx1ZSBhcmUgcmVxdWlyZWQgaW4gdGltaW5nKCkgJyArXG4gICAgICAgICAgICAgICdBTkQgYXJncy52YWx1ZSBoYXMgdG8gYmUgYSBudW1iZXInKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvL1JlcXVpcmVkIEZpZWxkc1xuICAgICAgdmFyIGZpZWxkT2JqZWN0ID0ge1xuICAgICAgICBoaXRUeXBlOiAndGltaW5nJyxcbiAgICAgICAgdGltaW5nQ2F0ZWdvcnk6IF9mb3JtYXQoYXJncy5jYXRlZ29yeSksXG4gICAgICAgIHRpbWluZ1ZhcjogX2Zvcm1hdChhcmdzLnZhcmlhYmxlKSxcbiAgICAgICAgdGltaW5nVmFsdWU6IGFyZ3MudmFsdWVcbiAgICAgIH07XG5cbiAgICAgIGlmIChhcmdzLmxhYmVsKSB7XG4gICAgICAgIGZpZWxkT2JqZWN0LnRpbWluZ0xhYmVsID0gX2Zvcm1hdChhcmdzLmxhYmVsKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZW5kKGZpZWxkT2JqZWN0KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIGV2ZW50OlxuICAgKiBHQSBldmVudCB0cmFja2luZ1xuICAgKiBAcGFyYW0gYXJncy5jYXRlZ29yeSB7U3RyaW5nfSByZXF1aXJlZFxuICAgKiBAcGFyYW0gYXJncy5hY3Rpb24ge1N0cmluZ30gcmVxdWlyZWRcbiAgICogQHBhcmFtIGFyZ3MubGFiZWwge1N0cmluZ30gb3B0aW9uYWxcbiAgICogQHBhcmFtIGFyZ3MudmFsdWUge0ludH0gb3B0aW9uYWxcbiAgICogQHBhcmFtIGFyZ3Mubm9uSW50ZXJhY3Rpb24ge2Jvb2xlYW59IG9wdGlvbmFsXG4gICAqL1xuICBldmVudDogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIGdhID09PSAnZnVuY3Rpb24nKSB7XG5cbiAgICAgIC8vIFNpbXBsZSBWYWxpZGF0aW9uXG4gICAgICBpZiAoIWFyZ3MgfHwgIWFyZ3MuY2F0ZWdvcnkgfHwgIWFyZ3MuYWN0aW9uKSB7XG4gICAgICAgIHdhcm4oJ2FyZ3MuY2F0ZWdvcnkgQU5EIGFyZ3MuYWN0aW9uIGFyZSByZXF1aXJlZCBpbiBldmVudCgpJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUmVxdWlyZWQgRmllbGRzXG4gICAgICB2YXIgZmllbGRPYmplY3QgPSB7XG4gICAgICAgIGhpdFR5cGU6ICdldmVudCcsXG4gICAgICAgIGV2ZW50Q2F0ZWdvcnk6IF9mb3JtYXQoYXJncy5jYXRlZ29yeSksXG4gICAgICAgIGV2ZW50QWN0aW9uOiBfZm9ybWF0KGFyZ3MuYWN0aW9uKVxuICAgICAgfTtcblxuICAgICAgLy8gT3B0aW9uYWwgRmllbGRzXG4gICAgICBpZiAoYXJncy5sYWJlbCkge1xuICAgICAgICBmaWVsZE9iamVjdC5ldmVudExhYmVsID0gX2Zvcm1hdChhcmdzLmxhYmVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFyZ3MudmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmdzLnZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgIHdhcm4oJ0V4cGVjdGVkIGBhcmdzLnZhbHVlYCBhcmcgdG8gYmUgYSBOdW1iZXIuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmllbGRPYmplY3QuZXZlbnRWYWx1ZSA9IGFyZ3MudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFyZ3Mubm9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmdzLm5vbkludGVyYWN0aW9uICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICB3YXJuKCdgYXJncy5ub25JbnRlcmFjdGlvbmAgbXVzdCBiZSBhIGJvb2xlYW4uJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmllbGRPYmplY3Qubm9uSW50ZXJhY3Rpb24gPSBhcmdzLm5vbkludGVyYWN0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhcmdzLnRyYW5zcG9ydCkge1xuICAgICAgICBpZiAodHlwZW9mIGFyZ3MudHJhbnNwb3J0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHdhcm4oJ2BhcmdzLnRyYW5zcG9ydGAgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoWydiZWFjb24nLCAneGhyJywgJ2ltYWdlJ10uaW5kZXhPZihhcmdzLnRyYW5zcG9ydCkgPT09IC0xKSB7XG4gICAgICAgICAgICB3YXJuKCdgYXJncy50cmFuc3BvcnRgIG11c3QgYmUgZWl0aGVyIG9uZSBvZiB0aGVzZSB2YWx1ZXM6IGBiZWFjb25gLCBgeGhyYCBvciBgaW1hZ2VgJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmllbGRPYmplY3QudHJhbnNwb3J0ID0gYXJncy50cmFuc3BvcnQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gU2VuZCB0byBHQVxuICAgICAgdGhpcy5zZW5kKGZpZWxkT2JqZWN0KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIGV4Y2VwdGlvbjpcbiAgICogR0EgZXhjZXB0aW9uIHRyYWNraW5nXG4gICAqIEBwYXJhbSBhcmdzLmRlc2NyaXB0aW9uIHtTdHJpbmd9IG9wdGlvbmFsXG4gICAqIEBwYXJhbSBhcmdzLmZhdGFsIHtib29sZWFufSBvcHRpb25hbFxuICAgKi9cbiAgZXhjZXB0aW9uOiBmdW5jdGlvbiAoYXJncykge1xuICAgIGlmICh0eXBlb2YgZ2EgPT09ICdmdW5jdGlvbicpIHtcblxuICAgICAgLy8gUmVxdWlyZWQgRmllbGRzXG4gICAgICB2YXIgZmllbGRPYmplY3QgPSB7XG4gICAgICAgIGhpdFR5cGU6ICdleGNlcHRpb24nXG4gICAgICB9O1xuXG4gICAgICAvLyBPcHRpb25hbCBGaWVsZHNcbiAgICAgIGlmIChhcmdzLmRlc2NyaXB0aW9uKSB7XG4gICAgICAgIGZpZWxkT2JqZWN0LmV4RGVzY3JpcHRpb24gPSBfZm9ybWF0KGFyZ3MuZGVzY3JpcHRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGFyZ3MuZmF0YWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJncy5mYXRhbCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgd2FybignYGFyZ3MuZmF0YWxgIG11c3QgYmUgYSBib29sZWFuLicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpZWxkT2JqZWN0LmV4RmF0YWwgPSBhcmdzLmZhdGFsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFNlbmQgdG8gR0FcbiAgICAgIHRoaXMuc2VuZChmaWVsZE9iamVjdCk7XG4gICAgfVxuICB9LFxuXG4gIHBsdWdpbjoge1xuICAgIC8qKlxuICAgICAqIHJlcXVpcmU6XG4gICAgICogR0EgcmVxdWlyZXMgYSBwbHVnaW5cbiAgICAgKiBAcGFyYW0gbmFtZSB7U3RyaW5nfSBlLmcuICdlY29tbWVyY2UnIG9yICdteXBsdWdpbidcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB7T2JqZWN0fSBvcHRpb25hbCBlLmcge3BhdGg6ICcvbG9nJywgZGVidWc6IHRydWV9XG4gICAgICovXG4gICAgcmVxdWlyZTogZnVuY3Rpb24gKG5hbWUsIG9wdGlvbnMpIHtcbiAgICAgIGlmICh0eXBlb2YgZ2EgPT09ICdmdW5jdGlvbicpIHtcblxuICAgICAgICAvLyBSZXF1aXJlZCBGaWVsZHNcbiAgICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgICAgd2FybignYG5hbWVgIGlzIHJlcXVpcmVkIGluIC5yZXF1aXJlKCknKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBuYW1lID0gdHJpbShuYW1lKTtcbiAgICAgICAgaWYgKG5hbWUgPT09ICcnKSB7XG4gICAgICAgICAgd2FybignYG5hbWVgIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcgaW4gLnJlcXVpcmUoKScpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9wdGlvbmFsIEZpZWxkc1xuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHdhcm4oJ0V4cGVjdGVkIGBvcHRpb25zYCBhcmcgdG8gYmUgYW4gT2JqZWN0Jyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKE9iamVjdC5rZXlzKG9wdGlvbnMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgd2FybignRW1wdHkgYG9wdGlvbnNgIGdpdmVuIHRvIC5yZXF1aXJlKCknKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBnYSgncmVxdWlyZScsIG5hbWUsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgaWYgKF9kZWJ1Zykge1xuICAgICAgICAgICAgbG9nKCdjYWxsZWQgZ2EoXFwncmVxdWlyZVxcJywgXFwnJyArIG5hbWUgKyAnXFwnLCAnICsgSlNPTi5zdHJpbmdpZnkob3B0aW9ucykgKyAnKTsnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2EoJ3JlcXVpcmUnLCBuYW1lKTtcblxuICAgICAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgICAgIGxvZygnY2FsbGVkIGdhKFxcJ3JlcXVpcmVcXCcsIFxcJycgKyBuYW1lICsgJ1xcJyk7Jyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGV4ZWN1dGU6XG4gICAgICogR0EgZXhlY3V0ZSBhY3Rpb24gZm9yIHBsdWdpblxuICAgICAqIFRha2VzIHZhcmlhYmxlIG51bWJlciBvZiBhcmd1bWVudHNcbiAgICAgKiBAcGFyYW0gcGx1Z2luTmFtZSB7U3RyaW5nfSBlLmcuICdlY29tbWVyY2UnIG9yICdteXBsdWdpbidcbiAgICAgKiBAcGFyYW0gYWN0aW9uIHtTdHJpbmd9IGUuZy4gJ2FkZEl0ZW0nIG9yICdteUN1c3RvbUFjdGlvbidcbiAgICAgKiBAcGFyYW0gYWN0aW9uVHlwZSB7U3RyaW5nfSBvcHRpb25hbCBlLmcuICdkZXRhaWwnXG4gICAgICogQHBhcmFtIHBheWxvYWQge09iamVjdH0gb3B0aW9uYWwgZS5nIHsgaWQ6ICcxeDVlJywgbmFtZSA6ICdNeSBwcm9kdWN0IHRvIHRyYWNrJyB9XG4gICAgICovXG4gICAgZXhlY3V0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgcGx1Z2luTmFtZSA9IGFyZ3NbMF07XG4gICAgICB2YXIgYWN0aW9uID0gYXJnc1sxXTtcbiAgICAgIHZhciBwYXlsb2FkO1xuICAgICAgdmFyIGFjdGlvblR5cGU7XG5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICBwYXlsb2FkID0gYXJnc1syXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGlvblR5cGUgPSBhcmdzWzJdO1xuICAgICAgICBwYXlsb2FkID0gYXJnc1szXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAodHlwZW9mIHBsdWdpbk5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgd2FybignRXhwZWN0ZWQgYHBsdWdpbk5hbWVgIGFyZyB0byBiZSBhIFN0cmluZy4nKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYWN0aW9uICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHdhcm4oJ0V4cGVjdGVkIGBhY3Rpb25gIGFyZyB0byBiZSBhIFN0cmluZy4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY29tbWFuZCA9IHBsdWdpbk5hbWUgKyAnOicgKyBhY3Rpb247XG4gICAgICAgICAgcGF5bG9hZCA9IHBheWxvYWQgfHwgbnVsbDtcbiAgICAgICAgICBpZiAoYWN0aW9uVHlwZSAmJiBwYXlsb2FkKSB7XG4gICAgICAgICAgICBnYShjb21tYW5kLCBhY3Rpb25UeXBlLCBwYXlsb2FkKTtcbiAgICAgICAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgICAgICAgbG9nKCdjYWxsZWQgZ2EoXFwnJyArIGNvbW1hbmQgKyAnXFwnKTsnKTtcbiAgICAgICAgICAgICAgbG9nKCdhY3Rpb25UeXBlOiBcIicgKyBhY3Rpb25UeXBlICsgJ1wiIHdpdGggcGF5bG9hZDogJyArIEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHBheWxvYWQpIHtcbiAgICAgICAgICAgIGdhKGNvbW1hbmQsIHBheWxvYWQpO1xuICAgICAgICAgICAgaWYgKF9kZWJ1Zykge1xuICAgICAgICAgICAgICBsb2coJ2NhbGxlZCBnYShcXCcnICsgY29tbWFuZCArICdcXCcpOycpO1xuICAgICAgICAgICAgICBsb2coJ3dpdGggcGF5bG9hZDogJyArIEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2EoY29tbWFuZCk7XG4gICAgICAgICAgICBpZiAoX2RlYnVnKSB7XG4gICAgICAgICAgICAgIGxvZygnY2FsbGVkIGdhKFxcJycgKyBjb21tYW5kICsgJ1xcJyk7Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIG91dGJvdW5kTGluazpcbiAgICogR0Egb3V0Ym91bmRMaW5rIHRyYWNraW5nXG4gICAqIEBwYXJhbSBhcmdzLmxhYmVsIHtTdHJpbmd9IGUuZy4gdXJsLCBvciAnQ3JlYXRlIGFuIEFjY291bnQnXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGhpdENhbGxiYWNrIC0gQ2FsbGVkIGFmdGVyIHByb2Nlc3NpbmcgYSBoaXQuXG4gICAqL1xuICBvdXRib3VuZExpbms6IGZ1bmN0aW9uIChhcmdzLCBoaXRDYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2YgaGl0Q2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHdhcm4oJ2hpdENhbGxiYWNrIGZ1bmN0aW9uIGlzIHJlcXVpcmVkJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAvLyBTaW1wbGUgVmFsaWRhdGlvblxuICAgICAgaWYgKCFhcmdzIHx8ICFhcmdzLmxhYmVsKSB7XG4gICAgICAgIHdhcm4oJ2FyZ3MubGFiZWwgaXMgcmVxdWlyZWQgaW4gb3V0Ym91bmRMaW5rKCknKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXF1aXJlZCBGaWVsZHNcbiAgICAgIHZhciBmaWVsZE9iamVjdCA9IHtcbiAgICAgICAgaGl0VHlwZTogJ2V2ZW50JyxcbiAgICAgICAgZXZlbnRDYXRlZ29yeTogJ091dGJvdW5kJyxcbiAgICAgICAgZXZlbnRBY3Rpb246ICdDbGljaycsXG4gICAgICAgIGV2ZW50TGFiZWw6IF9mb3JtYXQoYXJncy5sYWJlbClcbiAgICAgIH07XG5cbiAgICAgIHZhciBzYWZldHlDYWxsYmFja0NhbGxlZCA9IGZhbHNlO1xuICAgICAgdmFyIHNhZmV0eUNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIC8vIFRoaXMgcHJldmVudHMgYSBkZWxheWVkIHJlc3BvbnNlIGZyb20gR0FcbiAgICAgICAgLy8gY2F1c2luZyBoaXRDYWxsYmFjayBmcm9tIGJlaW5nIGZpcmVkIHR3aWNlXG4gICAgICAgIHNhZmV0eUNhbGxiYWNrQ2FsbGVkID0gdHJ1ZTtcblxuICAgICAgICBoaXRDYWxsYmFjaygpO1xuICAgICAgfTtcblxuICAgICAgLy8gVXNpbmcgYSB0aW1lb3V0IHRvIGVuc3VyZSB0aGUgZXhlY3V0aW9uIG9mIGNyaXRpY2FsIGFwcGxpY2F0aW9uIGNvZGVcbiAgICAgIC8vIGluIHRoZSBjYXNlIHdoZW4gdGhlIEdBIHNlcnZlciBtaWdodCBiZSBkb3duXG4gICAgICAvLyBvciBhbiBhZCBibG9ja2VyIHByZXZlbnRzIHNlbmRpbmcgdGhlIGRhdGFcblxuICAgICAgLy8gcmVnaXN0ZXIgc2FmZXR5IG5ldCB0aW1lb3V0OlxuICAgICAgdmFyIHQgPSBzZXRUaW1lb3V0KHNhZmV0eUNhbGxiYWNrLCAyNTApO1xuXG4gICAgICB2YXIgY2xlYXJhYmxlQ2FsbGJhY2tGb3JHQSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHQpO1xuICAgICAgICBpZiAoIXNhZmV0eUNhbGxiYWNrQ2FsbGVkKSB7XG4gICAgICAgICAgaGl0Q2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZmllbGRPYmplY3QuaGl0Q2FsbGJhY2sgPSBjbGVhcmFibGVDYWxsYmFja0ZvckdBO1xuXG4gICAgICAvLyBTZW5kIHRvIEdBXG4gICAgICB0aGlzLnNlbmQoZmllbGRPYmplY3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBnYSBpcyBub3QgZGVmaW5lZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBzbyB0aGUgYXBwbGljYXRpb25cbiAgICAgIC8vIGNvbnRpbnVlcyB0byB3b3JrIGFzIGV4cGVjdGVkXG4gICAgICBzZXRUaW1lb3V0KGhpdENhbGxiYWNrLCAwKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBPdXRib3VuZExpbmsgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3MSk7XG5PdXRib3VuZExpbmsub3JpZ1RyYWNrTGluayA9IE91dGJvdW5kTGluay50cmFja0xpbms7XG5PdXRib3VuZExpbmsudHJhY2tMaW5rID0gUmVhY3RHQS5vdXRib3VuZExpbmsuYmluZChSZWFjdEdBKTtcblJlYWN0R0EuT3V0Ym91bmRMaW5rID0gT3V0Ym91bmRMaW5rO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0R0E7XG5cblxuLyoqKi8gfSksXG4vKiAyNzMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZnVuY3Rpb24gbG9nKHMpIHtcbiAgY29uc29sZS5pbmZvKCdbcmVhY3QtZ2FdJywgcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbG9nO1xuXG5cbi8qKiovIH0pLFxuLyogMjc0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBtaWdodEJlRW1haWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3NSk7XG52YXIgdG9UaXRsZUNhc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3Nyk7XG52YXIgd2FybiA9IF9fd2VicGFja19yZXF1aXJlX18oMTIzKTtcblxudmFyIF9yZWRhY3RlZCA9ICdSRURBQ1RFRCAoUG90ZW50aWFsIEVtYWlsIEFkZHJlc3MpJztcblxuZnVuY3Rpb24gZm9ybWF0KHMsIHRpdGxlQ2FzZSkge1xuICBpZiAobWlnaHRCZUVtYWlsKHMpKSB7XG4gICAgd2FybignVGhpcyBhcmcgbG9va3MgbGlrZSBhbiBlbWFpbCBhZGRyZXNzLCByZWRhY3RpbmcuJyk7XG4gICAgcmV0dXJuIF9yZWRhY3RlZDtcbiAgfVxuXG4gIGlmICh0aXRsZUNhc2UpIHtcbiAgICByZXR1cm4gdG9UaXRsZUNhc2Uocyk7XG4gIH1cblxuICByZXR1cm4gcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JtYXQ7XG5cblxuLyoqKi8gfSksXG4vKiAyNzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gU2VlIGlmIHMgY291bGQgYmUgYW4gZW1haWwgYWRkcmVzcy4gV2UgZG9uJ3Qgd2FudCB0byBzZW5kIHBlcnNvbmFsIGRhdGEgbGlrZSBlbWFpbC5cbi8vIGh0dHBzOi8vc3VwcG9ydC5nb29nbGUuY29tL2FuYWx5dGljcy9hbnN3ZXIvMjc5NTk4Mz9obD1lblxuZnVuY3Rpb24gbWlnaHRCZUVtYWlsKHMpIHtcbiAgLy8gVGhlcmUncyBubyBwb2ludCB0cnlpbmcgdG8gdmFsaWRhdGUgcmZjODIyIGZ1bGx5LCBqdXN0IGxvb2sgZm9yIC4uLkAuLi5cbiAgcmV0dXJuICgvW15AXStAW15AXSsvKS50ZXN0KHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1pZ2h0QmVFbWFpbDtcblxuXG4vKioqLyB9KSxcbi8qIDI3NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5mdW5jdGlvbiByZW1vdmVMZWFkaW5nU2xhc2gocykge1xuICBpZiAocy5zdWJzdHJpbmcoMCwgMSkgPT09ICcvJykge1xuICAgIHMgPSBzLnN1YnN0cmluZygxKTtcbiAgfVxuXG4gIHJldHVybiBzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbW92ZUxlYWRpbmdTbGFzaDtcblxuXG4vKioqLyB9KSxcbi8qIDI3NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKipcbiAqIFRvIFRpdGxlIENhc2UgMi4xIC0gaHR0cDovL2luZGl2aWRlZC5jb20vY29kZS90by10aXRsZS1jYXNlL1xuICogQ29weXJpZ2h0IDIwMDgtMjAxMyBEYXZpZCBHb3VjaC4gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICogaHR0cHM6Ly9naXRodWIuY29tL2dvdWNoL3RvLXRpdGxlLWNhc2VcbiAqL1xuXG52YXIgdHJpbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTI0KTtcblxuZnVuY3Rpb24gdG9UaXRsZUNhc2Uocykge1xuICB2YXIgc21hbGxXb3JkcyA9IC9eKGF8YW58YW5kfGFzfGF0fGJ1dHxieXxlbnxmb3J8aWZ8aW58bm9yfG9mfG9ufG9yfHBlcnx0aGV8dG98dnM/XFwuP3x2aWEpJC9pO1xuICBzID0gdHJpbShzKTtcblxuICByZXR1cm4gcy5yZXBsYWNlKC9bQS1aYS16MC05XFx1MDBDMC1cXHUwMEZGXStbXlxccy1dKi9nLCBmdW5jdGlvbiAobWF0Y2gsIGluZGV4LCB0aXRsZSkge1xuICAgIGlmIChpbmRleCA+IDAgJiZcbiAgICAgICAgaW5kZXggKyBtYXRjaC5sZW5ndGggIT09IHRpdGxlLmxlbmd0aCAmJlxuICAgICAgICBtYXRjaC5zZWFyY2goc21hbGxXb3JkcykgPiAtMSAmJlxuICAgICAgICB0aXRsZS5jaGFyQXQoaW5kZXggLSAyKSAhPT0gJzonICYmXG4gICAgICAgICh0aXRsZS5jaGFyQXQoaW5kZXggKyBtYXRjaC5sZW5ndGgpICE9PSAnLScgfHwgdGl0bGUuY2hhckF0KGluZGV4IC0gMSkgPT09ICctJykgJiZcbiAgICAgICAgdGl0bGUuY2hhckF0KGluZGV4IC0gMSkuc2VhcmNoKC9bXlxccy1dLykgPCAwKSB7XG4gICAgICByZXR1cm4gbWF0Y2gudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBpZiAobWF0Y2guc3Vic3RyKDEpLnNlYXJjaCgvW0EtWl18XFwuLi8pID4gLTEpIHtcbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2guY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBtYXRjaC5zdWJzdHIoMSk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvVGl0bGVDYXNlO1xuXG5cbi8qKiovIH0pLFxuLyogMjc4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBSZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgUmVhY3RET00gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMTc1KTtcbnZhciBNb2RhbFBvcnRhbCA9IFJlYWN0LmNyZWF0ZUZhY3RvcnkoX193ZWJwYWNrX3JlcXVpcmVfXygyNzkpKTtcbnZhciBhcmlhQXBwSGlkZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4MCk7XG52YXIgZWxlbWVudENsYXNzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzMpO1xudmFyIHJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNykudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI7XG52YXIgQXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NSk7XG5cbnZhciBTYWZlSFRNTEVsZW1lbnQgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyB3aW5kb3cuSFRNTEVsZW1lbnQgOiB7fTtcbnZhciBBcHBFbGVtZW50ID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuYm9keSA6IHthcHBlbmRDaGlsZDogZnVuY3Rpb24oKSB7fX07XG5cbmZ1bmN0aW9uIGdldFBhcmVudEVsZW1lbnQocGFyZW50U2VsZWN0b3IpIHtcbiAgcmV0dXJuIHBhcmVudFNlbGVjdG9yKCk7XG59XG5cbnZhciBNb2RhbCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblxuICBkaXNwbGF5TmFtZTogJ01vZGFsJyxcbiAgc3RhdGljczoge1xuICAgIHNldEFwcEVsZW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgQXBwRWxlbWVudCA9IGFyaWFBcHBIaWRlci5zZXRFbGVtZW50KGVsZW1lbnQpO1xuICAgIH0sXG4gICAgaW5qZWN0Q1NTOiBmdW5jdGlvbigpIHtcbiAgICAgIFwicHJvZHVjdGlvblwiICE9PSBcInByb2R1Y3Rpb25cIlxuICAgICAgICAmJiBjb25zb2xlLndhcm4oJ1JlYWN0LU1vZGFsOiBpbmplY3RDU1MgaGFzIGJlZW4gZGVwcmVjYXRlZCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdhbmQgbm8gbG9uZ2VyIGhhcyBhbnkgZWZmZWN0LiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBsYXRlciB2ZXJzaW9uJyk7XG4gICAgfVxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGlzT3BlbjogUmVhY3QuUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBzdHlsZTogUmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGNvbnRlbnQ6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgICBvdmVybGF5OiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gICAgfSksXG4gICAgcG9ydGFsQ2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFwcEVsZW1lbnQ6IFJlYWN0LlByb3BUeXBlcy5pbnN0YW5jZU9mKFNhZmVIVE1MRWxlbWVudCksXG4gICAgb25BZnRlck9wZW46IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uUmVxdWVzdENsb3NlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBjbG9zZVRpbWVvdXRNUzogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBhcmlhSGlkZUFwcDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvdWxkQ2xvc2VPbk92ZXJsYXlDbGljazogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgcGFyZW50U2VsZWN0b3I6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIHJvbGU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGVudExhYmVsOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWRcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNPcGVuOiBmYWxzZSxcbiAgICAgIHBvcnRhbENsYXNzTmFtZTogJ1JlYWN0TW9kYWxQb3J0YWwnLFxuICAgICAgYXJpYUhpZGVBcHA6IHRydWUsXG4gICAgICBjbG9zZVRpbWVvdXRNUzogMCxcbiAgICAgIHNob3VsZENsb3NlT25PdmVybGF5Q2xpY2s6IHRydWUsXG4gICAgICBwYXJlbnRTZWxlY3RvcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQuYm9keTsgfVxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMubm9kZS5jbGFzc05hbWUgPSB0aGlzLnByb3BzLnBvcnRhbENsYXNzTmFtZTtcblxuICAgIHZhciBwYXJlbnQgPSBnZXRQYXJlbnRFbGVtZW50KHRoaXMucHJvcHMucGFyZW50U2VsZWN0b3IpO1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLm5vZGUpO1xuICAgIHRoaXMucmVuZGVyUG9ydGFsKHRoaXMucHJvcHMpO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uKG5ld1Byb3BzKSB7XG4gICAgdmFyIGN1cnJlbnRQYXJlbnQgPSBnZXRQYXJlbnRFbGVtZW50KHRoaXMucHJvcHMucGFyZW50U2VsZWN0b3IpO1xuICAgIHZhciBuZXdQYXJlbnQgPSBnZXRQYXJlbnRFbGVtZW50KG5ld1Byb3BzLnBhcmVudFNlbGVjdG9yKTtcblxuICAgIGlmKG5ld1BhcmVudCAhPT0gY3VycmVudFBhcmVudCkge1xuICAgICAgY3VycmVudFBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLm5vZGUpO1xuICAgICAgbmV3UGFyZW50LmFwcGVuZENoaWxkKHRoaXMubm9kZSk7XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJQb3J0YWwobmV3UHJvcHMpO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5hcmlhSGlkZUFwcCkge1xuICAgICAgYXJpYUFwcEhpZGVyLnNob3codGhpcy5wcm9wcy5hcHBFbGVtZW50KTtcbiAgICB9XG5cbiAgICBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKHRoaXMubm9kZSk7XG4gICAgdmFyIHBhcmVudCA9IGdldFBhcmVudEVsZW1lbnQodGhpcy5wcm9wcy5wYXJlbnRTZWxlY3Rvcik7XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMubm9kZSk7XG4gICAgZWxlbWVudENsYXNzKGRvY3VtZW50LmJvZHkpLnJlbW92ZSgnUmVhY3RNb2RhbF9fQm9keS0tb3BlbicpO1xuICB9LFxuXG4gIHJlbmRlclBvcnRhbDogZnVuY3Rpb24ocHJvcHMpIHtcbiAgICBpZiAocHJvcHMuaXNPcGVuKSB7XG4gICAgICBlbGVtZW50Q2xhc3MoZG9jdW1lbnQuYm9keSkuYWRkKCdSZWFjdE1vZGFsX19Cb2R5LS1vcGVuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnRDbGFzcyhkb2N1bWVudC5ib2R5KS5yZW1vdmUoJ1JlYWN0TW9kYWxfX0JvZHktLW9wZW4nKTtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuYXJpYUhpZGVBcHApIHtcbiAgICAgIGFyaWFBcHBIaWRlci50b2dnbGUocHJvcHMuaXNPcGVuLCBwcm9wcy5hcHBFbGVtZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLnBvcnRhbCA9IHJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKHRoaXMsIE1vZGFsUG9ydGFsKEFzc2lnbih7fSwgcHJvcHMsIHtkZWZhdWx0U3R5bGVzOiBNb2RhbC5kZWZhdWx0U3R5bGVzfSkpLCB0aGlzLm5vZGUpO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBSZWFjdC5ET00ubm9zY3JpcHQoKTtcbiAgfVxufSk7XG5cbk1vZGFsLmRlZmF1bHRTdHlsZXMgPSB7XG4gIG92ZXJsYXk6IHtcbiAgICBwb3NpdGlvbiAgICAgICAgOiAnZml4ZWQnLFxuICAgIHRvcCAgICAgICAgICAgICA6IDAsXG4gICAgbGVmdCAgICAgICAgICAgIDogMCxcbiAgICByaWdodCAgICAgICAgICAgOiAwLFxuICAgIGJvdHRvbSAgICAgICAgICA6IDAsXG4gICAgYmFja2dyb3VuZENvbG9yIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43NSknXG4gIH0sXG4gIGNvbnRlbnQ6IHtcbiAgICBwb3NpdGlvbiAgICAgICAgICAgICAgICA6ICdhYnNvbHV0ZScsXG4gICAgdG9wICAgICAgICAgICAgICAgICAgICAgOiAnNDBweCcsXG4gICAgbGVmdCAgICAgICAgICAgICAgICAgICAgOiAnNDBweCcsXG4gICAgcmlnaHQgICAgICAgICAgICAgICAgICAgOiAnNDBweCcsXG4gICAgYm90dG9tICAgICAgICAgICAgICAgICAgOiAnNDBweCcsXG4gICAgYm9yZGVyICAgICAgICAgICAgICAgICAgOiAnMXB4IHNvbGlkICNjY2MnLFxuICAgIGJhY2tncm91bmQgICAgICAgICAgICAgIDogJyNmZmYnLFxuICAgIG92ZXJmbG93ICAgICAgICAgICAgICAgIDogJ2F1dG8nLFxuICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIDogJ3RvdWNoJyxcbiAgICBib3JkZXJSYWRpdXMgICAgICAgICAgICA6ICc0cHgnLFxuICAgIG91dGxpbmUgICAgICAgICAgICAgICAgIDogJ25vbmUnLFxuICAgIHBhZGRpbmcgICAgICAgICAgICAgICAgIDogJzIwcHgnXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNb2RhbFxuXG5cbi8qKiovIH0pLFxuLyogMjc5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBSZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgZGl2ID0gUmVhY3QuRE9NLmRpdjtcbnZhciBmb2N1c01hbmFnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4MSk7XG52YXIgc2NvcGVUYWIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4Mik7XG52YXIgQXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NSk7XG5cbi8vIHNvIHRoYXQgb3VyIENTUyBpcyBzdGF0aWNhbGx5IGFuYWx5emFibGVcbnZhciBDTEFTU19OQU1FUyA9IHtcbiAgb3ZlcmxheToge1xuICAgIGJhc2U6ICdSZWFjdE1vZGFsX19PdmVybGF5JyxcbiAgICBhZnRlck9wZW46ICdSZWFjdE1vZGFsX19PdmVybGF5LS1hZnRlci1vcGVuJyxcbiAgICBiZWZvcmVDbG9zZTogJ1JlYWN0TW9kYWxfX092ZXJsYXktLWJlZm9yZS1jbG9zZSdcbiAgfSxcbiAgY29udGVudDoge1xuICAgIGJhc2U6ICdSZWFjdE1vZGFsX19Db250ZW50JyxcbiAgICBhZnRlck9wZW46ICdSZWFjdE1vZGFsX19Db250ZW50LS1hZnRlci1vcGVuJyxcbiAgICBiZWZvcmVDbG9zZTogJ1JlYWN0TW9kYWxfX0NvbnRlbnQtLWJlZm9yZS1jbG9zZSdcbiAgfVxufTtcblxudmFyIE1vZGFsUG9ydGFsID0gbW9kdWxlLmV4cG9ydHMgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cbiAgZGlzcGxheU5hbWU6ICdNb2RhbFBvcnRhbCcsXG4gIHNob3VsZENsb3NlOiBudWxsLFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIG92ZXJsYXk6IHt9LFxuICAgICAgICBjb250ZW50OiB7fVxuICAgICAgfVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYWZ0ZXJPcGVuOiBmYWxzZSxcbiAgICAgIGJlZm9yZUNsb3NlOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIC8vIEZvY3VzIG5lZWRzIHRvIGJlIHNldCB3aGVuIG1vdW50aW5nIGFuZCBhbHJlYWR5IG9wZW5cbiAgICBpZiAodGhpcy5wcm9wcy5pc09wZW4pIHtcbiAgICAgIHRoaXMuc2V0Rm9jdXNBZnRlclJlbmRlcih0cnVlKTtcbiAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24oKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuY2xvc2VUaW1lcik7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24obmV3UHJvcHMpIHtcbiAgICAvLyBGb2N1cyBvbmx5IG5lZWRzIHRvIGJlIHNldCBvbmNlIHdoZW4gdGhlIG1vZGFsIGlzIGJlaW5nIG9wZW5lZFxuICAgIGlmICghdGhpcy5wcm9wcy5pc09wZW4gJiYgbmV3UHJvcHMuaXNPcGVuKSB7XG4gICAgICB0aGlzLnNldEZvY3VzQWZ0ZXJSZW5kZXIodHJ1ZSk7XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuaXNPcGVuICYmICFuZXdQcm9wcy5pc09wZW4pIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuZm9jdXNBZnRlclJlbmRlcikge1xuICAgICAgdGhpcy5mb2N1c0NvbnRlbnQoKTtcbiAgICAgIHRoaXMuc2V0Rm9jdXNBZnRlclJlbmRlcihmYWxzZSk7XG4gICAgfVxuICB9LFxuXG4gIHNldEZvY3VzQWZ0ZXJSZW5kZXI6IGZ1bmN0aW9uIChmb2N1cykge1xuICAgIHRoaXMuZm9jdXNBZnRlclJlbmRlciA9IGZvY3VzO1xuICB9LFxuXG4gIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmFmdGVyT3BlbiAmJiB0aGlzLnN0YXRlLmJlZm9yZUNsb3NlKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5jbG9zZVRpbWVyKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBiZWZvcmVDbG9zZTogZmFsc2UgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvY3VzTWFuYWdlci5zZXR1cFNjb3BlZEZvY3VzKHRoaXMubm9kZSk7XG4gICAgICBmb2N1c01hbmFnZXIubWFya0ZvckZvY3VzTGF0ZXIoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2lzT3BlbjogdHJ1ZX0sIGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHthZnRlck9wZW46IHRydWV9KTtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5pc09wZW4gJiYgdGhpcy5wcm9wcy5vbkFmdGVyT3Blbikge1xuICAgICAgICAgIHRoaXMucHJvcHMub25BZnRlck9wZW4oKTtcbiAgICAgICAgfVxuICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH0sXG5cbiAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmNsb3NlVGltZW91dE1TID4gMClcbiAgICAgIHRoaXMuY2xvc2VXaXRoVGltZW91dCgpO1xuICAgIGVsc2VcbiAgICAgIHRoaXMuY2xvc2VXaXRob3V0VGltZW91dCgpO1xuICB9LFxuXG4gIGZvY3VzQ29udGVudDogZnVuY3Rpb24oKSB7XG4gICAgLy8gRG9uJ3Qgc3RlYWwgZm9jdXMgZnJvbSBpbm5lciBlbGVtZW50c1xuICAgIGlmICghdGhpcy5jb250ZW50SGFzRm9jdXMoKSkge1xuICAgICAgdGhpcy5yZWZzLmNvbnRlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH0sXG5cbiAgY2xvc2VXaXRoVGltZW91dDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7YmVmb3JlQ2xvc2U6IHRydWV9LCBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuY2xvc2VUaW1lciA9IHNldFRpbWVvdXQodGhpcy5jbG9zZVdpdGhvdXRUaW1lb3V0LCB0aGlzLnByb3BzLmNsb3NlVGltZW91dE1TKTtcbiAgICB9LmJpbmQodGhpcykpO1xuICB9LFxuXG4gIGNsb3NlV2l0aG91dFRpbWVvdXQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgYmVmb3JlQ2xvc2U6IGZhbHNlLFxuICAgICAgaXNPcGVuOiBmYWxzZSxcbiAgICAgIGFmdGVyT3BlbjogZmFsc2UsXG4gICAgfSwgdGhpcy5hZnRlckNsb3NlKTtcbiAgfSxcblxuICBhZnRlckNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICBmb2N1c01hbmFnZXIucmV0dXJuRm9jdXMoKTtcbiAgICBmb2N1c01hbmFnZXIudGVhcmRvd25TY29wZWRGb2N1cygpO1xuICB9LFxuXG4gIGhhbmRsZUtleURvd246IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT0gOSAvKnRhYiovKSBzY29wZVRhYih0aGlzLnJlZnMuY29udGVudCwgZXZlbnQpO1xuICAgIGlmIChldmVudC5rZXlDb2RlID09IDI3IC8qZXNjKi8pIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnJlcXVlc3RDbG9zZShldmVudCk7XG4gICAgfVxuICB9LFxuXG4gIGhhbmRsZU92ZXJsYXlNb3VzZURvd246IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuc2hvdWxkQ2xvc2UgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuc2hvdWxkQ2xvc2UgPSB0cnVlO1xuICAgIH1cbiAgfSxcblxuICBoYW5kbGVPdmVybGF5TW91c2VVcDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAodGhpcy5zaG91bGRDbG9zZSAmJiB0aGlzLnByb3BzLnNob3VsZENsb3NlT25PdmVybGF5Q2xpY2spIHtcbiAgICAgIGlmICh0aGlzLm93bmVySGFuZGxlc0Nsb3NlKCkpXG4gICAgICAgIHRoaXMucmVxdWVzdENsb3NlKGV2ZW50KTtcbiAgICAgIGVsc2VcbiAgICAgICAgdGhpcy5mb2N1c0NvbnRlbnQoKTtcbiAgICB9XG4gICAgdGhpcy5zaG91bGRDbG9zZSA9IG51bGw7XG4gIH0sXG5cbiAgaGFuZGxlQ29udGVudE1vdXNlRG93bjogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB0aGlzLnNob3VsZENsb3NlID0gZmFsc2U7XG4gIH0sXG5cbiAgaGFuZGxlQ29udGVudE1vdXNlVXA6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdGhpcy5zaG91bGRDbG9zZSA9IGZhbHNlO1xuICB9LFxuXG4gIHJlcXVlc3RDbG9zZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAodGhpcy5vd25lckhhbmRsZXNDbG9zZSgpKVxuICAgICAgdGhpcy5wcm9wcy5vblJlcXVlc3RDbG9zZShldmVudCk7XG4gIH0sXG5cbiAgb3duZXJIYW5kbGVzQ2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLm9uUmVxdWVzdENsb3NlO1xuICB9LFxuXG4gIHNob3VsZEJlQ2xvc2VkOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gIXRoaXMucHJvcHMuaXNPcGVuICYmICF0aGlzLnN0YXRlLmJlZm9yZUNsb3NlO1xuICB9LFxuXG4gIGNvbnRlbnRIYXNGb2N1czogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IHRoaXMucmVmcy5jb250ZW50IHx8IHRoaXMucmVmcy5jb250ZW50LmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xuICB9LFxuXG4gIGJ1aWxkQ2xhc3NOYW1lOiBmdW5jdGlvbih3aGljaCwgYWRkaXRpb25hbCkge1xuICAgIHZhciBjbGFzc05hbWUgPSBDTEFTU19OQU1FU1t3aGljaF0uYmFzZTtcbiAgICBpZiAodGhpcy5zdGF0ZS5hZnRlck9wZW4pXG4gICAgICBjbGFzc05hbWUgKz0gJyAnK0NMQVNTX05BTUVTW3doaWNoXS5hZnRlck9wZW47XG4gICAgaWYgKHRoaXMuc3RhdGUuYmVmb3JlQ2xvc2UpXG4gICAgICBjbGFzc05hbWUgKz0gJyAnK0NMQVNTX05BTUVTW3doaWNoXS5iZWZvcmVDbG9zZTtcbiAgICByZXR1cm4gYWRkaXRpb25hbCA/IGNsYXNzTmFtZSArICcgJyArIGFkZGl0aW9uYWwgOiBjbGFzc05hbWU7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29udGVudFN0eWxlcyA9ICh0aGlzLnByb3BzLmNsYXNzTmFtZSkgPyB7fSA6IHRoaXMucHJvcHMuZGVmYXVsdFN0eWxlcy5jb250ZW50O1xuICAgIHZhciBvdmVybGF5U3R5bGVzID0gKHRoaXMucHJvcHMub3ZlcmxheUNsYXNzTmFtZSkgPyB7fSA6IHRoaXMucHJvcHMuZGVmYXVsdFN0eWxlcy5vdmVybGF5O1xuXG4gICAgcmV0dXJuIHRoaXMuc2hvdWxkQmVDbG9zZWQoKSA/IGRpdigpIDogKFxuICAgICAgZGl2KHtcbiAgICAgICAgcmVmOiBcIm92ZXJsYXlcIixcbiAgICAgICAgY2xhc3NOYW1lOiB0aGlzLmJ1aWxkQ2xhc3NOYW1lKCdvdmVybGF5JywgdGhpcy5wcm9wcy5vdmVybGF5Q2xhc3NOYW1lKSxcbiAgICAgICAgc3R5bGU6IEFzc2lnbih7fSwgb3ZlcmxheVN0eWxlcywgdGhpcy5wcm9wcy5zdHlsZS5vdmVybGF5IHx8IHt9KSxcbiAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlT3ZlcmxheU1vdXNlRG93bixcbiAgICAgICAgb25Nb3VzZVVwOiB0aGlzLmhhbmRsZU92ZXJsYXlNb3VzZVVwXG4gICAgICB9LFxuICAgICAgICBkaXYoe1xuICAgICAgICAgIHJlZjogXCJjb250ZW50XCIsXG4gICAgICAgICAgc3R5bGU6IEFzc2lnbih7fSwgY29udGVudFN0eWxlcywgdGhpcy5wcm9wcy5zdHlsZS5jb250ZW50IHx8IHt9KSxcbiAgICAgICAgICBjbGFzc05hbWU6IHRoaXMuYnVpbGRDbGFzc05hbWUoJ2NvbnRlbnQnLCB0aGlzLnByb3BzLmNsYXNzTmFtZSksXG4gICAgICAgICAgdGFiSW5kZXg6IFwiLTFcIixcbiAgICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVDb250ZW50TW91c2VEb3duLFxuICAgICAgICAgIG9uTW91c2VVcDogdGhpcy5oYW5kbGVDb250ZW50TW91c2VVcCxcbiAgICAgICAgICByb2xlOiB0aGlzLnByb3BzLnJvbGUsXG4gICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IHRoaXMucHJvcHMuY29udGVudExhYmVsXG4gICAgICAgIH0sXG4gICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfVxufSk7XG5cblxuLyoqKi8gfSksXG4vKiAyODAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIF9lbGVtZW50ID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50LmJvZHkgOiBudWxsO1xuXG5mdW5jdGlvbiBzZXRFbGVtZW50KGVsZW1lbnQpIHtcbiAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbWVudCk7XG4gICAgZWxlbWVudCA9ICdsZW5ndGgnIGluIGVsID8gZWxbMF0gOiBlbDtcbiAgfVxuICBfZWxlbWVudCA9IGVsZW1lbnQgfHwgX2VsZW1lbnQ7XG4gIHJldHVybiBfZWxlbWVudDtcbn1cblxuZnVuY3Rpb24gaGlkZShhcHBFbGVtZW50KSB7XG4gIHZhbGlkYXRlRWxlbWVudChhcHBFbGVtZW50KTtcbiAgKGFwcEVsZW1lbnQgfHwgX2VsZW1lbnQpLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xufVxuXG5mdW5jdGlvbiBzaG93KGFwcEVsZW1lbnQpIHtcbiAgdmFsaWRhdGVFbGVtZW50KGFwcEVsZW1lbnQpO1xuICAoYXBwRWxlbWVudCB8fCBfZWxlbWVudCkucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xufVxuXG5mdW5jdGlvbiB0b2dnbGUoc2hvdWxkSGlkZSwgYXBwRWxlbWVudCkge1xuICBpZiAoc2hvdWxkSGlkZSlcbiAgICBoaWRlKGFwcEVsZW1lbnQpO1xuICBlbHNlXG4gICAgc2hvdyhhcHBFbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVFbGVtZW50KGFwcEVsZW1lbnQpIHtcbiAgaWYgKCFhcHBFbGVtZW50ICYmICFfZWxlbWVudClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlYWN0LW1vZGFsOiBZb3UgbXVzdCBzZXQgYW4gZWxlbWVudCB3aXRoIGBNb2RhbC5zZXRBcHBFbGVtZW50KGVsKWAgdG8gbWFrZSB0aGlzIGFjY2Vzc2libGUnKTtcbn1cblxuZnVuY3Rpb24gcmVzZXRGb3JUZXN0aW5nKCkge1xuICBfZWxlbWVudCA9IGRvY3VtZW50LmJvZHk7XG59XG5cbmV4cG9ydHMudG9nZ2xlID0gdG9nZ2xlO1xuZXhwb3J0cy5zZXRFbGVtZW50ID0gc2V0RWxlbWVudDtcbmV4cG9ydHMuc2hvdyA9IHNob3c7XG5leHBvcnRzLmhpZGUgPSBoaWRlO1xuZXhwb3J0cy5yZXNldEZvclRlc3RpbmcgPSByZXNldEZvclRlc3Rpbmc7XG5cblxuLyoqKi8gfSksXG4vKiAyODEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGZpbmRUYWJiYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTI1KTtcbnZhciBtb2RhbEVsZW1lbnQgPSBudWxsO1xudmFyIGZvY3VzTGF0ZXJFbGVtZW50ID0gbnVsbDtcbnZhciBuZWVkVG9Gb2N1cyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBoYW5kbGVCbHVyKGV2ZW50KSB7XG4gIG5lZWRUb0ZvY3VzID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRm9jdXMoZXZlbnQpIHtcbiAgaWYgKG5lZWRUb0ZvY3VzKSB7XG4gICAgbmVlZFRvRm9jdXMgPSBmYWxzZTtcbiAgICBpZiAoIW1vZGFsRWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBuZWVkIHRvIHNlZSBob3cgalF1ZXJ5IHNoaW1zIGRvY3VtZW50Lm9uKCdmb2N1c2luJykgc28gd2UgZG9uJ3QgbmVlZCB0aGVcbiAgICAvLyBzZXRUaW1lb3V0LCBmaXJlZm94IGRvZXNuJ3Qgc3VwcG9ydCBmb2N1c2luLCBpZiBpdCBkaWQsIHdlIGNvdWxkIGZvY3VzXG4gICAgLy8gdGhlIGVsZW1lbnQgb3V0c2lkZSBvZiBhIHNldFRpbWVvdXQuIFNpZGUtZWZmZWN0IG9mIHRoaXMgaW1wbGVtZW50YXRpb24gXG4gICAgLy8gaXMgdGhhdCB0aGUgZG9jdW1lbnQuYm9keSBnZXRzIGZvY3VzLCBhbmQgdGhlbiB3ZSBmb2N1cyBvdXIgZWxlbWVudCByaWdodCBcbiAgICAvLyBhZnRlciwgc2VlbXMgZmluZS5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKG1vZGFsRWxlbWVudC5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdmFyIGVsID0gKGZpbmRUYWJiYWJsZShtb2RhbEVsZW1lbnQpWzBdIHx8IG1vZGFsRWxlbWVudCk7XG4gICAgICBlbC5mb2N1cygpO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmV4cG9ydHMubWFya0ZvckZvY3VzTGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgZm9jdXNMYXRlckVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xufTtcblxuZXhwb3J0cy5yZXR1cm5Gb2N1cyA9IGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIGZvY3VzTGF0ZXJFbGVtZW50LmZvY3VzKCk7XG4gIH1cbiAgY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLndhcm4oJ1lvdSB0cmllZCB0byByZXR1cm4gZm9jdXMgdG8gJytmb2N1c0xhdGVyRWxlbWVudCsnIGJ1dCBpdCBpcyBub3QgaW4gdGhlIERPTSBhbnltb3JlJyk7XG4gIH1cbiAgZm9jdXNMYXRlckVsZW1lbnQgPSBudWxsO1xufTtcblxuZXhwb3J0cy5zZXR1cFNjb3BlZEZvY3VzID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICBtb2RhbEVsZW1lbnQgPSBlbGVtZW50O1xuXG4gIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgaGFuZGxlQmx1ciwgZmFsc2UpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgaGFuZGxlRm9jdXMsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5hdHRhY2hFdmVudCgnb25CbHVyJywgaGFuZGxlQmx1cik7XG4gICAgZG9jdW1lbnQuYXR0YWNoRXZlbnQoJ29uRm9jdXMnLCBoYW5kbGVGb2N1cyk7XG4gIH1cbn07XG5cbmV4cG9ydHMudGVhcmRvd25TY29wZWRGb2N1cyA9IGZ1bmN0aW9uKCkge1xuICBtb2RhbEVsZW1lbnQgPSBudWxsO1xuXG4gIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgaGFuZGxlQmx1cik7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBoYW5kbGVGb2N1cyk7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93LmRldGFjaEV2ZW50KCdvbkJsdXInLCBoYW5kbGVCbHVyKTtcbiAgICBkb2N1bWVudC5kZXRhY2hFdmVudCgnb25Gb2N1cycsIGhhbmRsZUZvY3VzKTtcbiAgfVxufTtcblxuXG5cblxuLyoqKi8gfSksXG4vKiAyODIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGZpbmRUYWJiYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTI1KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihub2RlLCBldmVudCkge1xuICB2YXIgdGFiYmFibGUgPSBmaW5kVGFiYmFibGUobm9kZSk7XG4gIGlmICghdGFiYmFibGUubGVuZ3RoKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuO1xuICB9XG4gIHZhciBmaW5hbFRhYmJhYmxlID0gdGFiYmFibGVbZXZlbnQuc2hpZnRLZXkgPyAwIDogdGFiYmFibGUubGVuZ3RoIC0gMV07XG4gIHZhciBsZWF2aW5nRmluYWxUYWJiYWJsZSA9IChcbiAgICBmaW5hbFRhYmJhYmxlID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHx8XG4gICAgLy8gaGFuZGxlIGltbWVkaWF0ZSBzaGlmdCt0YWIgYWZ0ZXIgb3BlbmluZyB3aXRoIG1vdXNlXG4gICAgbm9kZSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudFxuICApO1xuICBpZiAoIWxlYXZpbmdGaW5hbFRhYmJhYmxlKSByZXR1cm47XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIHZhciB0YXJnZXQgPSB0YWJiYWJsZVtldmVudC5zaGlmdEtleSA/IHRhYmJhYmxlLmxlbmd0aCAtIDEgOiAwXTtcbiAgdGFyZ2V0LmZvY3VzKCk7XG59O1xuXG5cbi8qKiovIH0pLFxuLyogMjgzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNzgpO1xuXG5cblxuLyoqKi8gfSksXG4vKiAyODQgKi8sXG4vKiAyODUgKi8sXG4vKiAyODYgKi8sXG4vKiAyODcgKi8sXG4vKiAyODggKi8sXG4vKiAyODkgKi8sXG4vKiAyOTAgKi8sXG4vKiAyOTEgKi8sXG4vKiAyOTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGNhblVzZURPTSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcyKTtcbnZhciBlbnF1aXJlID0gY2FuVXNlRE9NICYmIF9fd2VicGFja19yZXF1aXJlX18oMTc0KTtcbnZhciBqc29uMm1xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Myk7XG5cbnZhciBSZXNwb25zaXZlTWl4aW4gPSB7XG4gIG1lZGlhOiBmdW5jdGlvbiAocXVlcnksIGhhbmRsZXIpIHtcbiAgICBxdWVyeSA9IGpzb24ybXEocXVlcnkpO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaGFuZGxlciA9IHtcbiAgICAgICAgbWF0Y2g6IGhhbmRsZXJcbiAgICAgIH07XG4gICAgfVxuICAgIGNhblVzZURPTSAmJiBlbnF1aXJlLnJlZ2lzdGVyKHF1ZXJ5LCBoYW5kbGVyKTtcblxuICAgIC8vIFF1ZXVlIHRoZSBoYW5kbGVycyB0byB1bnJlZ2lzdGVyIHRoZW0gYXQgdW5tb3VudCAgXG4gICAgaWYgKCEgdGhpcy5fcmVzcG9uc2l2ZU1lZGlhSGFuZGxlcnMpIHtcbiAgICAgIHRoaXMuX3Jlc3BvbnNpdmVNZWRpYUhhbmRsZXJzID0gW107XG4gICAgfVxuICAgIHRoaXMuX3Jlc3BvbnNpdmVNZWRpYUhhbmRsZXJzLnB1c2goe3F1ZXJ5OiBxdWVyeSwgaGFuZGxlcjogaGFuZGxlcn0pO1xuICB9LFxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZXNwb25zaXZlTWVkaWFIYW5kbGVycykge1xuICAgICAgdGhpcy5fcmVzcG9uc2l2ZU1lZGlhSGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbihvYmopIHtcbiAgICAgICAgY2FuVXNlRE9NICYmIGVucXVpcmUudW5yZWdpc3RlcihvYmoucXVlcnksIG9iai5oYW5kbGVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZXNwb25zaXZlTWl4aW47XG5cblxuLyoqKi8gfSksXG4vKiAyOTMgKi8sXG4vKiAyOTQgKi8sXG4vKiAyOTUgKi8sXG4vKiAyOTYgKi8sXG4vKiAyOTcgKi8sXG4vKiAyOTggKi8sXG4vKiAyOTkgKi8sXG4vKiAzMDAgKi8sXG4vKiAzMDEgKi8sXG4vKiAzMDIgKi8sXG4vKiAzMDMgKi8sXG4vKiAzMDQgKi8sXG4vKiAzMDUgKi8sXG4vKiAzMDYgKi8sXG4vKiAzMDcgKi8sXG4vKiAzMDggKi8sXG4vKiAzMDkgKi8sXG4vKiAzMTAgKi8sXG4vKiAzMTEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuTmV4dEFycm93ID0gZXhwb3J0cy5QcmV2QXJyb3cgPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9jbGFzc25hbWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG5cbnZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblxudmFyIF9oZWxwZXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MCk7XG5cbnZhciBfaGVscGVyczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWxwZXJzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFByZXZBcnJvdyA9IGV4cG9ydHMuUHJldkFycm93ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdQcmV2QXJyb3cnLFxuXG5cbiAgY2xpY2tIYW5kbGVyOiBmdW5jdGlvbiBjbGlja0hhbmRsZXIob3B0aW9ucywgZSkge1xuICAgIGlmIChlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIHRoaXMucHJvcHMuY2xpY2tIYW5kbGVyKG9wdGlvbnMsIGUpO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcHJldkNsYXNzZXMgPSB7ICdzbGljay1hcnJvdyc6IHRydWUsICdzbGljay1wcmV2JzogdHJ1ZSB9O1xuICAgIHZhciBwcmV2SGFuZGxlciA9IHRoaXMuY2xpY2tIYW5kbGVyLmJpbmQodGhpcywgeyBtZXNzYWdlOiAncHJldmlvdXMnIH0pO1xuXG4gICAgaWYgKCF0aGlzLnByb3BzLmluZmluaXRlICYmICh0aGlzLnByb3BzLmN1cnJlbnRTbGlkZSA9PT0gMCB8fCB0aGlzLnByb3BzLnNsaWRlQ291bnQgPD0gdGhpcy5wcm9wcy5zbGlkZXNUb1Nob3cpKSB7XG4gICAgICBwcmV2Q2xhc3Nlc1snc2xpY2stZGlzYWJsZWQnXSA9IHRydWU7XG4gICAgICBwcmV2SGFuZGxlciA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHByZXZBcnJvd1Byb3BzID0ge1xuICAgICAga2V5OiAnMCcsXG4gICAgICAnZGF0YS1yb2xlJzogJ25vbmUnLFxuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMyLmRlZmF1bHQpKHByZXZDbGFzc2VzKSxcbiAgICAgIGN1cnJlbnRTbGlkZTogdGhpcy5wcm9wcy5jdXJyZW50U2xpZGUsXG4gICAgICBzbGlkZUNvdW50OiB0aGlzLnByb3BzLnNsaWRlQ291bnQsXG4gICAgICBzdHlsZTogeyBkaXNwbGF5OiAnYmxvY2snIH0sXG4gICAgICBvbkNsaWNrOiBwcmV2SGFuZGxlclxuICAgIH07XG4gICAgdmFyIHByZXZBcnJvdztcblxuICAgIGlmICh0aGlzLnByb3BzLnByZXZBcnJvdykge1xuICAgICAgcHJldkFycm93ID0gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudCh0aGlzLnByb3BzLnByZXZBcnJvdywgcHJldkFycm93UHJvcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmV2QXJyb3cgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2J1dHRvbicsXG4gICAgICAgIF9leHRlbmRzKHsga2V5OiAnMCcsIHR5cGU6ICdidXR0b24nIH0sIHByZXZBcnJvd1Byb3BzKSxcbiAgICAgICAgJyBQcmV2aW91cydcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZXZBcnJvdztcbiAgfVxufSk7XG5cbnZhciBOZXh0QXJyb3cgPSBleHBvcnRzLk5leHRBcnJvdyA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnTmV4dEFycm93JyxcblxuICBjbGlja0hhbmRsZXI6IGZ1bmN0aW9uIGNsaWNrSGFuZGxlcihvcHRpb25zLCBlKSB7XG4gICAgaWYgKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5jbGlja0hhbmRsZXIob3B0aW9ucywgZSk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBuZXh0Q2xhc3NlcyA9IHsgJ3NsaWNrLWFycm93JzogdHJ1ZSwgJ3NsaWNrLW5leHQnOiB0cnVlIH07XG4gICAgdmFyIG5leHRIYW5kbGVyID0gdGhpcy5jbGlja0hhbmRsZXIuYmluZCh0aGlzLCB7IG1lc3NhZ2U6ICduZXh0JyB9KTtcblxuICAgIGlmICghX2hlbHBlcnMyLmRlZmF1bHQuY2FuR29OZXh0KHRoaXMucHJvcHMpKSB7XG4gICAgICBuZXh0Q2xhc3Nlc1snc2xpY2stZGlzYWJsZWQnXSA9IHRydWU7XG4gICAgICBuZXh0SGFuZGxlciA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG5leHRBcnJvd1Byb3BzID0ge1xuICAgICAga2V5OiAnMScsXG4gICAgICAnZGF0YS1yb2xlJzogJ25vbmUnLFxuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMyLmRlZmF1bHQpKG5leHRDbGFzc2VzKSxcbiAgICAgIGN1cnJlbnRTbGlkZTogdGhpcy5wcm9wcy5jdXJyZW50U2xpZGUsXG4gICAgICBzbGlkZUNvdW50OiB0aGlzLnByb3BzLnNsaWRlQ291bnQsXG4gICAgICBzdHlsZTogeyBkaXNwbGF5OiAnYmxvY2snIH0sXG4gICAgICBvbkNsaWNrOiBuZXh0SGFuZGxlclxuICAgIH07XG5cbiAgICB2YXIgbmV4dEFycm93O1xuXG4gICAgaWYgKHRoaXMucHJvcHMubmV4dEFycm93KSB7XG4gICAgICBuZXh0QXJyb3cgPSBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KHRoaXMucHJvcHMubmV4dEFycm93LCBuZXh0QXJyb3dQcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHRBcnJvdyA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnYnV0dG9uJyxcbiAgICAgICAgX2V4dGVuZHMoeyBrZXk6ICcxJywgdHlwZTogJ2J1dHRvbicgfSwgbmV4dEFycm93UHJvcHMpLFxuICAgICAgICAnIE5leHQnXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0QXJyb3c7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDMxMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5Eb3RzID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9fd2VicGFja19yZXF1aXJlX18oMzgpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBnZXREb3RDb3VudCA9IGZ1bmN0aW9uIGdldERvdENvdW50KHNwZWMpIHtcbiAgdmFyIGRvdHM7XG4gIGRvdHMgPSBNYXRoLmNlaWwoc3BlYy5zbGlkZUNvdW50IC8gc3BlYy5zbGlkZXNUb1Njcm9sbCk7XG4gIHJldHVybiBkb3RzO1xufTtcblxudmFyIERvdHMgPSBleHBvcnRzLkRvdHMgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0RvdHMnLFxuXG5cbiAgY2xpY2tIYW5kbGVyOiBmdW5jdGlvbiBjbGlja0hhbmRsZXIob3B0aW9ucywgZSkge1xuICAgIC8vIEluIEF1dG9wbGF5IHRoZSBmb2N1cyBzdGF5cyBvbiBjbGlja2VkIGJ1dHRvbiBldmVuIGFmdGVyIHRyYW5zaXRpb25cbiAgICAvLyB0byBuZXh0IHNsaWRlLiBUaGF0IG9ubHkgZ29lcyBhd2F5IGJ5IGNsaWNrIHNvbWV3aGVyZSBvdXRzaWRlXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMucHJvcHMuY2xpY2tIYW5kbGVyKG9wdGlvbnMpO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGRvdENvdW50ID0gZ2V0RG90Q291bnQoe1xuICAgICAgc2xpZGVDb3VudDogdGhpcy5wcm9wcy5zbGlkZUNvdW50LFxuICAgICAgc2xpZGVzVG9TY3JvbGw6IHRoaXMucHJvcHMuc2xpZGVzVG9TY3JvbGxcbiAgICB9KTtcblxuICAgIC8vIEFwcGx5IGpvaW4gJiBzcGxpdCB0byBBcnJheSB0byBwcmUtZmlsbCBpdCBmb3IgSUU4XG4gICAgLy9cbiAgICAvLyBDcmVkaXQ6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEzNzM1NDI1LzE4NDk0NThcbiAgICB2YXIgZG90cyA9IEFycmF5LmFwcGx5KG51bGwsIEFycmF5KGRvdENvdW50ICsgMSkuam9pbignMCcpLnNwbGl0KCcnKSkubWFwKGZ1bmN0aW9uICh4LCBpKSB7XG5cbiAgICAgIHZhciBsZWZ0Qm91bmQgPSBpICogX3RoaXMucHJvcHMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICB2YXIgcmlnaHRCb3VuZCA9IGkgKiBfdGhpcy5wcm9wcy5zbGlkZXNUb1Njcm9sbCArIChfdGhpcy5wcm9wcy5zbGlkZXNUb1Njcm9sbCAtIDEpO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkoe1xuICAgICAgICAnc2xpY2stYWN0aXZlJzogX3RoaXMucHJvcHMuY3VycmVudFNsaWRlID49IGxlZnRCb3VuZCAmJiBfdGhpcy5wcm9wcy5jdXJyZW50U2xpZGUgPD0gcmlnaHRCb3VuZFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBkb3RPcHRpb25zID0ge1xuICAgICAgICBtZXNzYWdlOiAnZG90cycsXG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgICBzbGlkZXNUb1Njcm9sbDogX3RoaXMucHJvcHMuc2xpZGVzVG9TY3JvbGwsXG4gICAgICAgIGN1cnJlbnRTbGlkZTogX3RoaXMucHJvcHMuY3VycmVudFNsaWRlXG4gICAgICB9O1xuXG4gICAgICB2YXIgb25DbGljayA9IF90aGlzLmNsaWNrSGFuZGxlci5iaW5kKF90aGlzLCBkb3RPcHRpb25zKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnbGknLFxuICAgICAgICB7IGtleTogaSwgY2xhc3NOYW1lOiBjbGFzc05hbWUgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChfdGhpcy5wcm9wcy5jdXN0b21QYWdpbmcoaSksIHsgb25DbGljazogb25DbGljayB9KVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICd1bCcsXG4gICAgICB7IGNsYXNzTmFtZTogdGhpcy5wcm9wcy5kb3RzQ2xhc3MsIHN0eWxlOiB7IGRpc3BsYXk6ICdibG9jaycgfSB9LFxuICAgICAgZG90c1xuICAgICk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDMxMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzE3KTtcblxuLyoqKi8gfSksXG4vKiAzMTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGluaXRpYWxTdGF0ZSA9IHtcbiAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICBhdXRvUGxheVRpbWVyOiBudWxsLFxuICAgIGN1cnJlbnREaXJlY3Rpb246IDAsXG4gICAgY3VycmVudExlZnQ6IG51bGwsXG4gICAgY3VycmVudFNsaWRlOiAwLFxuICAgIGRpcmVjdGlvbjogMSxcbiAgICBsaXN0V2lkdGg6IG51bGwsXG4gICAgbGlzdEhlaWdodDogbnVsbCxcbiAgICAvLyBsb2FkSW5kZXg6IDAsXG4gICAgc2xpZGVDb3VudDogbnVsbCxcbiAgICBzbGlkZVdpZHRoOiBudWxsLFxuICAgIHNsaWRlSGVpZ2h0OiBudWxsLFxuICAgIC8vIHNsaWRpbmc6IGZhbHNlLFxuICAgIC8vIHNsaWRlT2Zmc2V0OiAwLFxuICAgIHN3aXBlTGVmdDogbnVsbCxcbiAgICB0b3VjaE9iamVjdDoge1xuICAgICAgICBzdGFydFg6IDAsXG4gICAgICAgIHN0YXJ0WTogMCxcbiAgICAgICAgY3VyWDogMCxcbiAgICAgICAgY3VyWTogMFxuICAgIH0sXG5cbiAgICBsYXp5TG9hZGVkTGlzdDogW10sXG5cbiAgICAvLyBhZGRlZCBmb3IgcmVhY3RcbiAgICBpbml0aWFsaXplZDogZmFsc2UsXG4gICAgZWRnZURyYWdnZWQ6IGZhbHNlLFxuICAgIHN3aXBlZDogZmFsc2UsIC8vIHVzZWQgYnkgc3dpcGVFdmVudC4gZGlmZmVyZW50aXRlcyBiZXR3ZWVuIHRvdWNoIGFuZCBzd2lwZS5cbiAgICB0cmFja1N0eWxlOiB7fSxcbiAgICB0cmFja1dpZHRoOiAwXG5cbiAgICAvLyBSZW1vdmVkXG4gICAgLy8gdHJhbnNmb3Jtc0VuYWJsZWQ6IGZhbHNlLFxuICAgIC8vICRuZXh0QXJyb3c6IG51bGwsXG4gICAgLy8gJHByZXZBcnJvdzogbnVsbCxcbiAgICAvLyAkZG90czogbnVsbCxcbiAgICAvLyAkbGlzdDogbnVsbCxcbiAgICAvLyAkc2xpZGVUcmFjazogbnVsbCxcbiAgICAvLyAkc2xpZGVzOiBudWxsLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbml0aWFsU3RhdGU7XG5cbi8qKiovIH0pLFxuLyogMzE1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLklubmVyU2xpZGVyID0gdW5kZWZpbmVkO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfZXZlbnRIYW5kbGVycyA9IF9fd2VicGFja19yZXF1aXJlX18oMzE2KTtcblxudmFyIF9ldmVudEhhbmRsZXJzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V2ZW50SGFuZGxlcnMpO1xuXG52YXIgX2hlbHBlcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgwKTtcblxudmFyIF9oZWxwZXJzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnMpO1xuXG52YXIgX2luaXRpYWxTdGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzE0KTtcblxudmFyIF9pbml0aWFsU3RhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5pdGlhbFN0YXRlKTtcblxudmFyIF9kZWZhdWx0UHJvcHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzOSk7XG5cbnZhciBfZGVmYXVsdFByb3BzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmF1bHRQcm9wcyk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9fd2VicGFja19yZXF1aXJlX18oMzgpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbnZhciBfb2JqZWN0QXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9vYmplY3RBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0QXNzaWduKTtcblxudmFyIF90cmFjayA9IF9fd2VicGFja19yZXF1aXJlX18oMzE4KTtcblxudmFyIF9kb3RzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMTIpO1xuXG52YXIgX2Fycm93cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzExKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIElubmVyU2xpZGVyID0gZXhwb3J0cy5Jbm5lclNsaWRlciA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnSW5uZXJTbGlkZXInLFxuXG4gIG1peGluczogW19oZWxwZXJzMi5kZWZhdWx0LCBfZXZlbnRIYW5kbGVyczIuZGVmYXVsdF0sXG4gIGxpc3Q6IG51bGwsXG4gIHRyYWNrOiBudWxsLFxuICBsaXN0UmVmSGFuZGxlcjogZnVuY3Rpb24gbGlzdFJlZkhhbmRsZXIocmVmKSB7XG4gICAgdGhpcy5saXN0ID0gcmVmO1xuICB9LFxuICB0cmFja1JlZkhhbmRsZXI6IGZ1bmN0aW9uIHRyYWNrUmVmSGFuZGxlcihyZWYpIHtcbiAgICB0aGlzLnRyYWNrID0gcmVmO1xuICB9LFxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIF9pbml0aWFsU3RhdGUyLmRlZmF1bHQsIHtcbiAgICAgIGN1cnJlbnRTbGlkZTogdGhpcy5wcm9wcy5pbml0aWFsU2xpZGVcbiAgICB9KTtcbiAgfSxcbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIF9kZWZhdWx0UHJvcHMyLmRlZmF1bHQ7XG4gIH0sXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLmluaXQpIHtcbiAgICAgIHRoaXMucHJvcHMuaW5pdCgpO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1vdW50ZWQ6IHRydWVcbiAgICB9KTtcbiAgICB2YXIgbGF6eUxvYWRlZExpc3QgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5jb3VudCh0aGlzLnByb3BzLmNoaWxkcmVuKTsgaSsrKSB7XG4gICAgICBpZiAoaSA+PSB0aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSAmJiBpIDwgdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUgKyB0aGlzLnByb3BzLnNsaWRlc1RvU2hvdykge1xuICAgICAgICBsYXp5TG9hZGVkTGlzdC5wdXNoKGkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmxhenlMb2FkICYmIHRoaXMuc3RhdGUubGF6eUxvYWRlZExpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbGF6eUxvYWRlZExpc3Q6IGxhenlMb2FkZWRMaXN0XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBIYWNrIGZvciBhdXRvcGxheSAtLSBJbnNwZWN0IExhdGVyXG4gICAgdGhpcy5pbml0aWFsaXplKHRoaXMucHJvcHMpO1xuICAgIHRoaXMuYWRhcHRIZWlnaHQoKTtcblxuICAgIC8vIFRvIHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nXG4gICAgaWYgKCF3aW5kb3cpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vbldpbmRvd1Jlc2l6ZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cuYXR0YWNoRXZlbnQoJ29ucmVzaXplJywgdGhpcy5vbldpbmRvd1Jlc2l6ZWQpO1xuICAgIH1cbiAgfSxcbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLmFuaW1hdGlvbkVuZENhbGxiYWNrKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5hbmltYXRpb25FbmRDYWxsYmFjayk7XG4gICAgfVxuICAgIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LmRldGFjaEV2ZW50KCdvbnJlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemVkKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUuYXV0b1BsYXlUaW1lcikge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnN0YXRlLmF1dG9QbGF5VGltZXIpO1xuICAgIH1cbiAgfSxcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zbGlja0dvVG8gIT0gbmV4dFByb3BzLnNsaWNrR29Ubykge1xuICAgICAgaWYgKGZhbHNlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybigncmVhY3Qtc2xpY2sgZGVwcmVjYXRpb24gd2FybmluZzogc2xpY2tHb1RvIHByb3AgaXMgZGVwcmVjYXRlZCBhbmQgaXQgd2lsbCBiZSByZW1vdmVkIGluIG5leHQgcmVsZWFzZS4gVXNlIHNsaWNrR29UbyBtZXRob2QgaW5zdGVhZCcpO1xuICAgICAgfVxuICAgICAgdGhpcy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXG4gICAgICAgIGluZGV4OiBuZXh0UHJvcHMuc2xpY2tHb1RvLFxuICAgICAgICBjdXJyZW50U2xpZGU6IHRoaXMuc3RhdGUuY3VycmVudFNsaWRlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuY3VycmVudFNsaWRlID49IG5leHRQcm9wcy5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHRoaXMudXBkYXRlKG5leHRQcm9wcyk7XG4gICAgICB0aGlzLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgbWVzc2FnZTogJ2luZGV4JyxcbiAgICAgICAgaW5kZXg6IG5leHRQcm9wcy5jaGlsZHJlbi5sZW5ndGggLSBuZXh0UHJvcHMuc2xpZGVzVG9TaG93LFxuICAgICAgICBjdXJyZW50U2xpZGU6IHRoaXMuc3RhdGUuY3VycmVudFNsaWRlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cGRhdGUobmV4dFByb3BzKTtcbiAgICB9XG4gIH0sXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMuYWRhcHRIZWlnaHQoKTtcbiAgfSxcbiAgb25XaW5kb3dSZXNpemVkOiBmdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZWQoKSB7XG4gICAgdGhpcy51cGRhdGUodGhpcy5wcm9wcyk7XG4gICAgLy8gYW5pbWF0aW5nIHN0YXRlIHNob3VsZCBiZSBjbGVhcmVkIHdoaWxlIHJlc2l6aW5nLCBvdGhlcndpc2UgYXV0b3BsYXkgc3RvcHMgd29ya2luZ1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgYW5pbWF0aW5nOiBmYWxzZVxuICAgIH0pO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmFuaW1hdGlvbkVuZENhbGxiYWNrKTtcbiAgICBkZWxldGUgdGhpcy5hbmltYXRpb25FbmRDYWxsYmFjaztcbiAgfSxcbiAgc2xpY2tQcmV2OiBmdW5jdGlvbiBzbGlja1ByZXYoKSB7XG4gICAgdGhpcy5jaGFuZ2VTbGlkZSh7IG1lc3NhZ2U6ICdwcmV2aW91cycgfSk7XG4gIH0sXG4gIHNsaWNrTmV4dDogZnVuY3Rpb24gc2xpY2tOZXh0KCkge1xuICAgIHRoaXMuY2hhbmdlU2xpZGUoeyBtZXNzYWdlOiAnbmV4dCcgfSk7XG4gIH0sXG4gIHNsaWNrR29UbzogZnVuY3Rpb24gc2xpY2tHb1RvKHNsaWRlKSB7XG4gICAgdHlwZW9mIHNsaWRlID09PSAnbnVtYmVyJyAmJiB0aGlzLmNoYW5nZVNsaWRlKHtcbiAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXG4gICAgICBpbmRleDogc2xpZGUsXG4gICAgICBjdXJyZW50U2xpZGU6IHRoaXMuc3RhdGUuY3VycmVudFNsaWRlXG4gICAgfSk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMyLmRlZmF1bHQpKCdzbGljay1pbml0aWFsaXplZCcsICdzbGljay1zbGlkZXInLCB0aGlzLnByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgJ3NsaWNrLXZlcnRpY2FsJzogdGhpcy5wcm9wcy52ZXJ0aWNhbFxuICAgIH0pO1xuXG4gICAgdmFyIHRyYWNrUHJvcHMgPSB7XG4gICAgICBmYWRlOiB0aGlzLnByb3BzLmZhZGUsXG4gICAgICBjc3NFYXNlOiB0aGlzLnByb3BzLmNzc0Vhc2UsXG4gICAgICBzcGVlZDogdGhpcy5wcm9wcy5zcGVlZCxcbiAgICAgIGluZmluaXRlOiB0aGlzLnByb3BzLmluZmluaXRlLFxuICAgICAgY2VudGVyTW9kZTogdGhpcy5wcm9wcy5jZW50ZXJNb2RlLFxuICAgICAgZm9jdXNPblNlbGVjdDogdGhpcy5wcm9wcy5mb2N1c09uU2VsZWN0ID8gdGhpcy5zZWxlY3RIYW5kbGVyIDogbnVsbCxcbiAgICAgIGN1cnJlbnRTbGlkZTogdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUsXG4gICAgICBsYXp5TG9hZDogdGhpcy5wcm9wcy5sYXp5TG9hZCxcbiAgICAgIGxhenlMb2FkZWRMaXN0OiB0aGlzLnN0YXRlLmxhenlMb2FkZWRMaXN0LFxuICAgICAgcnRsOiB0aGlzLnByb3BzLnJ0bCxcbiAgICAgIHNsaWRlV2lkdGg6IHRoaXMuc3RhdGUuc2xpZGVXaWR0aCxcbiAgICAgIHNsaWRlc1RvU2hvdzogdGhpcy5wcm9wcy5zbGlkZXNUb1Nob3csXG4gICAgICBzbGlkZXNUb1Njcm9sbDogdGhpcy5wcm9wcy5zbGlkZXNUb1Njcm9sbCxcbiAgICAgIHNsaWRlQ291bnQ6IHRoaXMuc3RhdGUuc2xpZGVDb3VudCxcbiAgICAgIHRyYWNrU3R5bGU6IHRoaXMuc3RhdGUudHJhY2tTdHlsZSxcbiAgICAgIHZhcmlhYmxlV2lkdGg6IHRoaXMucHJvcHMudmFyaWFibGVXaWR0aFxuICAgIH07XG5cbiAgICB2YXIgZG90cztcblxuICAgIGlmICh0aGlzLnByb3BzLmRvdHMgPT09IHRydWUgJiYgdGhpcy5zdGF0ZS5zbGlkZUNvdW50ID49IHRoaXMucHJvcHMuc2xpZGVzVG9TaG93KSB7XG4gICAgICB2YXIgZG90UHJvcHMgPSB7XG4gICAgICAgIGRvdHNDbGFzczogdGhpcy5wcm9wcy5kb3RzQ2xhc3MsXG4gICAgICAgIHNsaWRlQ291bnQ6IHRoaXMuc3RhdGUuc2xpZGVDb3VudCxcbiAgICAgICAgc2xpZGVzVG9TaG93OiB0aGlzLnByb3BzLnNsaWRlc1RvU2hvdyxcbiAgICAgICAgY3VycmVudFNsaWRlOiB0aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSxcbiAgICAgICAgc2xpZGVzVG9TY3JvbGw6IHRoaXMucHJvcHMuc2xpZGVzVG9TY3JvbGwsXG4gICAgICAgIGNsaWNrSGFuZGxlcjogdGhpcy5jaGFuZ2VTbGlkZSxcbiAgICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGN1c3RvbVBhZ2luZzogdGhpcy5wcm9wcy5jdXN0b21QYWdpbmdcbiAgICAgIH07XG5cbiAgICAgIGRvdHMgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZG90cy5Eb3RzLCBkb3RQcm9wcyk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZBcnJvdywgbmV4dEFycm93O1xuXG4gICAgdmFyIGFycm93UHJvcHMgPSB7XG4gICAgICBpbmZpbml0ZTogdGhpcy5wcm9wcy5pbmZpbml0ZSxcbiAgICAgIGNlbnRlck1vZGU6IHRoaXMucHJvcHMuY2VudGVyTW9kZSxcbiAgICAgIGN1cnJlbnRTbGlkZTogdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUsXG4gICAgICBzbGlkZUNvdW50OiB0aGlzLnN0YXRlLnNsaWRlQ291bnQsXG4gICAgICBzbGlkZXNUb1Nob3c6IHRoaXMucHJvcHMuc2xpZGVzVG9TaG93LFxuICAgICAgcHJldkFycm93OiB0aGlzLnByb3BzLnByZXZBcnJvdyxcbiAgICAgIG5leHRBcnJvdzogdGhpcy5wcm9wcy5uZXh0QXJyb3csXG4gICAgICBjbGlja0hhbmRsZXI6IHRoaXMuY2hhbmdlU2xpZGVcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMucHJvcHMuYXJyb3dzKSB7XG4gICAgICBwcmV2QXJyb3cgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfYXJyb3dzLlByZXZBcnJvdywgYXJyb3dQcm9wcyk7XG4gICAgICBuZXh0QXJyb3cgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfYXJyb3dzLk5leHRBcnJvdywgYXJyb3dQcm9wcyk7XG4gICAgfVxuXG4gICAgdmFyIHZlcnRpY2FsSGVpZ2h0U3R5bGUgPSBudWxsO1xuXG4gICAgaWYgKHRoaXMucHJvcHMudmVydGljYWwpIHtcbiAgICAgIHZlcnRpY2FsSGVpZ2h0U3R5bGUgPSB7XG4gICAgICAgIGhlaWdodDogdGhpcy5zdGF0ZS5saXN0SGVpZ2h0XG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBjZW50ZXJQYWRkaW5nU3R5bGUgPSBudWxsO1xuXG4gICAgaWYgKHRoaXMucHJvcHMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgIGNlbnRlclBhZGRpbmdTdHlsZSA9IHtcbiAgICAgICAgICBwYWRkaW5nOiAnMHB4ICcgKyB0aGlzLnByb3BzLmNlbnRlclBhZGRpbmdcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMucHJvcHMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICBjZW50ZXJQYWRkaW5nU3R5bGUgPSB7XG4gICAgICAgICAgcGFkZGluZzogdGhpcy5wcm9wcy5jZW50ZXJQYWRkaW5nICsgJyAwcHgnXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxpc3RTdHlsZSA9ICgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KSh7fSwgdmVydGljYWxIZWlnaHRTdHlsZSwgY2VudGVyUGFkZGluZ1N0eWxlKTtcblxuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLm9uSW5uZXJTbGlkZXJFbnRlcixcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLm9uSW5uZXJTbGlkZXJMZWF2ZSxcbiAgICAgICAgb25Nb3VzZU92ZXI6IHRoaXMub25Jbm5lclNsaWRlck92ZXJcbiAgICAgIH0sXG4gICAgICBwcmV2QXJyb3csXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICByZWY6IHRoaXMubGlzdFJlZkhhbmRsZXIsXG4gICAgICAgICAgY2xhc3NOYW1lOiAnc2xpY2stbGlzdCcsXG4gICAgICAgICAgc3R5bGU6IGxpc3RTdHlsZSxcbiAgICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5zd2lwZVN0YXJ0LFxuICAgICAgICAgIG9uTW91c2VNb3ZlOiB0aGlzLnN0YXRlLmRyYWdnaW5nID8gdGhpcy5zd2lwZU1vdmUgOiBudWxsLFxuICAgICAgICAgIG9uTW91c2VVcDogdGhpcy5zd2lwZUVuZCxcbiAgICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuc3RhdGUuZHJhZ2dpbmcgPyB0aGlzLnN3aXBlRW5kIDogbnVsbCxcbiAgICAgICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuc3dpcGVTdGFydCxcbiAgICAgICAgICBvblRvdWNoTW92ZTogdGhpcy5zdGF0ZS5kcmFnZ2luZyA/IHRoaXMuc3dpcGVNb3ZlIDogbnVsbCxcbiAgICAgICAgICBvblRvdWNoRW5kOiB0aGlzLnN3aXBlRW5kLFxuICAgICAgICAgIG9uVG91Y2hDYW5jZWw6IHRoaXMuc3RhdGUuZHJhZ2dpbmcgPyB0aGlzLnN3aXBlRW5kIDogbnVsbCxcbiAgICAgICAgICBvbktleURvd246IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eSA/IHRoaXMua2V5SGFuZGxlciA6IG51bGwgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgX3RyYWNrLlRyYWNrLFxuICAgICAgICAgIF9leHRlbmRzKHsgcmVmOiB0aGlzLnRyYWNrUmVmSGFuZGxlciB9LCB0cmFja1Byb3BzKSxcbiAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgICAgIClcbiAgICAgICksXG4gICAgICBuZXh0QXJyb3csXG4gICAgICBkb3RzXG4gICAgKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMzE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHJhY2tIZWxwZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0MCk7XG5cbnZhciBfaGVscGVycyA9IF9fd2VicGFja19yZXF1aXJlX18oODApO1xuXG52YXIgX2hlbHBlcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVycyk7XG5cbnZhciBfb2JqZWN0QXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9vYmplY3RBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0QXNzaWduKTtcblxudmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEV2ZW50SGFuZGxlcnMgPSB7XG4gIC8vIEV2ZW50IGhhbmRsZXIgZm9yIHByZXZpb3VzIGFuZCBuZXh0XG4gIGNoYW5nZVNsaWRlOiBmdW5jdGlvbiBjaGFuZ2VTbGlkZShvcHRpb25zKSB7XG4gICAgdmFyIGluZGV4T2Zmc2V0LCBwcmV2aW91c0ludCwgc2xpZGVPZmZzZXQsIHVuZXZlbk9mZnNldCwgdGFyZ2V0U2xpZGU7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHNsaWRlc1RvU2Nyb2xsID0gX3Byb3BzLnNsaWRlc1RvU2Nyb2xsO1xuICAgIHZhciBzbGlkZXNUb1Nob3cgPSBfcHJvcHMuc2xpZGVzVG9TaG93O1xuICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIHZhciBzbGlkZUNvdW50ID0gX3N0YXRlLnNsaWRlQ291bnQ7XG4gICAgdmFyIGN1cnJlbnRTbGlkZSA9IF9zdGF0ZS5jdXJyZW50U2xpZGU7XG5cbiAgICB1bmV2ZW5PZmZzZXQgPSBzbGlkZUNvdW50ICUgc2xpZGVzVG9TY3JvbGwgIT09IDA7XG4gICAgaW5kZXhPZmZzZXQgPSB1bmV2ZW5PZmZzZXQgPyAwIDogKHNsaWRlQ291bnQgLSBjdXJyZW50U2xpZGUpICUgc2xpZGVzVG9TY3JvbGw7XG5cbiAgICBpZiAob3B0aW9ucy5tZXNzYWdlID09PSAncHJldmlvdXMnKSB7XG4gICAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gc2xpZGVzVG9TY3JvbGwgOiBzbGlkZXNUb1Nob3cgLSBpbmRleE9mZnNldDtcbiAgICAgIHRhcmdldFNsaWRlID0gY3VycmVudFNsaWRlIC0gc2xpZGVPZmZzZXQ7XG4gICAgICBpZiAodGhpcy5wcm9wcy5sYXp5TG9hZCkge1xuICAgICAgICBwcmV2aW91c0ludCA9IGN1cnJlbnRTbGlkZSAtIHNsaWRlT2Zmc2V0O1xuICAgICAgICB0YXJnZXRTbGlkZSA9IHByZXZpb3VzSW50ID09PSAtMSA/IHNsaWRlQ291bnQgLSAxIDogcHJldmlvdXNJbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLm1lc3NhZ2UgPT09ICduZXh0Jykge1xuICAgICAgc2xpZGVPZmZzZXQgPSBpbmRleE9mZnNldCA9PT0gMCA/IHNsaWRlc1RvU2Nyb2xsIDogaW5kZXhPZmZzZXQ7XG4gICAgICB0YXJnZXRTbGlkZSA9IGN1cnJlbnRTbGlkZSArIHNsaWRlT2Zmc2V0O1xuICAgICAgaWYgKHRoaXMucHJvcHMubGF6eUxvYWQpIHtcbiAgICAgICAgdGFyZ2V0U2xpZGUgPSAoY3VycmVudFNsaWRlICsgc2xpZGVzVG9TY3JvbGwpICUgc2xpZGVDb3VudCArIGluZGV4T2Zmc2V0O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5tZXNzYWdlID09PSAnZG90cycgfHwgb3B0aW9ucy5tZXNzYWdlID09PSAnY2hpbGRyZW4nKSB7XG4gICAgICAvLyBDbGljayBvbiBkb3RzXG4gICAgICB0YXJnZXRTbGlkZSA9IG9wdGlvbnMuaW5kZXggKiBvcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgaWYgKHRhcmdldFNsaWRlID09PSBvcHRpb25zLmN1cnJlbnRTbGlkZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLm1lc3NhZ2UgPT09ICdpbmRleCcpIHtcbiAgICAgIHRhcmdldFNsaWRlID0gcGFyc2VJbnQob3B0aW9ucy5pbmRleCk7XG4gICAgICBpZiAodGFyZ2V0U2xpZGUgPT09IG9wdGlvbnMuY3VycmVudFNsaWRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNsaWRlSGFuZGxlcih0YXJnZXRTbGlkZSk7XG4gIH0sXG5cbiAgLy8gQWNjZXNzaWJsaXR5IGhhbmRsZXIgZm9yIHByZXZpb3VzIGFuZCBuZXh0XG4gIGtleUhhbmRsZXI6IGZ1bmN0aW9uIGtleUhhbmRsZXIoZSkge1xuICAgIC8vRG9udCBzbGlkZSBpZiB0aGUgY3Vyc29yIGlzIGluc2lkZSB0aGUgZm9ybSBmaWVsZHMgYW5kIGFycm93IGtleXMgYXJlIHByZXNzZWRcbiAgICBpZiAoIWUudGFyZ2V0LnRhZ05hbWUubWF0Y2goJ1RFWFRBUkVBfElOUFVUfFNFTEVDVCcpKSB7XG4gICAgICBpZiAoZS5rZXlDb2RlID09PSAzNyAmJiB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgbWVzc2FnZTogdGhpcy5wcm9wcy5ydGwgPT09IHRydWUgPyAnbmV4dCcgOiAncHJldmlvdXMnXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDM5ICYmIHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICBtZXNzYWdlOiB0aGlzLnByb3BzLnJ0bCA9PT0gdHJ1ZSA/ICdwcmV2aW91cycgOiAnbmV4dCdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAvLyBGb2N1cyBvbiBzZWxlY3RpbmcgYSBzbGlkZSAoY2xpY2sgaGFuZGxlciBvbiB0cmFjaylcbiAgc2VsZWN0SGFuZGxlcjogZnVuY3Rpb24gc2VsZWN0SGFuZGxlcihvcHRpb25zKSB7XG4gICAgdGhpcy5jaGFuZ2VTbGlkZShvcHRpb25zKTtcbiAgfSxcbiAgc3dpcGVTdGFydDogZnVuY3Rpb24gc3dpcGVTdGFydChlKSB7XG4gICAgdmFyIHRvdWNoZXMsIHBvc1gsIHBvc1k7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5zd2lwZSA9PT0gZmFsc2UgfHwgJ29udG91Y2hlbmQnIGluIGRvY3VtZW50ICYmIHRoaXMucHJvcHMuc3dpcGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmRyYWdnYWJsZSA9PT0gZmFsc2UgJiYgZS50eXBlLmluZGV4T2YoJ21vdXNlJykgIT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHBvc1ggPSBlLnRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IGUudG91Y2hlc1swXS5wYWdlWCA6IGUuY2xpZW50WDtcbiAgICBwb3NZID0gZS50b3VjaGVzICE9PSB1bmRlZmluZWQgPyBlLnRvdWNoZXNbMF0ucGFnZVkgOiBlLmNsaWVudFk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkcmFnZ2luZzogdHJ1ZSxcbiAgICAgIHRvdWNoT2JqZWN0OiB7XG4gICAgICAgIHN0YXJ0WDogcG9zWCxcbiAgICAgICAgc3RhcnRZOiBwb3NZLFxuICAgICAgICBjdXJYOiBwb3NYLFxuICAgICAgICBjdXJZOiBwb3NZXG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIHN3aXBlTW92ZTogZnVuY3Rpb24gc3dpcGVNb3ZlKGUpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuZHJhZ2dpbmcpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUuYW5pbWF0aW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLnZlcnRpY2FsICYmIHRoaXMucHJvcHMuc3dpcGVUb1NsaWRlICYmIHRoaXMucHJvcHMudmVydGljYWxTd2lwaW5nKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIHZhciBzd2lwZUxlZnQ7XG4gICAgdmFyIGN1ckxlZnQsIHBvc2l0aW9uT2Zmc2V0O1xuICAgIHZhciB0b3VjaE9iamVjdCA9IHRoaXMuc3RhdGUudG91Y2hPYmplY3Q7XG5cbiAgICBjdXJMZWZ0ID0gKDAsIF90cmFja0hlbHBlci5nZXRUcmFja0xlZnQpKCgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KSh7XG4gICAgICBzbGlkZUluZGV4OiB0aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSxcbiAgICAgIHRyYWNrUmVmOiB0aGlzLnRyYWNrXG4gICAgfSwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZSkpO1xuICAgIHRvdWNoT2JqZWN0LmN1clggPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0ucGFnZVggOiBlLmNsaWVudFg7XG4gICAgdG91Y2hPYmplY3QuY3VyWSA9IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXS5wYWdlWSA6IGUuY2xpZW50WTtcbiAgICB0b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KE1hdGgucG93KHRvdWNoT2JqZWN0LmN1clggLSB0b3VjaE9iamVjdC5zdGFydFgsIDIpKSk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy52ZXJ0aWNhbFN3aXBpbmcpIHtcbiAgICAgIHRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoTWF0aC5wb3codG91Y2hPYmplY3QuY3VyWSAtIHRvdWNoT2JqZWN0LnN0YXJ0WSwgMikpKTtcbiAgICB9XG5cbiAgICBwb3NpdGlvbk9mZnNldCA9ICh0aGlzLnByb3BzLnJ0bCA9PT0gZmFsc2UgPyAxIDogLTEpICogKHRvdWNoT2JqZWN0LmN1clggPiB0b3VjaE9iamVjdC5zdGFydFggPyAxIDogLTEpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMudmVydGljYWxTd2lwaW5nKSB7XG4gICAgICBwb3NpdGlvbk9mZnNldCA9IHRvdWNoT2JqZWN0LmN1clkgPiB0b3VjaE9iamVjdC5zdGFydFkgPyAxIDogLTE7XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnRTbGlkZSA9IHRoaXMuc3RhdGUuY3VycmVudFNsaWRlO1xuICAgIHZhciBkb3RDb3VudCA9IE1hdGguY2VpbCh0aGlzLnN0YXRlLnNsaWRlQ291bnQgLyB0aGlzLnByb3BzLnNsaWRlc1RvU2Nyb2xsKTtcbiAgICB2YXIgc3dpcGVEaXJlY3Rpb24gPSB0aGlzLnN3aXBlRGlyZWN0aW9uKHRoaXMuc3RhdGUudG91Y2hPYmplY3QpO1xuICAgIHZhciB0b3VjaFN3aXBlTGVuZ3RoID0gdG91Y2hPYmplY3Quc3dpcGVMZW5ndGg7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgIGlmIChjdXJyZW50U2xpZGUgPT09IDAgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdyaWdodCcgfHwgY3VycmVudFNsaWRlICsgMSA+PSBkb3RDb3VudCAmJiBzd2lwZURpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIHRvdWNoU3dpcGVMZW5ndGggPSB0b3VjaE9iamVjdC5zd2lwZUxlbmd0aCAqIHRoaXMucHJvcHMuZWRnZUZyaWN0aW9uO1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmVkZ2VEcmFnZ2VkID09PSBmYWxzZSAmJiB0aGlzLnByb3BzLmVkZ2VFdmVudCkge1xuICAgICAgICAgIHRoaXMucHJvcHMuZWRnZUV2ZW50KHN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZWRnZURyYWdnZWQ6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5zd2lwZWQgPT09IGZhbHNlICYmIHRoaXMucHJvcHMuc3dpcGVFdmVudCkge1xuICAgICAgdGhpcy5wcm9wcy5zd2lwZUV2ZW50KHN3aXBlRGlyZWN0aW9uKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBzd2lwZWQ6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnByb3BzLnZlcnRpY2FsKSB7XG4gICAgICBzd2lwZUxlZnQgPSBjdXJMZWZ0ICsgdG91Y2hTd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZUxlZnQgPSBjdXJMZWZ0ICsgdG91Y2hTd2lwZUxlbmd0aCAqICh0aGlzLnN0YXRlLmxpc3RIZWlnaHQgLyB0aGlzLnN0YXRlLmxpc3RXaWR0aCkgKiBwb3NpdGlvbk9mZnNldDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy52ZXJ0aWNhbFN3aXBpbmcpIHtcbiAgICAgIHN3aXBlTGVmdCA9IGN1ckxlZnQgKyB0b3VjaFN3aXBlTGVuZ3RoICogcG9zaXRpb25PZmZzZXQ7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB0b3VjaE9iamVjdDogdG91Y2hPYmplY3QsXG4gICAgICBzd2lwZUxlZnQ6IHN3aXBlTGVmdCxcbiAgICAgIHRyYWNrU3R5bGU6ICgwLCBfdHJhY2tIZWxwZXIuZ2V0VHJhY2tDU1MpKCgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KSh7IGxlZnQ6IHN3aXBlTGVmdCB9LCB0aGlzLnByb3BzLCB0aGlzLnN0YXRlKSlcbiAgICB9KTtcblxuICAgIGlmIChNYXRoLmFicyh0b3VjaE9iamVjdC5jdXJYIC0gdG91Y2hPYmplY3Quc3RhcnRYKSA8IE1hdGguYWJzKHRvdWNoT2JqZWN0LmN1clkgLSB0b3VjaE9iamVjdC5zdGFydFkpICogMC44KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+IDQpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0sXG4gIGdldE5hdmlnYWJsZUluZGV4ZXM6IGZ1bmN0aW9uIGdldE5hdmlnYWJsZUluZGV4ZXMoKSB7XG4gICAgdmFyIG1heCA9IHZvaWQgMDtcbiAgICB2YXIgYnJlYWtQb2ludCA9IDA7XG4gICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgIHZhciBpbmRleGVzID0gW107XG5cbiAgICBpZiAoIXRoaXMucHJvcHMuaW5maW5pdGUpIHtcbiAgICAgIG1heCA9IHRoaXMuc3RhdGUuc2xpZGVDb3VudDtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWtQb2ludCA9IHRoaXMucHJvcHMuc2xpZGVzVG9TaG93ICogLTE7XG4gICAgICBjb3VudGVyID0gdGhpcy5wcm9wcy5zbGlkZXNUb1Nob3cgKiAtMTtcbiAgICAgIG1heCA9IHRoaXMuc3RhdGUuc2xpZGVDb3VudCAqIDI7XG4gICAgfVxuXG4gICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBtYXgpIHtcbiAgICAgIGluZGV4ZXMucHVzaChicmVha1BvaW50KTtcbiAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgdGhpcy5wcm9wcy5zbGlkZXNUb1Njcm9sbDtcblxuICAgICAgY291bnRlciArPSB0aGlzLnByb3BzLnNsaWRlc1RvU2Nyb2xsIDw9IHRoaXMucHJvcHMuc2xpZGVzVG9TaG93ID8gdGhpcy5wcm9wcy5zbGlkZXNUb1Njcm9sbCA6IHRoaXMucHJvcHMuc2xpZGVzVG9TaG93O1xuICAgIH1cblxuICAgIHJldHVybiBpbmRleGVzO1xuICB9LFxuICBjaGVja05hdmlnYWJsZTogZnVuY3Rpb24gY2hlY2tOYXZpZ2FibGUoaW5kZXgpIHtcbiAgICB2YXIgbmF2aWdhYmxlcyA9IHRoaXMuZ2V0TmF2aWdhYmxlSW5kZXhlcygpO1xuICAgIHZhciBwcmV2TmF2aWdhYmxlID0gMDtcblxuICAgIGlmIChpbmRleCA+IG5hdmlnYWJsZXNbbmF2aWdhYmxlcy5sZW5ndGggLSAxXSkge1xuICAgICAgaW5kZXggPSBuYXZpZ2FibGVzW25hdmlnYWJsZXMubGVuZ3RoIC0gMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIG4gaW4gbmF2aWdhYmxlcykge1xuICAgICAgICBpZiAoaW5kZXggPCBuYXZpZ2FibGVzW25dKSB7XG4gICAgICAgICAgaW5kZXggPSBwcmV2TmF2aWdhYmxlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldk5hdmlnYWJsZSA9IG5hdmlnYWJsZXNbbl07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZGV4O1xuICB9LFxuICBnZXRTbGlkZUNvdW50OiBmdW5jdGlvbiBnZXRTbGlkZUNvdW50KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgY2VudGVyT2Zmc2V0ID0gdGhpcy5wcm9wcy5jZW50ZXJNb2RlID8gdGhpcy5zdGF0ZS5zbGlkZVdpZHRoICogTWF0aC5mbG9vcih0aGlzLnByb3BzLnNsaWRlc1RvU2hvdyAvIDIpIDogMDtcblxuICAgIGlmICh0aGlzLnByb3BzLnN3aXBlVG9TbGlkZSkge1xuICAgICAgdmFyIHN3aXBlZFNsaWRlID0gdm9pZCAwO1xuXG4gICAgICB2YXIgc2xpY2tMaXN0ID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMubGlzdCk7XG5cbiAgICAgIHZhciBzbGlkZXMgPSBzbGlja0xpc3QucXVlcnlTZWxlY3RvckFsbCgnLnNsaWNrLXNsaWRlJyk7XG5cbiAgICAgIEFycmF5LmZyb20oc2xpZGVzKS5ldmVyeShmdW5jdGlvbiAoc2xpZGUpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5wcm9wcy52ZXJ0aWNhbCkge1xuICAgICAgICAgIGlmIChzbGlkZS5vZmZzZXRMZWZ0IC0gY2VudGVyT2Zmc2V0ICsgX3RoaXMuZ2V0V2lkdGgoc2xpZGUpIC8gMiA+IF90aGlzLnN0YXRlLnN3aXBlTGVmdCAqIC0xKSB7XG4gICAgICAgICAgICBzd2lwZWRTbGlkZSA9IHNsaWRlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoc2xpZGUub2Zmc2V0VG9wICsgX3RoaXMuZ2V0SGVpZ2h0KHNsaWRlKSAvIDIgPiBfdGhpcy5zdGF0ZS5zd2lwZUxlZnQgKiAtMSkge1xuICAgICAgICAgICAgc3dpcGVkU2xpZGUgPSBzbGlkZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgc2xpZGVzVHJhdmVyc2VkID0gTWF0aC5hYnMoc3dpcGVkU2xpZGUuZGF0YXNldC5pbmRleCAtIHRoaXMuc3RhdGUuY3VycmVudFNsaWRlKSB8fCAxO1xuXG4gICAgICByZXR1cm4gc2xpZGVzVHJhdmVyc2VkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5zbGlkZXNUb1Njcm9sbDtcbiAgICB9XG4gIH0sXG5cbiAgc3dpcGVFbmQ6IGZ1bmN0aW9uIHN3aXBlRW5kKGUpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuZHJhZ2dpbmcpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnN3aXBlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRvdWNoT2JqZWN0ID0gdGhpcy5zdGF0ZS50b3VjaE9iamVjdDtcbiAgICB2YXIgbWluU3dpcGUgPSB0aGlzLnN0YXRlLmxpc3RXaWR0aCAvIHRoaXMucHJvcHMudG91Y2hUaHJlc2hvbGQ7XG4gICAgdmFyIHN3aXBlRGlyZWN0aW9uID0gdGhpcy5zd2lwZURpcmVjdGlvbih0b3VjaE9iamVjdCk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy52ZXJ0aWNhbFN3aXBpbmcpIHtcbiAgICAgIG1pblN3aXBlID0gdGhpcy5zdGF0ZS5saXN0SGVpZ2h0IC8gdGhpcy5wcm9wcy50b3VjaFRocmVzaG9sZDtcbiAgICB9XG5cbiAgICAvLyByZXNldCB0aGUgc3RhdGUgb2YgdG91Y2ggcmVsYXRlZCBzdGF0ZSB2YXJpYWJsZXMuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkcmFnZ2luZzogZmFsc2UsXG4gICAgICBlZGdlRHJhZ2dlZDogZmFsc2UsXG4gICAgICBzd2lwZWQ6IGZhbHNlLFxuICAgICAgc3dpcGVMZWZ0OiBudWxsLFxuICAgICAgdG91Y2hPYmplY3Q6IHt9XG4gICAgfSk7XG4gICAgLy8gRml4IGZvciAjMTNcbiAgICBpZiAoIXRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+IG1pblN3aXBlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIHZhciBzbGlkZUNvdW50ID0gdm9pZCAwLFxuICAgICAgICAgIG5ld1NsaWRlID0gdm9pZCAwO1xuXG4gICAgICBzd2l0Y2ggKHN3aXBlRGlyZWN0aW9uKSB7XG5cbiAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgIGNhc2UgJ2Rvd24nOlxuICAgICAgICAgIG5ld1NsaWRlID0gdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUgKyB0aGlzLmdldFNsaWRlQ291bnQoKTtcbiAgICAgICAgICBzbGlkZUNvdW50ID0gdGhpcy5wcm9wcy5zd2lwZVRvU2xpZGUgPyB0aGlzLmNoZWNrTmF2aWdhYmxlKG5ld1NsaWRlKSA6IG5ld1NsaWRlO1xuICAgICAgICAgIHRoaXMuc3RhdGUuY3VycmVudERpcmVjdGlvbiA9IDA7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICBjYXNlICd1cCc6XG4gICAgICAgICAgbmV3U2xpZGUgPSB0aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSAtIHRoaXMuZ2V0U2xpZGVDb3VudCgpO1xuICAgICAgICAgIHNsaWRlQ291bnQgPSB0aGlzLnByb3BzLnN3aXBlVG9TbGlkZSA/IHRoaXMuY2hlY2tOYXZpZ2FibGUobmV3U2xpZGUpIDogbmV3U2xpZGU7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5jdXJyZW50RGlyZWN0aW9uID0gMTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHNsaWRlQ291bnQgPSB0aGlzLnN0YXRlLmN1cnJlbnRTbGlkZTtcblxuICAgICAgfVxuXG4gICAgICB0aGlzLnNsaWRlSGFuZGxlcihzbGlkZUNvdW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQWRqdXN0IHRoZSB0cmFjayBiYWNrIHRvIGl0J3Mgb3JpZ2luYWwgcG9zaXRpb24uXG4gICAgICB2YXIgY3VycmVudExlZnQgPSAoMCwgX3RyYWNrSGVscGVyLmdldFRyYWNrTGVmdCkoKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHtcbiAgICAgICAgc2xpZGVJbmRleDogdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUsXG4gICAgICAgIHRyYWNrUmVmOiB0aGlzLnRyYWNrXG4gICAgICB9LCB0aGlzLnByb3BzLCB0aGlzLnN0YXRlKSk7XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICB0cmFja1N0eWxlOiAoMCwgX3RyYWNrSGVscGVyLmdldFRyYWNrQW5pbWF0ZUNTUykoKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHsgbGVmdDogY3VycmVudExlZnQgfSwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZSkpXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIG9uSW5uZXJTbGlkZXJFbnRlcjogZnVuY3Rpb24gb25Jbm5lclNsaWRlckVudGVyKGUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5hdXRvcGxheSAmJiB0aGlzLnByb3BzLnBhdXNlT25Ib3Zlcikge1xuICAgICAgdGhpcy5wYXVzZSgpO1xuICAgIH1cbiAgfSxcbiAgb25Jbm5lclNsaWRlck92ZXI6IGZ1bmN0aW9uIG9uSW5uZXJTbGlkZXJPdmVyKGUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5hdXRvcGxheSAmJiB0aGlzLnByb3BzLnBhdXNlT25Ib3Zlcikge1xuICAgICAgdGhpcy5wYXVzZSgpO1xuICAgIH1cbiAgfSxcbiAgb25Jbm5lclNsaWRlckxlYXZlOiBmdW5jdGlvbiBvbklubmVyU2xpZGVyTGVhdmUoZSkge1xuICAgIGlmICh0aGlzLnByb3BzLmF1dG9wbGF5ICYmIHRoaXMucHJvcHMucGF1c2VPbkhvdmVyKSB7XG4gICAgICB0aGlzLmF1dG9QbGF5KCk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBFdmVudEhhbmRsZXJzO1xuXG4vKioqLyB9KSxcbi8qIDMxNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfaW5uZXJTbGlkZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxNSk7XG5cbnZhciBfb2JqZWN0QXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9vYmplY3RBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0QXNzaWduKTtcblxudmFyIF9qc29uMm1xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Myk7XG5cbnZhciBfanNvbjJtcTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qc29uMm1xKTtcblxudmFyIF9yZWFjdFJlc3BvbnNpdmVNaXhpbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjkyKTtcblxudmFyIF9yZWFjdFJlc3BvbnNpdmVNaXhpbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdFJlc3BvbnNpdmVNaXhpbik7XG5cbnZhciBfZGVmYXVsdFByb3BzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzkpO1xuXG52YXIgX2RlZmF1bHRQcm9wczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZhdWx0UHJvcHMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU2xpZGVyID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdTbGlkZXInLFxuXG4gIG1peGluczogW19yZWFjdFJlc3BvbnNpdmVNaXhpbjIuZGVmYXVsdF0sXG4gIGlubmVyU2xpZGVyOiBudWxsLFxuICBpbm5lclNsaWRlclJlZkhhbmRsZXI6IGZ1bmN0aW9uIGlubmVyU2xpZGVyUmVmSGFuZGxlcihyZWYpIHtcbiAgICB0aGlzLmlubmVyU2xpZGVyID0gcmVmO1xuICB9LFxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYnJlYWtwb2ludDogbnVsbFxuICAgIH07XG4gIH0sXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5yZXNwb25zaXZlKSB7XG4gICAgICB2YXIgYnJlYWtwb2ludHMgPSB0aGlzLnByb3BzLnJlc3BvbnNpdmUubWFwKGZ1bmN0aW9uIChicmVha3B0KSB7XG4gICAgICAgIHJldHVybiBicmVha3B0LmJyZWFrcG9pbnQ7XG4gICAgICB9KTtcbiAgICAgIGJyZWFrcG9pbnRzLnNvcnQoZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIHggLSB5O1xuICAgICAgfSk7XG5cbiAgICAgIGJyZWFrcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGJyZWFrcG9pbnQsIGluZGV4KSB7XG4gICAgICAgIHZhciBiUXVlcnk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgIGJRdWVyeSA9ICgwLCBfanNvbjJtcTIuZGVmYXVsdCkoeyBtaW5XaWR0aDogMCwgbWF4V2lkdGg6IGJyZWFrcG9pbnQgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYlF1ZXJ5ID0gKDAsIF9qc29uMm1xMi5kZWZhdWx0KSh7IG1pbldpZHRoOiBicmVha3BvaW50c1tpbmRleCAtIDFdLCBtYXhXaWR0aDogYnJlYWtwb2ludCB9KTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5tZWRpYShiUXVlcnksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGJyZWFrcG9pbnQ6IGJyZWFrcG9pbnQgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFJlZ2lzdGVyIG1lZGlhIHF1ZXJ5IGZvciBmdWxsIHNjcmVlbi4gTmVlZCB0byBzdXBwb3J0IHJlc2l6ZSBmcm9tIHNtYWxsIHRvIGxhcmdlXG4gICAgICB2YXIgcXVlcnkgPSAoMCwgX2pzb24ybXEyLmRlZmF1bHQpKHsgbWluV2lkdGg6IGJyZWFrcG9pbnRzLnNsaWNlKC0xKVswXSB9KTtcblxuICAgICAgdGhpcy5tZWRpYShxdWVyeSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGJyZWFrcG9pbnQ6IG51bGwgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgc2xpY2tQcmV2OiBmdW5jdGlvbiBzbGlja1ByZXYoKSB7XG4gICAgdGhpcy5pbm5lclNsaWRlci5zbGlja1ByZXYoKTtcbiAgfSxcblxuICBzbGlja05leHQ6IGZ1bmN0aW9uIHNsaWNrTmV4dCgpIHtcbiAgICB0aGlzLmlubmVyU2xpZGVyLnNsaWNrTmV4dCgpO1xuICB9LFxuXG4gIHNsaWNrR29UbzogZnVuY3Rpb24gc2xpY2tHb1RvKHNsaWRlKSB7XG4gICAgdGhpcy5pbm5lclNsaWRlci5zbGlja0dvVG8oc2xpZGUpO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHNldHRpbmdzO1xuICAgIHZhciBuZXdQcm9wcztcbiAgICBpZiAodGhpcy5zdGF0ZS5icmVha3BvaW50KSB7XG4gICAgICBuZXdQcm9wcyA9IHRoaXMucHJvcHMucmVzcG9uc2l2ZS5maWx0ZXIoZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgICAgcmV0dXJuIHJlc3AuYnJlYWtwb2ludCA9PT0gX3RoaXMyLnN0YXRlLmJyZWFrcG9pbnQ7XG4gICAgICB9KTtcbiAgICAgIHNldHRpbmdzID0gbmV3UHJvcHNbMF0uc2V0dGluZ3MgPT09ICd1bnNsaWNrJyA/ICd1bnNsaWNrJyA6ICgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KSh7fSwgdGhpcy5wcm9wcywgbmV3UHJvcHNbMF0uc2V0dGluZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXR0aW5ncyA9ICgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KSh7fSwgX2RlZmF1bHRQcm9wczIuZGVmYXVsdCwgdGhpcy5wcm9wcyk7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICBjaGlsZHJlbiA9IFtjaGlsZHJlbl07XG4gICAgfVxuXG4gICAgLy8gQ2hpbGRyZW4gbWF5IGNvbnRhaW4gZmFsc2Ugb3IgbnVsbCwgc28gd2Ugc2hvdWxkIGZpbHRlciB0aGVtXG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gISFjaGlsZDtcbiAgICB9KTtcblxuICAgIGlmIChzZXR0aW5ncyA9PT0gJ3Vuc2xpY2snKSB7XG4gICAgICAvLyBpZiAndW5zbGljaycgcmVzcG9uc2l2ZSBicmVha3BvaW50IHNldHRpbmcgdXNlZCwganVzdCByZXR1cm4gdGhlIDxTbGlkZXI+IHRhZyBuZXN0ZWQgSFRNTFxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgX2lubmVyU2xpZGVyLklubmVyU2xpZGVyLFxuICAgICAgICBfZXh0ZW5kcyh7IHJlZjogdGhpcy5pbm5lclNsaWRlclJlZkhhbmRsZXIgfSwgc2V0dGluZ3MpLFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNsaWRlcjtcblxuLyoqKi8gfSksXG4vKiAzMTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuVHJhY2sgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9vYmplY3RBc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX29iamVjdEFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RBc3NpZ24pO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KTtcblxudmFyIF9jbGFzc25hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZ2V0U2xpZGVDbGFzc2VzID0gZnVuY3Rpb24gZ2V0U2xpZGVDbGFzc2VzKHNwZWMpIHtcbiAgdmFyIHNsaWNrQWN0aXZlLCBzbGlja0NlbnRlciwgc2xpY2tDbG9uZWQ7XG4gIHZhciBjZW50ZXJPZmZzZXQsIGluZGV4O1xuXG4gIGlmIChzcGVjLnJ0bCkge1xuICAgIGluZGV4ID0gc3BlYy5zbGlkZUNvdW50IC0gMSAtIHNwZWMuaW5kZXg7XG4gIH0gZWxzZSB7XG4gICAgaW5kZXggPSBzcGVjLmluZGV4O1xuICB9XG5cbiAgc2xpY2tDbG9uZWQgPSBpbmRleCA8IDAgfHwgaW5kZXggPj0gc3BlYy5zbGlkZUNvdW50O1xuICBpZiAoc3BlYy5jZW50ZXJNb2RlKSB7XG4gICAgY2VudGVyT2Zmc2V0ID0gTWF0aC5mbG9vcihzcGVjLnNsaWRlc1RvU2hvdyAvIDIpO1xuICAgIHNsaWNrQ2VudGVyID0gKGluZGV4IC0gc3BlYy5jdXJyZW50U2xpZGUpICUgc3BlYy5zbGlkZUNvdW50ID09PSAwO1xuICAgIGlmIChpbmRleCA+IHNwZWMuY3VycmVudFNsaWRlIC0gY2VudGVyT2Zmc2V0IC0gMSAmJiBpbmRleCA8PSBzcGVjLmN1cnJlbnRTbGlkZSArIGNlbnRlck9mZnNldCkge1xuICAgICAgc2xpY2tBY3RpdmUgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzbGlja0FjdGl2ZSA9IHNwZWMuY3VycmVudFNsaWRlIDw9IGluZGV4ICYmIGluZGV4IDwgc3BlYy5jdXJyZW50U2xpZGUgKyBzcGVjLnNsaWRlc1RvU2hvdztcbiAgfVxuICByZXR1cm4gKDAsIF9jbGFzc25hbWVzMi5kZWZhdWx0KSh7XG4gICAgJ3NsaWNrLXNsaWRlJzogdHJ1ZSxcbiAgICAnc2xpY2stYWN0aXZlJzogc2xpY2tBY3RpdmUsXG4gICAgJ3NsaWNrLWNlbnRlcic6IHNsaWNrQ2VudGVyLFxuICAgICdzbGljay1jbG9uZWQnOiBzbGlja0Nsb25lZFxuICB9KTtcbn07XG5cbnZhciBnZXRTbGlkZVN0eWxlID0gZnVuY3Rpb24gZ2V0U2xpZGVTdHlsZShzcGVjKSB7XG4gIHZhciBzdHlsZSA9IHt9O1xuXG4gIGlmIChzcGVjLnZhcmlhYmxlV2lkdGggPT09IHVuZGVmaW5lZCB8fCBzcGVjLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSB7XG4gICAgc3R5bGUud2lkdGggPSBzcGVjLnNsaWRlV2lkdGg7XG4gIH1cblxuICBpZiAoc3BlYy5mYWRlKSB7XG4gICAgc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgIHN0eWxlLmxlZnQgPSAtc3BlYy5pbmRleCAqIHNwZWMuc2xpZGVXaWR0aDtcbiAgICBzdHlsZS5vcGFjaXR5ID0gc3BlYy5jdXJyZW50U2xpZGUgPT09IHNwZWMuaW5kZXggPyAxIDogMDtcbiAgICBzdHlsZS50cmFuc2l0aW9uID0gJ29wYWNpdHkgJyArIHNwZWMuc3BlZWQgKyAnbXMgJyArIHNwZWMuY3NzRWFzZTtcbiAgICBzdHlsZS5XZWJraXRUcmFuc2l0aW9uID0gJ29wYWNpdHkgJyArIHNwZWMuc3BlZWQgKyAnbXMgJyArIHNwZWMuY3NzRWFzZTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn07XG5cbnZhciBnZXRLZXkgPSBmdW5jdGlvbiBnZXRLZXkoY2hpbGQsIGZhbGxiYWNrS2V5KSB7XG4gIC8vIGtleSBjb3VsZCBiZSBhIHplcm9cbiAgcmV0dXJuIGNoaWxkLmtleSA9PT0gbnVsbCB8fCBjaGlsZC5rZXkgPT09IHVuZGVmaW5lZCA/IGZhbGxiYWNrS2V5IDogY2hpbGQua2V5O1xufTtcblxudmFyIHJlbmRlclNsaWRlcyA9IGZ1bmN0aW9uIHJlbmRlclNsaWRlcyhzcGVjKSB7XG4gIHZhciBrZXk7XG4gIHZhciBzbGlkZXMgPSBbXTtcbiAgdmFyIHByZUNsb25lU2xpZGVzID0gW107XG4gIHZhciBwb3N0Q2xvbmVTbGlkZXMgPSBbXTtcbiAgdmFyIGNvdW50ID0gX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLmNvdW50KHNwZWMuY2hpbGRyZW4pO1xuXG4gIF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5mb3JFYWNoKHNwZWMuY2hpbGRyZW4sIGZ1bmN0aW9uIChlbGVtLCBpbmRleCkge1xuICAgIHZhciBjaGlsZCA9IHZvaWQgMDtcbiAgICB2YXIgY2hpbGRPbkNsaWNrT3B0aW9ucyA9IHtcbiAgICAgIG1lc3NhZ2U6ICdjaGlsZHJlbicsXG4gICAgICBpbmRleDogaW5kZXgsXG4gICAgICBzbGlkZXNUb1Njcm9sbDogc3BlYy5zbGlkZXNUb1Njcm9sbCxcbiAgICAgIGN1cnJlbnRTbGlkZTogc3BlYy5jdXJyZW50U2xpZGVcbiAgICB9O1xuXG4gICAgaWYgKCFzcGVjLmxhenlMb2FkIHwgKHNwZWMubGF6eUxvYWQgJiYgc3BlYy5sYXp5TG9hZGVkTGlzdC5pbmRleE9mKGluZGV4KSA+PSAwKSkge1xuICAgICAgY2hpbGQgPSBlbGVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGlsZCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCBudWxsKTtcbiAgICB9XG4gICAgdmFyIGNoaWxkU3R5bGUgPSBnZXRTbGlkZVN0eWxlKCgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KSh7fSwgc3BlYywgeyBpbmRleDogaW5kZXggfSkpO1xuICAgIHZhciBzbGlja0NsYXNzZXMgPSBnZXRTbGlkZUNsYXNzZXMoKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHsgaW5kZXg6IGluZGV4IH0sIHNwZWMpKTtcbiAgICB2YXIgY3NzQ2xhc3NlcztcblxuICAgIGlmIChjaGlsZC5wcm9wcy5jbGFzc05hbWUpIHtcbiAgICAgIGNzc0NsYXNzZXMgPSAoMCwgX2NsYXNzbmFtZXMyLmRlZmF1bHQpKHNsaWNrQ2xhc3NlcywgY2hpbGQucHJvcHMuY2xhc3NOYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzQ2xhc3NlcyA9IHNsaWNrQ2xhc3NlcztcbiAgICB9XG5cbiAgICB2YXIgb25DbGljayA9IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgY2hpbGQucHJvcHMgJiYgY2hpbGQucHJvcHMub25DbGljayAmJiBjaGlsZC5wcm9wcy5vbkNsaWNrKGUpO1xuICAgICAgaWYgKHNwZWMuZm9jdXNPblNlbGVjdCkge1xuICAgICAgICBzcGVjLmZvY3VzT25TZWxlY3QoY2hpbGRPbkNsaWNrT3B0aW9ucyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNsaWRlcy5wdXNoKF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIGtleTogJ29yaWdpbmFsJyArIGdldEtleShjaGlsZCwgaW5kZXgpLFxuICAgICAgJ2RhdGEtaW5kZXgnOiBpbmRleCxcbiAgICAgIGNsYXNzTmFtZTogY3NzQ2xhc3NlcyxcbiAgICAgIHRhYkluZGV4OiAnLTEnLFxuICAgICAgc3R5bGU6ICgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KSh7IG91dGxpbmU6ICdub25lJyB9LCBjaGlsZC5wcm9wcy5zdHlsZSB8fCB7fSwgY2hpbGRTdHlsZSksXG4gICAgICBvbkNsaWNrOiBvbkNsaWNrXG4gICAgfSkpO1xuXG4gICAgLy8gdmFyaWFibGVXaWR0aCBkb2Vzbid0IHdyYXAgcHJvcGVybHkuXG4gICAgaWYgKHNwZWMuaW5maW5pdGUgJiYgc3BlYy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgdmFyIGluZmluaXRlQ291bnQgPSBzcGVjLnZhcmlhYmxlV2lkdGggPyBzcGVjLnNsaWRlc1RvU2hvdyArIDEgOiBzcGVjLnNsaWRlc1RvU2hvdztcblxuICAgICAgaWYgKGluZGV4ID49IGNvdW50IC0gaW5maW5pdGVDb3VudCkge1xuICAgICAgICBrZXkgPSAtKGNvdW50IC0gaW5kZXgpO1xuICAgICAgICBwcmVDbG9uZVNsaWRlcy5wdXNoKF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICBrZXk6ICdwcmVjbG9uZWQnICsgZ2V0S2V5KGNoaWxkLCBrZXkpLFxuICAgICAgICAgICdkYXRhLWluZGV4Jzoga2V5LFxuICAgICAgICAgIGNsYXNzTmFtZTogY3NzQ2xhc3NlcyxcbiAgICAgICAgICBzdHlsZTogKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHt9LCBjaGlsZC5wcm9wcy5zdHlsZSB8fCB7fSwgY2hpbGRTdHlsZSksXG4gICAgICAgICAgb25DbGljazogb25DbGlja1xuICAgICAgICB9KSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmRleCA8IGluZmluaXRlQ291bnQpIHtcbiAgICAgICAga2V5ID0gY291bnQgKyBpbmRleDtcbiAgICAgICAgcG9zdENsb25lU2xpZGVzLnB1c2goX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICAgIGtleTogJ3Bvc3RjbG9uZWQnICsgZ2V0S2V5KGNoaWxkLCBrZXkpLFxuICAgICAgICAgICdkYXRhLWluZGV4Jzoga2V5LFxuICAgICAgICAgIGNsYXNzTmFtZTogY3NzQ2xhc3NlcyxcbiAgICAgICAgICBzdHlsZTogKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHt9LCBjaGlsZC5wcm9wcy5zdHlsZSB8fCB7fSwgY2hpbGRTdHlsZSksXG4gICAgICAgICAgb25DbGljazogb25DbGlja1xuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAoc3BlYy5ydGwpIHtcbiAgICByZXR1cm4gcHJlQ2xvbmVTbGlkZXMuY29uY2F0KHNsaWRlcywgcG9zdENsb25lU2xpZGVzKS5yZXZlcnNlKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByZUNsb25lU2xpZGVzLmNvbmNhdChzbGlkZXMsIHBvc3RDbG9uZVNsaWRlcyk7XG4gIH1cbn07XG5cbnZhciBUcmFjayA9IGV4cG9ydHMuVHJhY2sgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1RyYWNrJyxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc2xpZGVzID0gcmVuZGVyU2xpZGVzLmNhbGwodGhpcywgdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IGNsYXNzTmFtZTogJ3NsaWNrLXRyYWNrJywgc3R5bGU6IHRoaXMucHJvcHMudHJhY2tTdHlsZSB9LFxuICAgICAgc2xpZGVzXG4gICAgKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMzE5ICovLFxuLyogMzIwICovLFxuLyogMzIxICovLFxuLyogMzIyICovLFxuLyogMzIzICovLFxuLyogMzI0ICovLFxuLyogMzI1ICovLFxuLyogMzI2ICovLFxuLyogMzI3ICovLFxuLyogMzI4ICovLFxuLyogMzI5ICovLFxuLyogMzMwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5mdW5jdGlvbiBjcmVhdGVUaHVua01pZGRsZXdhcmUoZXh0cmFBcmd1bWVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpO1xudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHRodW5rO1xuXG4vKioqLyB9KSxcbi8qIDMzMSAqLyxcbi8qIDMzMiAqLyxcbi8qIDMzMyAqLyxcbi8qIDMzNCAqLyxcbi8qIDMzNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwsIEJ1ZmZlcikge3ZhciByZXF1aXJlO1xuXG4vKiBlc2xpbnQgbm8tdW5kZWZpbmVkOiAwICovXG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbnZhciBhc3NpZ24gPSB2b2lkIDA7XG5cbmlmICh0eXBlb2YgT2JqZWN0LmFzc2lnbiA9PT0gJ2Z1bmN0aW9uJykge1xuICBhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xufSBlbHNlIHtcbiAgYXNzaWduID0gZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCB8fCB0YXJnZXQgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcpO1xuICAgIH1cblxuICAgIHZhciBvdXRwdXQgPSBPYmplY3QodGFyZ2V0KTtcblxuICAgIHZhciBwcm9wZXJ0eU9iamVjdHMgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICBpZiAocHJvcGVydHlPYmplY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgIHByb3BlcnR5T2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIHNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBuZXh0S2V5ID0gdm9pZCAwO1xuXG4gICAgICAgICAgZm9yIChuZXh0S2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShuZXh0S2V5KSkge1xuICAgICAgICAgICAgICBvdXRwdXRbbmV4dEtleV0gPSBzb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xufVxuXG52YXIgYXNzaWduJDEgPSBhc3NpZ247XG5cbnZhciBpbmNsdWRlcyA9IHZvaWQgMDtcblxuaWYgKCFBcnJheS5wcm90b3R5cGUuaW5jbHVkZXMpIHtcbiAgaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyhhcnJheSwgc2VhcmNoRWxlbWVudCkge1xuICAgIHZhciBPYmplY3RpZmllZEFycmF5ID0gT2JqZWN0KGFycmF5KTtcbiAgICB2YXIgbGVuZ3RoID0gcGFyc2VJbnQoT2JqZWN0aWZpZWRBcnJheS5sZW5ndGgsIDEwKSB8fCAwO1xuXG4gICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBzdGFydEluZGV4ID0gcGFyc2VJbnQoYXJndW1lbnRzWzJdLCAxMCkgfHwgMDtcbiAgICB2YXIgaW5kZXggPSB2b2lkIDA7XG5cbiAgICBpZiAoc3RhcnRJbmRleCA+PSAwKSB7XG4gICAgICBpbmRleCA9IHN0YXJ0SW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGV4ID0gbGVuZ3RoICsgc3RhcnRJbmRleDtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudEVsZW1lbnQgPSBPYmplY3RpZmllZEFycmF5W2luZGV4XTtcblxuICAgICAgLyogZXNsaW50IG5vLXNlbGYtY29tcGFyZTowICovXG4gICAgICBpZiAoc2VhcmNoRWxlbWVudCA9PT0gY3VycmVudEVsZW1lbnQgfHwgc2VhcmNoRWxlbWVudCAhPT0gc2VhcmNoRWxlbWVudCAmJiBjdXJyZW50RWxlbWVudCAhPT0gY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgLy8gTmFOICE9PSBOYU5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbn0gZWxzZSB7XG4gIGluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMoYXJyYXkpIHtcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXMuYXBwbHkoYXJyYXksIGFyZ3MpO1xuICB9O1xufVxuXG52YXIgaW5jbHVkZXMkMSA9IGluY2x1ZGVzO1xuXG5mdW5jdGlvbiB3cmFwKGZ1bmMsIHN1cGVyRnVuYykge1xuICBmdW5jdGlvbiBzdXBlcldyYXBwZXIoKSB7XG4gICAgdmFyIG9yaWdpbmFsU3VwZXIgPSB0aGlzWydzdXBlciddO1xuXG4gICAgdGhpc1snc3VwZXInXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdXBlckZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgdmFyIHJldCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHRoaXNbJ3N1cGVyJ10gPSBvcmlnaW5hbFN1cGVyO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHN1cGVyV3JhcHBlci53cmFwcGVkRnVuY3Rpb24gPSBmdW5jO1xuXG4gIHJldHVybiBzdXBlcldyYXBwZXI7XG59XG5cbmZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMobmFtZXMsIHByb3RvLCBkZXN0aW5hdGlvbikge1xuICB2YXIgcGFyZW50UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZGVzdGluYXRpb24pO1xuXG4gIG5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG8sIG5hbWUpO1xuICAgIHZhciBwYXJlbnREZXNjcmlwdG9yID0gcGFyZW50UHJvdG8uaGFzT3duUHJvcGVydHkobmFtZSkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXJlbnRQcm90bywgbmFtZSk7XG5cbiAgICBpZiAodHlwZW9mIHBhcmVudERlc2NyaXB0b3IudmFsdWUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciB3cmFwcGVkRnVuY3Rpb24gPSB3cmFwKGRlc2NyaXB0b3IudmFsdWUsIHBhcmVudERlc2NyaXB0b3IudmFsdWUpO1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGVzdGluYXRpb24sIG5hbWUsIHsgdmFsdWU6IHdyYXBwZWRGdW5jdGlvbiB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlc3RpbmF0aW9uLCBuYW1lLCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDbGFzcyhwcm9wcykge1xuICB2YXIgcGFyZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBPYmplY3Q7XG5cbiAgdmFyIENvbnN0cnVjdG9yID0gd3JhcChwcm9wcy5jb25zdHJ1Y3RvciwgcGFyZW50KTtcbiAgdmFyIGluc3RhbmNlUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3BzKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhaW5jbHVkZXMkMShbJ2NvbnN0cnVjdG9yJywgJ3N0YXRpYyddLCBrZXkpO1xuICB9KTtcblxuICBhc3NpZ24kMShDb25zdHJ1Y3RvciwgcGFyZW50KTtcblxuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICBkZWZpbmVQcm9wZXJ0aWVzKGluc3RhbmNlUHJvcGVydHlOYW1lcywgcHJvcHMsIENvbnN0cnVjdG9yLnByb3RvdHlwZSk7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuXG4gIHZhciBzdGF0aWNQcm9wcyA9IHByb3BzWydzdGF0aWMnXTtcblxuICBpZiAoc3RhdGljUHJvcHMpIHtcbiAgICB2YXIgc3RhdGljUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHN0YXRpY1Byb3BzKTtcblxuICAgIGRlZmluZVByb3BlcnRpZXMoc3RhdGljUHJvcGVydHlOYW1lcywgc3RhdGljUHJvcHMsIENvbnN0cnVjdG9yKTtcbiAgfVxuXG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxudmFyIENvcmVPYmplY3QgPSBjcmVhdGVDbGFzcyh7XG4gIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3RvcigpIHt9LFxuXG5cbiAgJ3N0YXRpYyc6IHtcbiAgICBleHRlbmQ6IGZ1bmN0aW9uIGV4dGVuZChzdWJDbGFzc1Byb3BzKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQ2xhc3Moc3ViQ2xhc3NQcm9wcywgdGhpcyk7XG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gd3JhcENvbnNvbGUobG9nQ29tbWFuZCkge1xuICB2YXIgbG9nTWV0aG9kID0gZnVuY3Rpb24gbG9nTWV0aG9kKCkge1xuICAgIHZhciBsb2cgPSB2b2lkIDA7XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gICAgaWYgKGNvbnNvbGVbbG9nQ29tbWFuZF0pIHtcbiAgICAgIGxvZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwoY29uc29sZVtsb2dDb21tYW5kXSwgY29uc29sZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwoY29uc29sZS5sb2csIGNvbnNvbGUpO1xuICAgIH1cbiAgICBsb2cuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG5cbiAgICBhcmdzLnVuc2hpZnQoJ1tKUy1CVVktU0RLXTogJyk7XG4gICAgbG9nTWV0aG9kLmFwcGx5KHVuZGVmaW5lZCwgX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3MpKTtcbiAgfTtcbn1cblxudmFyIExvZ2dlciA9IENvcmVPYmplY3QuZXh0ZW5kKHtcbiAgLyoqXG4gICAqIFdyYXBwZXIgYXJvdW5kIHRoZSBjb25zb2xlIGxvZyBzbyBpbiB0aGUgZnV0dXJlIHdlIGNhbiBoYXZlIGJldHRlciBkZXYgb3V0cHV0LlxuICAgKiBBbHNvIGFsbG93cyB1cyB0byBkaXNhYmxlIG91dHB1dCBpbiBwcm9kdWN0aW9uLlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAY2xhc3MgTG9nZ2VyXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yKCkge30sXG5cbiAgZGVidWc6IHdyYXBDb25zb2xlKCdkZWJ1ZycpLFxuICBpbmZvOiB3cmFwQ29uc29sZSgnaW5mbycpLFxuICB3YXJuOiB3cmFwQ29uc29sZSgnd2FybicpLFxuICBlcnJvcjogd3JhcENvbnNvbGUoJ2Vycm9yJylcbn0pO1xuXG52YXIgbG9nZ2VyID0gbmV3IExvZ2dlcigpO1xuXG52YXIgQ29uZmlnID0gQ29yZU9iamVjdC5leHRlbmQoe1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IoYXR0cnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgT2JqZWN0LmtleXModGhpcy5kZXByZWNhdGVkUHJvcGVydGllcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoYXR0cnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICB2YXIgdHJhbnNmb3JtTmFtZSA9IF90aGlzLmRlcHJlY2F0ZWRQcm9wZXJ0aWVzW2tleV07XG4gICAgICAgIHZhciB0cmFuc2Zvcm0gPSBfdGhpc1t0cmFuc2Zvcm1OYW1lXTtcblxuICAgICAgICB0cmFuc2Zvcm0oYXR0cnNba2V5XSwgYXR0cnMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMucmVxdWlyZWRQcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKCFhdHRycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbmV3IENvbmZpZygpIHJlcXVpcmVzIHRoZSBvcHRpb24gXFwnJyArIGtleSArICdcXCcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzW2tleV0gPSBhdHRyc1trZXldO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMub3B0aW9uYWxQcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKGF0dHJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgX3RoaXNba2V5XSA9IGF0dHJzW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogQW4gb2JqZWN0IHdpdGgga2V5cyBmb3IgZGVwcmVjYXRlZCBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgYXMgZnVuY3Rpb25zIHRoYXRcbiAgICogd2lsbCB0cmFuc2Zvcm0gdGhlIHZhbHVlIGludG8gYSB1c2FibGUgdmFsdWUuIEEgZGVwcmFjYXRpb24gdHJhbnNmb3JtIHNob3VsZFxuICAgKiBoYXZlIHRoZSB2YWx1ZSBzaWduYXR1cmUgZnVuY3Rpb24oZGVwcmVjYXRlZF92YWx1ZSwgY29uZmlnX3RvX2JlX3RyYW5zZm9ybWVkKVxuICAgKiBAYXR0cmlidXRlIGRlcHJlY2F0ZWRQcm9wZXJ0aWVzXG4gICAqIEBkZWZhdWx0IHsgbXlTaG9waWZ5RG9tYWluOiB0aGlzLnRyYW5zZm9ybU15U2hvcGlmeURvbWFpbiB9XG4gICAqIEB0eXBlIE9iamVjdFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZGVwcmVjYXRlZFByb3BlcnRpZXM6IHtcbiAgICBteVNob3BpZnlEb21haW46ICd0cmFuc2Zvcm1NeVNob3BpZnlEb21haW4nXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybSB0aGUgbXlTaG9waWZ5RG9tYWluIGNvbmZpZyB0byBhIGRvbWFpbiBjb25maWcuXG4gICAqIEBtZXRob2QgdHJhbnNmb3JtTXlTaG9waWZ5RG9tYWluXG4gICAqIEBzdGF0aWNcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN1YmRvbWFpbiBUaGUgb3JpZ2luYWwgc3ViZG9tYWluIG9uIG15c2hvcGlmeS5jb21cbiAgICogQHBhcmFtIHtPYmplY3R9IGF0dHJzLiBUaGUgY29uZmlnIGF0dHJpYnV0ZXMgdG8gYmUgdHJhbnNmb3JtZWQgdG8gYVxuICAgKiBub24tZGVwcmVjYXRlZCBzdGF0ZS5cbiAgICogQHJldHVybiB7T2JqZWN0fSB0aGUgdHJhbnNmb3JtZWQgY29uZmlnIGF0dHJpYnV0ZXMuXG4gICAqL1xuICB0cmFuc2Zvcm1NeVNob3BpZnlEb21haW46IGZ1bmN0aW9uIHRyYW5zZm9ybU15U2hvcGlmeURvbWFpbihzdWJkb21haW4sIGF0dHJzKSB7XG4gICAgbG9nZ2VyLndhcm4oJ0NvbmZpZyAtICcsICdteVNob3BpZnlEb21haW4gaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBkb21haW4gYW5kIHByb3ZpZGUgdGhlIGZ1bGwgc2hvcCBkb21haW4uJyk7XG4gICAgYXR0cnMuZG9tYWluID0gc3ViZG9tYWluICsgJy5teXNob3BpZnkuY29tJztcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIHRoYXQgbXVzdCBiZSBzZXQgb24gaW5pdGlhbGl6YXRpb25zXG4gICAqIEBhdHRyaWJ1dGUgcmVxdWlyZWRQcm9wZXJ0aWVzXG4gICAqIEBkZWZhdWx0IFsnYXBpS2V5JywgJ2FwcElkJywgJ215U2hvcGlmeURvbWFpbiddXG4gICAqIEB0eXBlIEFycmF5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICByZXF1aXJlZFByb3BlcnRpZXM6IFsnYXBpS2V5JywgJ2FwcElkJywgJ2RvbWFpbiddLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIHRoYXQgbWF5IGJlIHNldCBvbiBpbml0aWFsaXphdGlvbnNcbiAgICogQGF0dHJpYnV0ZSByZXF1aXJlZFByb3BlcnRpZXNcbiAgICogQGRlZmF1bHQgWydhamF4SGVhZGVycyddXG4gICAqIEB0eXBlIEFycmF5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvcHRpb25hbFByb3BlcnRpZXM6IFsnYWpheEhlYWRlcnMnXSxcblxuICAvKipcbiAgICogVGhlIGFwaUtleSBmb3IgYXV0aGVudGljYXRpbmcgYWdhaW5zdCBzaG9waWZ5LiBUaGlzIGlzIHlvdXIgYXBpIGNsaWVudCdzXG4gICAqIHB1YmxpYyBhcGkgdG9rZW4uIE5vdCB0aGUgc2hhcmVkIHNlY3JldC4gU2V0IGR1cmluZyBpbml0aWFsYXRpb24uXG4gICAqIEBhdHRyaWJ1dGUgYXBpS2V5XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqIEB0eXBlIFN0cmluZ1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYXBpS2V5OiAnJyxcblxuICAvKipcbiAgICogQGF0dHJpYnV0ZSBhcHBJZFxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKiBAdHlwZSBTdHJpbmdcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGFwcElkOiAnJyxcblxuICAvKipcbiAgICogVGhlIGRvbWFpbiB0aGF0IGFsbCB0aGUgYXBpIHJlcXVlc3RzIHdpbGwgZ28gdG9cbiAgICogQGF0dHJpYnV0ZSBkb21haW5cbiAgICogQGRlZmF1bHQgJydcbiAgICogQHR5cGUgU3RyaW5nXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBkb21haW46ICcnLFxuXG4gIC8qKlxuICAgKiBUaGUgc3ViZG9tYWluIG9mIG15c2hvcGlmeS5pbyB0aGF0IGFsbCB0aGUgYXBpIHJlcXVlc3RzIHdpbGwgZ28gdG9cbiAgICogQGF0dHJpYnV0ZSBteVNob3BpZnlEb21haW5cbiAgICogQGRlZmF1bHQgJydcbiAgICogQHR5cGUgU3RyaW5nXG4gICAqIEBwcml2YXRlXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgY29uZmlnLmRvbWFpbmAgaW5zdGVhZC5cbiAgICovXG4gIG15U2hvcGlmeURvbWFpbjogJycsXG5cbiAgLyoqXG4gICAqIEBhdHRyaWJ1dGUgYWpheEhlYWRlcnNcbiAgICogQGRlZmF1bHQge31cbiAgICogQHR5cGUgT2JqZWN0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhamF4SGVhZGVyczoge31cbn0pO1xuXG52YXIgdmVyc2lvbiA9ICd2MC42LjItYzhmNDM4Zic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxudmFyIEJhc2VNb2RlbCA9IENvcmVPYmplY3QuZXh0ZW5kKHtcbiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yKCkge1xuICAgIHZhciBhdHRycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIG1ldGFBdHRycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICB0aGlzLmF0dHJzID0gYXR0cnM7XG5cbiAgICBhc3NpZ24kMSh0aGlzLCBtZXRhQXR0cnMpO1xuICB9LFxuXG4gIGF0dHJzOiBudWxsLFxuICBzZXJpYWxpemVyOiBudWxsLFxuICBhZGFwdGVyOiBudWxsLFxuICBzaG9wQ2xpZW50OiBudWxsXG59KTtcblxuLyoqXG4gICogQ2xhc3MgZm9yIHByb2R1Y3Qgb3B0aW9uXG4gICogQGNsYXNzIFByb2R1Y3RPcHRpb25Nb2RlbFxuICAqIEBjb25zdHJ1Y3RvclxuKi9cbnZhciBQcm9kdWN0T3B0aW9uTW9kZWwgPSBCYXNlTW9kZWwuZXh0ZW5kKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHtcbiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXNbJ3N1cGVyJ10uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHRoaXMuc2VsZWN0ZWQgPSB0aGlzLnZhbHVlc1swXTtcbiAgfVxufSwge1xuICBuYW1lOiB7XG5cbiAgICAvKipcbiAgICAgICogbmFtZSBvZiBvcHRpb24uIEV4YW1wbGUgdmFsdWVzOiBgXCJTaXplXCJgLCBgXCJDb2xvclwiYCwgZXRjLlxuICAgICAgKiBAcHJvcGVydHkgbmFtZVxuICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICogQHR5cGUgU3RyaW5nXG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLm5hbWU7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICB2YWx1ZXM6IHtcblxuICAgIC8qKlxuICAgICAgKiBhbiBBcnJheSBwb3NzaWJsZSB2YWx1ZXMgZm9yIG9wdGlvbi4gRm9yIGluc3RhbmNlIGlmIHRoaXMgb3B0aW9uIGlzIGEgXCJTaXplXCIgb3B0aW9uIGFuIGV4YW1wbGUgdmFsdWVcbiAgICAgICogZm9yIHZhbHVlcyBjb3VsZCBiZTogYFtcIkxhcmdlXCIsIFwiTWVkaXVtXCIsIFwiU21hbGxcIl1gXG4gICAgICAqXG4gICAgICAqIEBwcm9wZXJ0eSB2YWx1ZXNcbiAgICAgICogQHJlYWRPbmx5XG4gICAgICAqIEB0eXBlIEFycmF5XG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLnZhbHVlcztcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIHNlbGVjdGVkOiB7XG5cbiAgICAvKipcbiAgICAgICogZ2V0L3NldCB0aGUgY3VycmVudGx5IHNlbGVjdGVkIG9wdGlvbiB2YWx1ZSB3aXRoIG9uZSBvZiB0aGUgdmFsdWVzIGZyb20gdGhlXG4gICAgICAqIHt7I2Nyb3NzTGluayBcIlByb2R1Y3RPcHRpb25Nb2RlbC92YWx1ZXNcIn19UHJvZHVjdE9wdGlvbk1vZGVsLnZhbHVlc3t7L2Nyb3NzTGlua319IGFycmF5LiBGb3JcbiAgICAgICogaW5zdGFuY2UgaWYgdGhlIG9wdGlvbiB2YWx1ZXMgYXJyYXkgaGFkIHRoZSBmb2xsb3dpbmcgYFtcIkxhcmdlXCIsIFwiTWVkaXVtXCIsIFwiU21hbGxcIl1gIHNldHRpbmcgYHNlbGVjdGVkYCB0byBiZVxuICAgICAgKiBgXCJMYXJnZVwiYCwgYFwiTWVkaXVtXCJgLCBvciBgXCJTbWFsbFwiYCB3b3VsZCBiZSB2YWxpZCBhbnkgb3RoZXIgdmFsdWUgd291bGQgdGhyb3cgYW4gYEVycm9yYC5cbiAgICAgICpcbiAgICAgICogQHByb3BlcnR5IHNlbGVjdGVkXG4gICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWQ7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgaWYgKGluY2x1ZGVzJDEodGhpcy52YWx1ZXMsIHZhbHVlKSkge1xuICAgICAgICB0aGlzLl9zZWxlY3RlZCA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG9wdGlvbiBzZWxlY3Rpb24gZm9yICcgKyB0aGlzLm5hbWUgKyAnLicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9XG59KSk7XG5cbnZhciB2YXJpYW50cyA9IFt7IG5hbWU6ICdwaWNvJywgZGltZW5zaW9uOiAnMTZ4MTYnIH0sIHsgbmFtZTogJ2ljb24nLCBkaW1lbnNpb246ICczMngzMicgfSwgeyBuYW1lOiAndGh1bWInLCBkaW1lbnNpb246ICc1MHg1MCcgfSwgeyBuYW1lOiAnc21hbGwnLCBkaW1lbnNpb246ICcxMDB4MTAwJyB9LCB7IG5hbWU6ICdjb21wYWN0JywgZGltZW5zaW9uOiAnMTYweDE2MCcgfSwgeyBuYW1lOiAnbWVkaXVtJywgZGltZW5zaW9uOiAnMjQweDI0MCcgfSwgeyBuYW1lOiAnbGFyZ2UnLCBkaW1lbnNpb246ICc0ODB4NDgwJyB9LCB7IG5hbWU6ICdncmFuZGUnLCBkaW1lbnNpb246ICc2MDB4NjAwJyB9LCB7IG5hbWU6ICcxMDI0eDEwMjQnLCBkaW1lbnNpb246ICcxMDI0eDEwMjQnIH0sIHsgbmFtZTogJzIwNDh4MjA0OCcsIGRpbWVuc2lvbjogJzIwNDh4MjA0OCcgfV07XG5cbnZhciBJbWFnZU1vZGVsID0gQ29yZU9iamVjdC5leHRlbmQoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoe1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IoYXR0cnMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIF90aGlzMltrZXldID0gYXR0cnNba2V5XTtcbiAgICB9KTtcbiAgfVxufSwge1xuICB2YXJpYW50czoge1xuXG4gICAgLyoqXG4gICAgICAqIEltYWdlIHZhcmlhbnRzIGF2YWlsYWJsZSBmb3IgYW4gaW1hZ2UuIEFuIGV4YW1wbGUgdmFsdWUgb2YgYGltYWdlVmFyaWFudGA6XG4gICAgICAqIGBgYFxuICAgICAgKiBbXG4gICAgICAqICAge1xuICAgICAgKiAgICAgXCJuYW1lXCI6IFwicGljb1wiLFxuICAgICAgKiAgICAgXCJkaW1lbnNpb25zXCI6IFwiMTZ4MTZcIixcbiAgICAgICogICAgIFwic3JjXCI6IFwiaHR0cHM6Ly9jZG4uc2hvcGlmeS5jb20vcy9maWxlcy8xLzEwMTkvMDQ5NS9wcm9kdWN0cy9hbGllbl8xNDZlZjdjMS0yNmU5LTRlOTYtOTZlNi05ZDM3MTI4ZDAwMDVfcGljby5qcGc/dj0xNDY5MDQ2NDIzXCJcbiAgICAgICogICB9LFxuICAgICAgKiAgIHtcbiAgICAgICogICAgIFwibmFtZVwiOiBcImNvbXBhY3RcIixcbiAgICAgICogICAgIFwiZGltZW5zaW9uc1wiOiBcIjE2MHgxNjBcIixcbiAgICAgICogICAgIFwic3JjXCI6IFwiaHR0cHM6Ly9jZG4uc2hvcGlmeS5jb20vcy9maWxlcy8xLzEwMTkvMDQ5NS9wcm9kdWN0cy9hbGllbl8xNDZlZjdjMS0yNmU5LTRlOTYtOTZlNi05ZDM3MTI4ZDAwMDVfY29tcGFjdC5qcGc/dj0xNDY5MDQ2NDIzXCJcbiAgICAgICogICB9XG4gICAgICAqIF1cbiAgICAgICogYGBgXG4gICAgICAqXG4gICAgICAqIEBhdHRyaWJ1dGUgdmFyaWFudHNcbiAgICAgICogQHR5cGUge0FycmF5fVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgc3JjID0gdGhpcy5zcmM7XG4gICAgICB2YXIgZXh0ZW5zaW9uSW5kZXggPSBzcmMubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgIHZhciBwYXRoQW5kQmFzZW5hbWUgPSBzcmMuc2xpY2UoMCwgZXh0ZW5zaW9uSW5kZXgpO1xuICAgICAgdmFyIGV4dGVuc2lvbiA9IHNyYy5zbGljZShleHRlbnNpb25JbmRleCk7XG5cbiAgICAgIHZhcmlhbnRzLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhbnQpIHtcbiAgICAgICAgdmFyaWFudC5zcmMgPSBwYXRoQW5kQmFzZW5hbWUgKyAnXycgKyB2YXJpYW50Lm5hbWUgKyBleHRlbnNpb247XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHZhcmlhbnRzO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfVxufSkpO1xuXG4vKipcbiAgKiBNb2RlbCBmb3IgcHJvZHVjdCB2YXJpYW50XG4gICogQGNsYXNzIFByb2R1Y3RWYXJpYW50TW9kZWxcbiAgKiBAY29uc3RydWN0b3JcbiovXG52YXIgUHJvZHVjdFZhcmlhbnRNb2RlbCA9IEJhc2VNb2RlbC5leHRlbmQoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoe1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IoKSB7XG4gICAgdGhpc1snc3VwZXInXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAgKiBHZXQgYSBjaGVja291dCB1cmwgZm9yIGEgc3BlY2lmaWMgcHJvZHVjdCB2YXJpYW50LiBZb3UgY2FuXG4gICAgKiBvcHRpb25hbGx5IHBhc3MgYSBxdWFudGl0eS4gSWYgbm8gcXVhbnRpdHkgaXMgcGFzc2VkIHRoZW4gcXVhbnRpdHlcbiAgICAqIHdpbGwgZGVmYXVsdCB0byAxLiBUaGUgZXhhbXBsZSBiZWxvdyB3aWxsIGdyYWIgYSBjaGVja291dCB1cmwgZm9yXG4gICAgKiAzIGNvcGllcyBvZiB0aGUgZmlyc3QgdmFyaWFudDpcbiAgICAqIGBgYFxuICAgICogY29uc3QgY2hlY2tvdXRVUkwgPSBwcm9kdWN0LnZhcmlhbnRzWyAwIF0uY2hlY2tvdXRVcmwoMyk7XG4gICAgKiBgYGBcbiAgICAqXG4gICAgKiBAbWV0aG9kIGNoZWNrb3V0VXJsXG4gICAgKiBAcGFyYW0ge051bWJlcn0gW3F1YW50aXR5ID0gMV0gcXVhbnRpdHkgb2YgdmFyaWFudHNcbiAgICAqIEBwdWJsaWNcbiAgICAqIEByZXR1cm4ge1N0cmluZ30gQ2hlY2tvdXQgVVJMXG4gICovXG4gIGNoZWNrb3V0VXJsOiBmdW5jdGlvbiBjaGVja291dFVybCgpIHtcbiAgICB2YXIgcXVhbnRpdHkgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDE7XG5cbiAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgdmFyIGJhc2VVcmwgPSAnaHR0cHM6Ly8nICsgY29uZmlnLmRvbWFpbiArICcvY2FydCc7XG5cbiAgICB2YXIgdmFyaWFudFBhdGggPSB0aGlzLmlkICsgJzonICsgcGFyc2VJbnQocXVhbnRpdHksIDEwKTtcblxuICAgIHZhciBxdWVyeSA9ICdhY2Nlc3NfdG9rZW49JyArIGNvbmZpZy5hcGlLZXkgKyAnJl9mZD0wJztcblxuICAgIHJldHVybiBiYXNlVXJsICsgJy8nICsgdmFyaWFudFBhdGggKyAnPycgKyBxdWVyeTtcbiAgfVxufSwge1xuICBpZDoge1xuXG4gICAgLyoqXG4gICAgICAqIFZhcmlhbnQgdW5pcXVlIElEXG4gICAgICAqIEBwcm9wZXJ0eSBpZFxuICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy52YXJpYW50LmlkO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgcHJvZHVjdElkOiB7XG5cbiAgICAvKipcbiAgICAgICogSUQgb2YgcHJvZHVjdCB2YXJpYW50IGJlbG9uZ3MgdG9cbiAgICAgICogQHByb3BlcnR5IHByb2R1Y3RJZFxuICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy5wcm9kdWN0LmlkO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgdGl0bGU6IHtcblxuICAgIC8qKlxuICAgICAgKiBUaXRsZSBvZiB2YXJpYW50XG4gICAgICAqIEBwcm9wZXJ0eSB0aXRsZVxuICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy52YXJpYW50LnRpdGxlO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgcHJvZHVjdFRpdGxlOiB7XG5cbiAgICAvKipcbiAgICAgICogVGl0bGUgb2YgcHJvZHVjdCB2YXJpYW50IGJlbG9uZ3MgdG9cbiAgICAgICogQHByb3BlcnR5IHByb2R1Y3RUaXRsZVxuICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy5wcm9kdWN0LnRpdGxlO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgY29tcGFyZUF0UHJpY2U6IHtcblxuICAgIC8qKlxuICAgICAgKiBDb21wYXJlIGF0IHByaWNlIGZvciB2YXJpYW50LiBUaGUgYGNvbXBhcmVBdFByaWNlYCB3b3VsZCBiZVxuICAgICAgKiB0aGUgcHJpY2Ugb2YgdGhlIHByb2R1Y3QgcHJldmlvdXNseSBiZWZvcmUgdGhlIHByb2R1Y3Qgd2VudCBvbiBzYWxlLiBGb3IgbW9yZSBpbmZvXG4gICAgICAqIGdvIDxhIGhyZWY9XCJodHRwczovL2RvY3Muc2hvcGlmeS5jb20vbWFudWFsL3Byb2R1Y3RzL3Byb21vdGluZy1tYXJrZXRpbmcvc2FsZXNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5oZXJlPC9hPi5cbiAgICAgICpcbiAgICAgICogSWYgbm8gYGNvbXBhcmVBdFByaWNlYCBpcyBzZXQgdGhlbiB0aGlzIHZhbHVlIHdpbGwgYmUgYG51bGxgLiBBbiBleGFtcGxlIHZhbHVlOiBgXCI1LjAwXCJgXG4gICAgICAqIEBwcm9wZXJ0eSBjb21wYXJlQXRQcmljZVxuICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy52YXJpYW50LmNvbXBhcmVfYXRfcHJpY2U7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBwcmljZToge1xuXG4gICAgLyoqXG4gICAgICAqIFByaWNlIG9mIHRoZSB2YXJpYW50LiBUaGUgcHJpY2Ugd2lsbCBiZSBpbiB0aGUgZm9sbG93aW5nIGZvcm06IGBcIjEwLjAwXCJgXG4gICAgICAqXG4gICAgICAqIEBwcm9wZXJ0eSBwcmljZVxuICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy52YXJpYW50LnByaWNlO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgZm9ybWF0dGVkUHJpY2U6IHtcblxuICAgIC8qKlxuICAgICAgKiBQcmljZSBvZiB2YXJpYW50LCBmb3JtYXR0ZWQgYWNjb3JkaW5nIHRvIHNob3AgY3VycmVuY3kgZm9ybWF0IHN0cmluZy5cbiAgICAgICogRm9yIGluc3RhbmNlIGBcIiQxMC4wMFwiYFxuICAgICAgKlxuICAgICAgKiBAcHJvcGVydHkgZm9ybWF0dGVkUHJpY2VcbiAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cnMudmFyaWFudC5mb3JtYXR0ZWRfcHJpY2U7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBncmFtczoge1xuXG4gICAgLyoqXG4gICAgICAqIFZhcmlhbnQgd2VpZ2h0IGluIGdyYW1zLiBJZiBubyB3ZWlnaHQgaXMgZGVmaW5lZCBncmFtcyB3aWxsIGJlIGAwYC5cbiAgICAgICogQHByb3BlcnR5IGdyYW1zXG4gICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLnZhcmlhbnQuZ3JhbXM7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBvcHRpb25WYWx1ZXM6IHtcblxuICAgIC8qKlxuICAgICAgKiBPcHRpb24gdmFsdWVzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHZhcmlhbnQuIEV4YW1wbGUgYG9wdGlvblZhbHVlc2A6XG4gICAgICAqIGBgYFxuICAgICAgKiBbXG4gICAgICAqICAge1xuICAgICAgKiAgICAgXCJuYW1lXCI6IFwiU2l6ZVwiLFxuICAgICAgKiAgICAgXCJvcHRpb25faWRcIjogOTE2NTMzNjUxOCxcbiAgICAgICogICAgIFwidmFsdWVcIjogXCJzbWFsbFwiXG4gICAgICAqICAgfSxcbiAgICAgICogICB7XG4gICAgICAqICAgICBcIm5hbWVcIjogXCJDb2xvclwiLFxuICAgICAgKiAgICAgXCJvcHRpb25faWRcIjogOTY0MDUzMjM1OCxcbiAgICAgICogICAgIFwidmFsdWVcIjogXCJibHVlXCJcbiAgICAgICogICB9XG4gICAgICAqIF1cbiAgICAgICogYGBgYFxuICAgICAgKlxuICAgICAgKiBAcHJvcGVydHkgb3B0aW9uVmFsdWVzXG4gICAgICAqIEB0eXBlIHtBcnJheXxPYmplY3R9XG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLnZhcmlhbnQub3B0aW9uX3ZhbHVlcztcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIGF2YWlsYWJsZToge1xuXG4gICAgLyoqXG4gICAgICAqIFZhcmlhbnQgaW4gc3RvY2suIEFsd2F5cyBgdHJ1ZWAgaWYgaW52ZW50b3J5IHRyYWNraW5nIGlzIGRpc2FibGVkLlxuICAgICAgKiBAcHJvcGVydHkgYXZhaWxhYmxlXG4gICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy52YXJpYW50LmF2YWlsYWJsZTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIGltYWdlOiB7XG5cbiAgICAvKipcbiAgICAgICogSW1hZ2UgZm9yIHZhcmlhbnQuIEFuIGV4YW1wbGUgaW1hZ2UgYE9iamVjdGA6XG4gICAgICAqIGBgYFxuICAgICAgKiB7XG4gICAgICAqICAgY3JlYXRlZF9hdDogXCIyMDE2LTA4LTI5VDEyOjM1OjA5LTA0OjAwXCIsXG4gICAgICAqICAgaWQ6IDE3NjkwNTUzMzUwLFxuICAgICAgKiAgIHBvc2l0aW9uOiAxLFxuICAgICAgKiAgIHByb2R1Y3RfaWQ6IDgyOTEwMjk0NDYsXG4gICAgICAqICAgc3JjOiBcImh0dHBzOi8vY2RuLnNob3BpZnkuY29tL3MvZmlsZXMvMS8xMDE5LzA0OTUvcHJvZHVjdHMvaTExX2MzMzM0MzI1LTJkNjctNDYyMy04Y2Q0LTBhNmIwOGFhMWI4My5qcGc/dj0xNDcyNDg4NTA5XCIsXG4gICAgICAqICAgdXBkYXRlZF9hdDogXCIyMDE2LTA4LTI5VDEyOjM1OjA5LTA0OjAwXCIsXG4gICAgICAqICAgdmFyaWFudF9pZHM6IFsgMjc2OTAxMDMyMzggXVxuICAgICAgKiB9XG4gICAgICAqIGBgYFxuICAgICAgKlxuICAgICAgKiBAcHJvcGVydHkgaW1hZ2VcbiAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIGlkID0gdGhpcy5pZDtcbiAgICAgIHZhciBpbWFnZXMgPSB0aGlzLmF0dHJzLnByb2R1Y3QuaW1hZ2VzO1xuXG4gICAgICB2YXIgcHJpbWFyeUltYWdlID0gaW1hZ2VzWzBdO1xuICAgICAgdmFyIHZhcmlhbnRJbWFnZSA9IGltYWdlcy5maWx0ZXIoZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgIHJldHVybiBpbWFnZS52YXJpYW50X2lkcy5pbmRleE9mKGlkKSAhPT0gLTE7XG4gICAgICB9KVswXTtcblxuICAgICAgdmFyIGltYWdlID0gdmFyaWFudEltYWdlIHx8IHByaW1hcnlJbWFnZTtcblxuICAgICAgaWYgKCFpbWFnZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBJbWFnZU1vZGVsKGltYWdlKTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIGltYWdlVmFyaWFudHM6IHtcblxuICAgIC8qKlxuICAgICAgKiBJbWFnZSB2YXJpYW50cyBhdmFpbGFibGUgZm9yIGEgdmFyaWFudC4gQW4gZXhhbXBsZSB2YWx1ZSBvZiBgaW1hZ2VWYXJpYW50YDpcbiAgICAgICogYGBgXG4gICAgICAqIFtcbiAgICAgICogICB7XG4gICAgICAqICAgICBcIm5hbWVcIjogXCJwaWNvXCIsXG4gICAgICAqICAgICBcImRpbWVuc2lvbnNcIjogXCIxNngxNlwiLFxuICAgICAgKiAgICAgXCJzcmNcIjogXCJodHRwczovL2Nkbi5zaG9waWZ5LmNvbS9zL2ZpbGVzLzEvMTAxOS8wNDk1L3Byb2R1Y3RzL2FsaWVuXzE0NmVmN2MxLTI2ZTktNGU5Ni05NmU2LTlkMzcxMjhkMDAwNV9waWNvLmpwZz92PTE0NjkwNDY0MjNcIlxuICAgICAgKiAgIH0sXG4gICAgICAqICAge1xuICAgICAgKiAgICAgXCJuYW1lXCI6IFwiY29tcGFjdFwiLFxuICAgICAgKiAgICAgXCJkaW1lbnNpb25zXCI6IFwiMTYweDE2MFwiLFxuICAgICAgKiAgICAgXCJzcmNcIjogXCJodHRwczovL2Nkbi5zaG9waWZ5LmNvbS9zL2ZpbGVzLzEvMTAxOS8wNDk1L3Byb2R1Y3RzL2FsaWVuXzE0NmVmN2MxLTI2ZTktNGU5Ni05NmU2LTlkMzcxMjhkMDAwNV9jb21wYWN0LmpwZz92PTE0NjkwNDY0MjNcIlxuICAgICAgKiAgIH1cbiAgICAgICogXVxuICAgICAgKiBgYGBcbiAgICAgICpcbiAgICAgICogQHByb3BlcnR5IGltYWdlVmFyaWFudFxuICAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIGlmICghdGhpcy5pbWFnZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmltYWdlLnZhcmlhbnRzO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfVxufSkpO1xuXG52YXIgdW5pcSA9IGZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgcmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbiAodW5pcXVlQXJyYXksIGl0ZW0pIHtcbiAgICBpZiAodW5pcXVlQXJyYXkuaW5kZXhPZihpdGVtKSA8IDApIHtcbiAgICAgIHVuaXF1ZUFycmF5LnB1c2goaXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuaXF1ZUFycmF5O1xuICB9LCBbXSk7XG59O1xuXG52YXIgTk9fSU1BR0VfVVJJID0gJ2h0dHBzOi8vd2lkZ2V0cy5zaG9waWZ5YXBwcy5jb20vYXNzZXRzL25vLWltYWdlLnN2Zyc7XG5cbi8qKlxuICAgKiBDbGFzcyBmb3IgcHJvZHVjdHMgcmV0dXJuZWQgYnkgZmV0Y2goJ3Byb2R1Y3QnKVxuICAgKiBAY2xhc3MgUHJvZHVjdE1vZGVsXG4gICAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgUHJvZHVjdE1vZGVsID0gQmFzZU1vZGVsLmV4dGVuZChPYmplY3QuZGVmaW5lUHJvcGVydGllcyh7XG4gIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzWydzdXBlciddLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbn0sIHtcbiAgaWQ6IHtcblxuICAgIC8qKlxuICAgICAgKiBQcm9kdWN0IHVuaXF1ZSBJRFxuICAgICAgKlxuICAgICAgKiBAcHJvcGVydHkgaWRcbiAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cnMucHJvZHVjdF9pZDtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIHRpdGxlOiB7XG5cbiAgICAvKipcbiAgICAgICogVGhlIHByb2R1Y3QgdGl0bGVcbiAgICAgICogQHByb3BlcnR5IHRpdGxlXG4gICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLnRpdGxlO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgZGVzY3JpcHRpb246IHtcblxuICAgIC8qKlxuICAgICAgKiBBIHByb2R1Y3QgZGVzY3JpcHRpb24uXG4gICAgICAqIEBwcm9wZXJ0eSBkZXNjcmlwdGlvblxuICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy5ib2R5X2h0bWw7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBpbWFnZXM6IHtcblxuICAgIC8qKlxuICAgICAgKiBBbiBgQXJyYXlgIG9mIGBPYmplY3RzYCB0aGF0IGNvbnRhaW4gbWV0YSBkYXRhIGFib3V0IGFuIGltYWdlIGluY2x1ZGluZyBgc3JjYCBvZiB0aGUgaW1hZ2VzLlxuICAgICAgKlxuICAgICAgKiBBbiBleGFtcGxlIGltYWdlIGBPYmplY3RgOlxuICAgICAgKiBgYGBcbiAgICAgICoge1xuICAgICAgKiAgIGNyZWF0ZWRfYXQ6IFwiMjAxNi0wOC0yOVQxMjozNTowOS0wNDowMFwiLFxuICAgICAgKiAgIGlkOiAxNzY5MDU1MzM1MCxcbiAgICAgICogICBwb3NpdGlvbjogMSxcbiAgICAgICogICBwcm9kdWN0X2lkOiA4MjkxMDI5NDQ2LFxuICAgICAgKiAgIHNyYzogXCJodHRwczovL2Nkbi5zaG9waWZ5LmNvbS9zL2ZpbGVzLzEvMTAxOS8wNDk1L3Byb2R1Y3RzL2kxMV9jMzMzNDMyNS0yZDY3LTQ2MjMtOGNkNC0wYTZiMDhhYTFiODMuanBnP3Y9MTQ3MjQ4ODUwOVwiLFxuICAgICAgKiAgIHVwZGF0ZWRfYXQ6IFwiMjAxNi0wOC0yOVQxMjozNTowOS0wNDowMFwiLFxuICAgICAgKiAgIHZhcmlhbnRfaWRzOiBbIDI3NjkwMTAzMjM4IF1cbiAgICAgICogfVxuICAgICAgKiBgYGBcbiAgICAgICogQHByb3BlcnR5IGltYWdlc1xuICAgICAgKiBAdHlwZSB7QXJyYXl9IGFycmF5IG9mIGltYWdlIG9iamVjdHMuXG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLmltYWdlcy5tYXAoZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgSW1hZ2VNb2RlbChpbWFnZSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIG1lbW9pemVkOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB0aGlzLl9tZW1vaXplZCA9IHRoaXMuX21lbW9pemVkIHx8IHt9O1xuXG4gICAgICByZXR1cm4gdGhpcy5fbWVtb2l6ZWQ7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBvcHRpb25zOiB7XG5cbiAgICAvKipcbiAgICAgKiAgR2V0IGFuIGFycmF5IG9mIHt7I2Nyb3NzTGluayBcIlByb2R1Y3RPcHRpb25Nb2RlbFwifX1Qcm9kdWN0T3B0aW9uTW9kZWxze3svY3Jvc3NMaW5rfX0uXG4gICAgICogIHt7I2Nyb3NzTGluayBcIlByb2R1Y3RPcHRpb25Nb2RlbFwifX1Qcm9kdWN0T3B0aW9uTW9kZWxze3svY3Jvc3NMaW5rfX0gY2FuIGJlIHVzZWQgdG9cbiAgICAgKiAgZGVmaW5lIHRoZSBjdXJyZW50bHkgYHNlbGVjdGVkVmFyaWFudGAgZnJvbSB3aGljaCB5b3UgY2FuIGdldCBhIGNoZWNrb3V0IHVybFxuICAgICAqICAoe3sjY3Jvc3NMaW5rIFwiUHJvZHVjdFZhcmlhbnRNb2RlbC9jaGVja291dFVybFwifX1Qcm9kdWN0VmFyaWFudE1vZGVsLmNoZWNrb3V0VXJse3svY3Jvc3NMaW5rfX0pIG9yIGNhblxuICAgICAqICBiZSBhZGRlZCB0byBhIGNhcnQgKHt7I2Nyb3NzTGluayBcIkNhcnRNb2RlbC9jcmVhdGVMaW5lSXRlbXNGcm9tVmFyaWFudHNcIn19Q2FydE1vZGVsLmNyZWF0ZUxpbmVJdGVtc0Zyb21WYXJpYW50c3t7L2Nyb3NzTGlua319KS5cbiAgICAgKlxuICAgICAqICBCZWxvdyBpcyBhbiBleGFtcGxlIG9uIGhvdyB0byBjcmVhdGUgaHRtbCBmb3Igb3B0aW9uIHNlbGVjdGlvbnM6XG4gICAgICogYGBgamF2YXNjcmlwdFxuICAgICAqICAvLyB0aGUgZm9sbG93aW5nIHdpbGwgY3JlYXRlIGFuIEFycmF5IG9mIEhUTUwgdG8gY3JlYXRlIG11bHRpcGxlIHNlbGVjdCBpbnB1dHNcbiAgICAgKiAgLy8gZ2xvYmFsIGNhbGxiYWNrcyBhcmUgYWxzbyBjcmVhdGVkIHdoaWNoIHdpbGwgc2V0IHRoZSBvcHRpb24gYXMgc2VsZWN0ZWRcbiAgICAgKiAgdmFyIGVsZW1lbnRzID0gcHJvZHVjdC5vcHRpb25zLm1hcChmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgKiAgICAvLyB3ZSdsbCBjcmVhdGUgYSBjYWxsYmFjayBpbiBnbG9iYWwgc2NvcGVcbiAgICAgKiAgICAvLyB3aGljaCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBzZWxlY3QncyB2YWx1ZSBjaGFuZ2VzXG4gICAgICogICAgdmFyIGNhbGxCYWNrTmFtZSA9IG9wdGlvbi5uYW1lICsgJ29uQ2hhbmdlJztcbiAgICAgKiAgICB3aW5kb3dbIGNhbGxCYWNrTmFtZSBdID0gZnVuY3Rpb24oc2VsZWN0KSB7XG4gICAgICogICAgICAvLyBzZXQgdGhlIHByb2R1Y3RzIG9wdGlvbiB0byBiZSBzZWxlY3RlZFxuICAgICAqICAgICAgb3B0aW9uLnNlbGVjdGVkID0gc2VsZWN0LnZhbHVlO1xuICAgICAqICAgIH07XG4gICAgICpcbiAgICAgKiAgICAvLyByZXR1cm4gYSBzdHJpbmcgd2hpY2ggd2lsbCBiZSBIVE1MIGZvciB0aGUgc2VsZWN0XG4gICAgICogICAgcmV0dXJuICc8c2VsZWN0IG5hbWU9XCInICsgb3B0aW9uLm5hbWUgKyAnXCIgb25jaGFuZ2U9XCInY2FsbEJhY2tOYW1lJyh0aGlzKVwiPicgKyBvcHRpb24udmFsdWVzLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgICAgcmV0dXJuICc8b3B0aW9uIHZhbHVlPVwiJyArIHZhbHVlICsgJ1wiPicgKyB2YWx1ZSArICc8L29wdGlvbj4nO1xuICAgICAqICAgIH0pICsgJzwvc2VsZWN0Pic7XG4gICAgICogIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHByb3BlcnR5IG9wdGlvbnNcbiAgICAgKiBAdHlwZSB7QXJyYXl8UHJvZHVjdE9wdGlvbk1vZGVsfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKHRoaXMubWVtb2l6ZWQub3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5tZW1vaXplZC5vcHRpb25zO1xuICAgICAgfVxuXG4gICAgICB2YXIgYmFzZU9wdGlvbnMgPSB0aGlzLmF0dHJzLm9wdGlvbnM7XG4gICAgICB2YXIgdmFyaWFudHMkJDEgPSB0aGlzLnZhcmlhbnRzO1xuXG4gICAgICB0aGlzLm1lbW9pemVkLm9wdGlvbnMgPSBiYXNlT3B0aW9ucy5tYXAoZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICB2YXIgbmFtZSA9IG9wdGlvbi5uYW1lO1xuXG4gICAgICAgIHZhciBkdXBlZFZhbHVlcyA9IHZhcmlhbnRzJCQxLnJlZHVjZShmdW5jdGlvbiAodmFsdWVMaXN0LCB2YXJpYW50KSB7XG4gICAgICAgICAgdmFyIG9wdGlvblZhbHVlRm9yT3B0aW9uID0gdmFyaWFudC5vcHRpb25WYWx1ZXMuZmlsdGVyKGZ1bmN0aW9uIChvcHRpb25WYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvblZhbHVlLm5hbWUgPT09IG9wdGlvbi5uYW1lO1xuICAgICAgICAgIH0pWzBdO1xuXG4gICAgICAgICAgdmFsdWVMaXN0LnB1c2gob3B0aW9uVmFsdWVGb3JPcHRpb24udmFsdWUpO1xuXG4gICAgICAgICAgcmV0dXJuIHZhbHVlTGlzdDtcbiAgICAgICAgfSwgW10pO1xuXG4gICAgICAgIHZhciB2YWx1ZXMgPSB1bmlxKGR1cGVkVmFsdWVzKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb2R1Y3RPcHRpb25Nb2RlbCh7IG5hbWU6IG5hbWUsIHZhbHVlczogdmFsdWVzIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB0aGlzLm1lbW9pemVkLm9wdGlvbnM7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICB2YXJpYW50czoge1xuXG4gICAgLyoqXG4gICAgICAqIEFuIGBBcnJheWAgb2Yge3sjY3Jvc3NMaW5rIFwiUHJvZHVjdFZhcmlhbnRNb2RlbFwifX1Qcm9kdWN0VmFyaWFudE1vZGVsJ3N7ey9jcm9zc0xpbmt9fVxuICAgICAgKiBAcHJvcGVydHkgdmFyaWFudHNcbiAgICAgICogQHR5cGUge0FycmF5fFByb2R1Y3RWYXJpYW50TW9kZWx9IGFycmF5IG9mIFByb2R1Y3RWYXJpYW50TW9kZWwgaW5zdGFuY2VzLlxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgcmV0dXJuIHRoaXMuYXR0cnMudmFyaWFudHMubWFwKGZ1bmN0aW9uICh2YXJpYW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvZHVjdFZhcmlhbnRNb2RlbCh7IHZhcmlhbnQ6IHZhcmlhbnQsIHByb2R1Y3Q6IF90aGlzMyB9LCB7IGNvbmZpZzogX3RoaXMzLmNvbmZpZyB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgc2VsZWN0aW9uczoge1xuXG4gICAgLyoqXG4gICAgICAqIEEgcmVhZCBvbmx5IGBBcnJheWAgb2YgU3RyaW5ncyByZXByZXNlbnRlZCBjdXJyZW50bHkgc2VsZWN0ZWQgb3B0aW9uIHZhbHVlcy4gZWcuIGBbXCJMYXJnZVwiLCBcIlJlZFwiXWBcbiAgICAgICogQHByb3BlcnR5IHNlbGVjdGlvbnNcbiAgICAgICogQHR5cGUge0FycmF5IHwgU3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLm1hcChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgIHJldHVybiBvcHRpb24uc2VsZWN0ZWQ7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIHNlbGVjdGVkVmFyaWFudDoge1xuXG4gICAgLyoqXG4gICAgICAqIFJldHJpZXZlIHZhcmlhbnQgZm9yIGN1cnJlbnRseSBzZWxlY3RlZCBvcHRpb25zLiBCeSBkZWZhdWx0IHRoZSBmaXJzdCB2YWx1ZSBpbiBlYWNoXG4gICAgICAqIG9wdGlvbiBpcyBzZWxlY3RlZCB3aGljaCBtZWFucyBgc2VsZWN0ZWRWYXJpYW50YCB3aWxsIG5ldmVyIGJlIGBudWxsYC5cbiAgICAgICpcbiAgICAgICogV2l0aCBhIGBzZWxlY3RlZFZhcmlhbnRgIHlvdSBjYW4gY3JlYXRlIGNoZWNrb3V0IHVybFxuICAgICAgKiAoe3sjY3Jvc3NMaW5rIFwiUHJvZHVjdFZhcmlhbnRNb2RlbC9jaGVja291dFVybFwifX1Qcm9kdWN0VmFyaWFudE1vZGVsLmNoZWNrb3V0VXJse3svY3Jvc3NMaW5rfX0pIG9yIGl0IGNhblxuICAgICAgKiBiZSBhZGRlZCB0byBhIGNhcnQgKHt7I2Nyb3NzTGluayBcIkNhcnRNb2RlbC9jcmVhdGVMaW5lSXRlbXNGcm9tVmFyaWFudHNcIn19Q2FydE1vZGVsLmNyZWF0ZUxpbmVJdGVtc0Zyb21WYXJpYW50c3t7L2Nyb3NzTGlua319KS5cbiAgICAgICpcbiAgICAgICogQHByb3BlcnR5IHNlbGVjdGVkVmFyaWFudFxuICAgICAgKiBAdHlwZSB7UHJvZHVjdFZhcmlhbnRNb2RlbH1cbiAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIHZhcmlhbnRUaXRsZSA9IHRoaXMuc2VsZWN0aW9ucy5qb2luKCcgLyAnKTtcblxuICAgICAgcmV0dXJuIHRoaXMudmFyaWFudHMuZmlsdGVyKGZ1bmN0aW9uICh2YXJpYW50KSB7XG4gICAgICAgIHJldHVybiB2YXJpYW50LnRpdGxlID09PSB2YXJpYW50VGl0bGU7XG4gICAgICB9KVswXSB8fCBudWxsO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgc2VsZWN0ZWRWYXJpYW50SW1hZ2U6IHtcblxuICAgIC8qKlxuICAgICAgKiBSZXRyaWV2ZSBpbWFnZSBmb3IgY3VycmVudGx5IHNlbGVjdGVkIHZhcmlhbnRJbWFnZS4gQW4gZXhhbXBsZSBpbWFnZSBPYmplY3Qgd291bGQgbG9vayBsaWtlIHRoaXM6XG4gICAgICAqIGBgYFxuICAgICAgKiB7XG4gICAgICAqICAgY3JlYXRlZF9hdDogXCIyMDE2LTA4LTI5VDEyOjM1OjA5LTA0OjAwXCIsXG4gICAgICAqICAgaWQ6IDE3NjkwNTUzMzUwLFxuICAgICAgKiAgIHBvc2l0aW9uOiAxLFxuICAgICAgKiAgIHByb2R1Y3RfaWQ6IDgyOTEwMjk0NDYsXG4gICAgICAqICAgc3JjOiBcImh0dHBzOi8vY2RuLnNob3BpZnkuY29tL3MvZmlsZXMvMS8xMDE5LzA0OTUvcHJvZHVjdHMvaTExX2MzMzM0MzI1LTJkNjctNDYyMy04Y2Q0LTBhNmIwOGFhMWI4My5qcGc/dj0xNDcyNDg4NTA5XCIsXG4gICAgICAqICAgdXBkYXRlZF9hdDogXCIyMDE2LTA4LTI5VDEyOjM1OjA5LTA0OjAwXCIsXG4gICAgICAqICAgdmFyaWFudF9pZHM6IFsgMjc2OTAxMDMyMzggXVxuICAgICAgKiB9XG4gICAgICAqIGBgYFxuICAgICAgKlxuICAgICAgKiBAcHJvcGVydHkgc2VsZWN0ZWRWYXJpYW50SW1hZ2VcbiAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKCF0aGlzLnNlbGVjdGVkVmFyaWFudCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRWYXJpYW50LmltYWdlO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfVxufSkpO1xuXG52YXIgTGlzdGluZ3NTZXJpYWxpemVyID0gQ29yZU9iamVjdC5leHRlbmQoe1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gIH0sXG4gIHJvb3RLZXlGb3JUeXBlOiBmdW5jdGlvbiByb290S2V5Rm9yVHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUuc2xpY2UoMCwgLTEpICsgJ19saXN0aW5nJztcbiAgfSxcblxuXG4gIG1vZGVsczoge1xuICAgIGNvbGxlY3Rpb25zOiBCYXNlTW9kZWwsXG4gICAgcHJvZHVjdHM6IFByb2R1Y3RNb2RlbFxuICB9LFxuXG4gIG1vZGVsRm9yVHlwZTogZnVuY3Rpb24gbW9kZWxGb3JUeXBlKHR5cGUpIHtcbiAgICByZXR1cm4gdGhpcy5tb2RlbHNbdHlwZV07XG4gIH0sXG4gIGRlc2VyaWFsaXplU2luZ2xlOiBmdW5jdGlvbiBkZXNlcmlhbGl6ZVNpbmdsZSh0eXBlKSB7XG4gICAgdmFyIHNpbmdsZVBheWxvYWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtZXRhQXR0cnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gICAgdmFyIG1vZGVsQXR0cnMgPSBzaW5nbGVQYXlsb2FkW3RoaXMucm9vdEtleUZvclR5cGUodHlwZSldO1xuICAgIHZhciBtb2RlbCA9IHRoaXMubW9kZWxGcm9tQXR0cnModHlwZSwgbW9kZWxBdHRycywgbWV0YUF0dHJzKTtcblxuICAgIHJldHVybiBtb2RlbDtcbiAgfSxcbiAgZGVzZXJpYWxpemVNdWx0aXBsZTogZnVuY3Rpb24gZGVzZXJpYWxpemVNdWx0aXBsZSh0eXBlKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgY29sbGVjdGlvblBheWxvYWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtZXRhQXR0cnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gICAgdmFyIG1vZGVscyA9IGNvbGxlY3Rpb25QYXlsb2FkW3RoaXMucm9vdEtleUZvclR5cGUodHlwZSkgKyAncyddO1xuXG4gICAgcmV0dXJuIG1vZGVscy5tYXAoZnVuY3Rpb24gKGF0dHJzKSB7XG4gICAgICB2YXIgbW9kZWwgPSBfdGhpczQubW9kZWxGcm9tQXR0cnModHlwZSwgYXR0cnMsIG1ldGFBdHRycyk7XG5cbiAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9KTtcbiAgfSxcbiAgbW9kZWxGcm9tQXR0cnM6IGZ1bmN0aW9uIG1vZGVsRnJvbUF0dHJzKHR5cGUsIGF0dHJzLCBtZXRhQXR0cnMpIHtcbiAgICB2YXIgTW9kZWwgPSB0aGlzLm1vZGVsRm9yVHlwZSh0eXBlKTtcblxuICAgIG1ldGFBdHRycy5jb25maWcgPSB0aGlzLmNvbmZpZztcblxuICAgIHJldHVybiBuZXcgTW9kZWwoYXR0cnMsIG1ldGFBdHRycyk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBhdXRoVG9VcmwodXJsLCBvcHRzKSB7XG4gIHZhciBhdXRob3JpemF0aW9uID0gdm9pZCAwO1xuXG4gIGlmIChvcHRzLmhlYWRlcnMpIHtcbiAgICBPYmplY3Qua2V5cyhvcHRzLmhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKGtleS50b0xvd2VyQ2FzZSgpID09PSAnYXV0aG9yaXphdGlvbicpIHtcbiAgICAgICAgYXV0aG9yaXphdGlvbiA9IG9wdHMuaGVhZGVyc1trZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGF1dGhvcml6YXRpb24pIHtcbiAgICB2YXIgaGFzaGVkS2V5ID0gYXV0aG9yaXphdGlvbi5zcGxpdCgnICcpLnNsaWNlKC0xKVswXTtcblxuICAgIHRyeSB7XG4gICAgICB2YXIgcGxhaW5LZXkgPSBhdG9iKGhhc2hlZEtleSk7XG5cbiAgICAgIHZhciBuZXdVcmwgPSB2b2lkIDA7XG5cbiAgICAgIGlmICh1cmwuaW5kZXhPZignPycpID4gLTEpIHtcbiAgICAgICAgbmV3VXJsID0gdXJsICsgJyZfeF9odHRwX2F1dGhvcml6YXRpb249JyArIHBsYWluS2V5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VXJsID0gdXJsICsgJz9feF9odHRwX2F1dGhvcml6YXRpb249JyArIHBsYWluS2V5O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3VXJsO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGF0b2IgY2hva2VkIG9uIG5vbi1lbmNvZGVkIGRhdGEuIFRoZXJlZm9yZSwgbm90IGEgZm9ybSBvZiBhdXRoIHdlXG4gICAgICAvLyBzdXBwb3J0LlxuICAgICAgLy9cbiAgICAgIC8vIE5PT1BcbiAgICAgIC8vXG4gICAgfVxuICB9XG5cbiAgLyogZXNsaW50IG5ld2xpbmUtYmVmb3JlLXJldHVybjogMCAqL1xuICByZXR1cm4gdXJsO1xufVxuXG5mdW5jdGlvbiBpZTlBamF4KG1ldGhvZCwgdXJsLCBvcHRzKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHhkciA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuXG4gICAgeGRyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZSh4ZHIucmVzcG9uc2VUZXh0KTtcblxuICAgICAgICByZXNvbHZlKHsganNvbjoganNvbiwgb3JpZ2luYWxSZXNwb25zZTogeGRyLCBpc0pTT046IHRydWUgfSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc29sdmUoeyB0ZXh0OiB4ZHIucmVzcG9uc2VUZXh0LCBvcmlnaW5hbFJlc3BvbnNlOiB4ZHIsIGlzVGV4dDogdHJ1ZSB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdUaGVyZSB3YXMgYW4gZXJyb3Igd2l0aCB0aGUgWERSJykpO1xuICAgIH1cblxuICAgIHhkci5vbmVycm9yID0gaGFuZGxlRXJyb3I7XG4gICAgeGRyLm9udGltZW91dCA9IGhhbmRsZUVycm9yO1xuXG4gICAgeGRyLm9wZW4obWV0aG9kLCBhdXRoVG9VcmwodXJsLCBvcHRzKSk7XG4gICAgeGRyLnNlbmQob3B0cy5kYXRhKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzTm9kZUxpa2VFbnZpcm9ubWVudCgpIHtcbiAgdmFyIHdpbmRvd0Fic2VudCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnO1xuICB2YXIgcmVxdWlyZVByZXNlbnQgPSBcImZ1bmN0aW9uXCIgPT09ICdmdW5jdGlvbic7XG5cbiAgcmV0dXJuIHdpbmRvd0Fic2VudCAmJiByZXF1aXJlUHJlc2VudDtcbn1cblxuZnVuY3Rpb24gY2hlY2tTdGF0dXMocmVzcG9uc2UpIHtcbiAgaWYgKHJlc3BvbnNlLnN0YXR1cyA+PSAyMDAgJiYgcmVzcG9uc2Uuc3RhdHVzIDwgMzAwKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG5cbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuXG4gIGVycm9yLnN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1cztcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgdGhyb3cgZXJyb3I7XG59XG5cbmZ1bmN0aW9uIHBhcnNlUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKS50aGVuKGZ1bmN0aW9uIChqc29uKSB7XG4gICAgcmV0dXJuIHsganNvbjoganNvbiwgb3JpZ2luYWxSZXNwb25zZTogcmVzcG9uc2UsIGlzSlNPTjogdHJ1ZSB9O1xuICB9KVsnY2F0Y2gnXShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3BvbnNlQ2xvbmUgPSByZXNwb25zZS5jbG9uZSgpO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlQ2xvbmUudGV4dCgpLnRoZW4oZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgIHJldHVybiB7IHRleHQ6IHRleHQsIG9yaWdpbmFsUmVzcG9uc2U6IHJlc3BvbnNlQ2xvbmUsIGlzVGV4dDogdHJ1ZSB9O1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWpheChtZXRob2QsIHVybCkge1xuICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgLy8gd2UgbmVlZCB0byBjaGVjayB0aGF0IHdlJ3JlIG5vdCBydW5uaW5nIGluIE5vZGVcbiAgLy8gYmVmb3JlIHdlIHNob3VsZCBjaGVjayBpZiB0aGlzIGlzIGllOVxuICBpZiAoIWlzTm9kZUxpa2VFbnZpcm9ubWVudCgpKSB7XG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgaWYgKCEoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSkge1xuICAgICAgcmV0dXJuIGllOUFqYXguYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIG9wdHMubWV0aG9kID0gbWV0aG9kO1xuICBvcHRzLm1vZGUgPSAnY29ycyc7XG5cbiAgcmV0dXJuIGZldGNoKHVybCwgb3B0cykudGhlbihjaGVja1N0YXR1cykudGhlbihwYXJzZVJlc3BvbnNlKTtcbn1cblxudmFyIExpc3RpbmdzQWRhcHRlciA9IENvcmVPYmplY3QuZXh0ZW5kKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHtcbiAgYWpheDogYWpheCxcblxuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gIH0sXG4gIHBhdGhGb3JUeXBlOiBmdW5jdGlvbiBwYXRoRm9yVHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuICcvJyArIHR5cGUuc2xpY2UoMCwgLTEpICsgJ19saXN0aW5ncyc7XG4gIH0sXG4gIGJ1aWxkVXJsOiBmdW5jdGlvbiBidWlsZFVybChzaW5nbGVPck11bHRpcGxlLCB0eXBlLCBpZE9yUXVlcnkpIHtcbiAgICBzd2l0Y2ggKHNpbmdsZU9yTXVsdGlwbGUpIHtcbiAgICAgIGNhc2UgJ211bHRpcGxlJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRNdWx0aXBsZVVybCh0eXBlLCBpZE9yUXVlcnkpO1xuICAgICAgY2FzZSAnc2luZ2xlJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRTaW5nbGVVcmwodHlwZSwgaWRPclF1ZXJ5KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH0sXG4gIGJ1aWxkTXVsdGlwbGVVcmw6IGZ1bmN0aW9uIGJ1aWxkTXVsdGlwbGVVcmwodHlwZSkge1xuICAgIHZhciBxdWVyeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICB2YXIgdXJsID0gJycgKyB0aGlzLmJhc2VVcmwgKyB0aGlzLnBhdGhGb3JUeXBlKHR5cGUpO1xuICAgIHZhciBwYXJhbU5hbWVzID0gT2JqZWN0LmtleXMocXVlcnkpO1xuXG4gICAgaWYgKHBhcmFtTmFtZXMubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIHF1ZXJ5U3RyaW5nID0gcGFyYW1OYW1lcy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSB2b2lkIDA7XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocXVlcnlba2V5XSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IHF1ZXJ5W2tleV0uam9pbignLCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gcXVlcnlba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBrZXkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICAgICAgfSkuam9pbignJicpO1xuXG4gICAgICByZXR1cm4gdXJsICsgJz8nICsgcXVlcnlTdHJpbmc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVybDtcbiAgfSxcbiAgYnVpbGRTaW5nbGVVcmw6IGZ1bmN0aW9uIGJ1aWxkU2luZ2xlVXJsKHR5cGUsIGlkKSB7XG4gICAgcmV0dXJuICcnICsgdGhpcy5iYXNlVXJsICsgdGhpcy5wYXRoRm9yVHlwZSh0eXBlKSArICcvJyArIGlkO1xuICB9LFxuICBmZXRjaE11bHRpcGxlOiBmdW5jdGlvbiBmZXRjaE11bHRpcGxlKCkgLyogdHlwZSwgW3F1ZXJ5XSAqL3tcbiAgICB2YXIgdXJsID0gdGhpcy5idWlsZFVybC5hcHBseSh0aGlzLCBbJ211bHRpcGxlJ10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcblxuICAgIHJldHVybiB0aGlzLmFqYXgoJ0dFVCcsIHVybCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5qc29uO1xuICAgIH0pO1xuICB9LFxuICBmZXRjaFNpbmdsZTogZnVuY3Rpb24gZmV0Y2hTaW5nbGUoKSAvKiB0eXBlLCBpZCAqL3tcbiAgICB2YXIgdXJsID0gdGhpcy5idWlsZFVybC5hcHBseSh0aGlzLCBbJ3NpbmdsZSddLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG5cbiAgICByZXR1cm4gdGhpcy5hamF4KCdHRVQnLCB1cmwsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuanNvbjtcbiAgICB9KTtcbiAgfVxufSwge1xuICBiYXNlNjRBcGlLZXk6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBidG9hKHRoaXMuY29uZmlnLmFwaUtleSk7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBiYXNlVXJsOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgX2NvbmZpZyA9IHRoaXMuY29uZmlnO1xuICAgICAgdmFyIGRvbWFpbiA9IF9jb25maWcuZG9tYWluO1xuICAgICAgdmFyIGFwcElkID0gX2NvbmZpZy5hcHBJZDtcblxuXG4gICAgICByZXR1cm4gJ2h0dHBzOi8vJyArIGRvbWFpbiArICcvYXBpL2FwcHMvJyArIGFwcElkO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgaGVhZGVyczoge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGFzc2lnbiQxKHt9LCB7XG4gICAgICAgIEF1dGhvcml6YXRpb246ICdCYXNpYyAnICsgdGhpcy5iYXNlNjRBcGlLZXksXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdYLVNESy1WYXJpYW50JzogJ2phdmFzY3JpcHQnLFxuICAgICAgICAnWC1TREstVmVyc2lvbic6IHZlcnNpb25cblxuICAgICAgfSwgdGhpcy5jb25maWcuYWpheEhlYWRlcnMpO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfVxufSkpO1xuXG52YXIgR1VJRF9LRVkgPSAnc2hvcGlmeS1idXktdXVpZCc7XG5cbi8qKlxuICogQSBjYXJ0IHN0b3JlcyBhbiBBcnJheSBvZiBgQ2FydExpbmVJdGVtTW9kZWxgJ3MgaW4gaXQncyBgbGluZUl0ZW1zYCBwcm9wZXJ0eS5cbiAqIEBjbGFzcyBDYXJ0TGluZUl0ZW1Nb2RlbFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBDYXJ0TGluZUl0ZW1Nb2RlbCA9IEJhc2VNb2RlbC5leHRlbmQoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoe1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IoKSB7XG4gICAgdGhpc1snc3VwZXInXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG59LCB7XG4gIGlkOiB7XG5cbiAgICAvKipcbiAgICAgKiBBIGxpbmUgaXRlbSBJRC5cbiAgICAgKiBAcHJvcGVydHkgaWRcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cnNbR1VJRF9LRVldO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgdmFyaWFudF9pZDoge1xuXG4gICAgLyoqXG4gICAgICogSUQgb2YgbGluZSBpdGVtIHZhcmlhbnQuXG4gICAgICogQHByb3BlcnR5IHZhcmlhbnRfaWRcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cnMudmFyaWFudF9pZDtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIHByb2R1Y3RfaWQ6IHtcblxuICAgIC8qKlxuICAgICAqIElEIG9mIHZhcmlhbnQncyBwcm9kdWN0LlxuICAgICAqIEBwcm9wZXJ0eSBwcm9kdWN0X2lkXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLnByb2R1Y3RfaWQ7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBpbWFnZToge1xuXG4gICAgLyoqXG4gICAgICogVmFyaWFudCdzIGltYWdlLlxuICAgICAqIEV4YW1wbGUgYE9iamVjdGAgcmV0dXJuZWQ6XG4gICAgICogYGBgXG4gICAgICoge1xuICAgICAqICAgIFwiaWRcIjogMTg3MjMxODMyMzgsXG4gICAgICogICAgXCJjcmVhdGVkX2F0XCI6IFwiMjAxNi0wOS0xNFQxNzoxMjoxMi0wNDowMFwiLFxuICAgICAqICAgIFwicG9zaXRpb25cIjogMSxcbiAgICAgKiAgICBcInVwZGF0ZWRfYXRcIjogXCIyMDE2LTA5LTE0VDE3OjEyOjEyLTA0OjAwXCIsXG4gICAgICogICAgXCJwcm9kdWN0X2lkXCI6IDg1Njk5MTE1NTgsXG4gICAgICogICAgXCJzcmNcIjogXCJodHRwczovL2Nkbi5zaG9waWZ5LmNvbS9zL2ZpbGVzLzEvMTAxOS8wNDk1L3Byb2R1Y3RzL01vcF9fdGhyZWVfZGlmZmVyZW50X21vcF9oYW5kbGVzLmpwZz92PTE0NzM4ODc1MzJcIixcbiAgICAgKiAgICBcInZhcmlhbnRfaWRzXCI6IFtdXG4gICAgICogIH1cbiAgICAgKiBgYGBcbiAgICAgKiBAcHJvcGVydHkgaW1hZ2VcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKCF0aGlzLmF0dHJzLmltYWdlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IEltYWdlTW9kZWwodGhpcy5hdHRycy5pbWFnZSk7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBpbWFnZVZhcmlhbnRzOiB7XG5cbiAgICAvKipcbiAgICAgICogSW1hZ2UgdmFyaWFudHMgYXZhaWxhYmxlIGZvciBhIHZhcmlhbnQuIEFuIGV4YW1wbGUgdmFsdWUgb2YgYGltYWdlVmFyaWFudGA6XG4gICAgICAqIGBgYFxuICAgICAgKiBbXG4gICAgICAqICAge1xuICAgICAgKiAgICAgXCJuYW1lXCI6IFwicGljb1wiLFxuICAgICAgKiAgICAgXCJkaW1lbnNpb25zXCI6IFwiMTZ4MTZcIixcbiAgICAgICogICAgIFwic3JjXCI6IFwiaHR0cHM6Ly9jZG4uc2hvcGlmeS5jb20vcy9maWxlcy8xLzEwMTkvMDQ5NS9wcm9kdWN0cy9hbGllbl8xNDZlZjdjMS0yNmU5LTRlOTYtOTZlNi05ZDM3MTI4ZDAwMDVfcGljby5qcGc/dj0xNDY5MDQ2NDIzXCJcbiAgICAgICogICB9LFxuICAgICAgKiAgIHtcbiAgICAgICogICAgIFwibmFtZVwiOiBcImNvbXBhY3RcIixcbiAgICAgICogICAgIFwiZGltZW5zaW9uc1wiOiBcIjE2MHgxNjBcIixcbiAgICAgICogICAgIFwic3JjXCI6IFwiaHR0cHM6Ly9jZG4uc2hvcGlmeS5jb20vcy9maWxlcy8xLzEwMTkvMDQ5NS9wcm9kdWN0cy9hbGllbl8xNDZlZjdjMS0yNmU5LTRlOTYtOTZlNi05ZDM3MTI4ZDAwMDVfY29tcGFjdC5qcGc/dj0xNDY5MDQ2NDIzXCJcbiAgICAgICogICB9XG4gICAgICAqIF1cbiAgICAgICogYGBgXG4gICAgICAqXG4gICAgICAqIEBwcm9wZXJ0eSBpbWFnZVZhcmlhbnRcbiAgICAgICogQHR5cGUge0FycmF5fVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAoIXRoaXMuaW1hZ2UpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5pbWFnZS52YXJpYW50cztcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIHRpdGxlOiB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWN0IHRpdGxlIG9mIHZhcmlhbnQncyBwYXJlbnQgcHJvZHVjdC5cbiAgICAgKiBAcHJvcGVydHkgdGl0bGVcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cnMudGl0bGU7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBxdWFudGl0eToge1xuXG4gICAgLyoqXG4gICAgICogQ291bnQgb2YgdmFyaWFudHMgdG8gb3JkZXIuXG4gICAgICogQHByb3BlcnR5IHF1YW50aXR5XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLnF1YW50aXR5O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgIHZhciBwYXJzZWRWYWx1ZSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG5cbiAgICAgIGlmIChwYXJzZWRWYWx1ZSA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdWFudGl0aWVzIG11c3QgYmUgcG9zaXRpdmUnKTtcbiAgICAgIH0gZWxzZSBpZiAocGFyc2VkVmFsdWUgIT09IHBhcnNlRmxvYXQodmFsdWUpKSB7XG4gICAgICAgIC8qIGluY2lkZW50YWxseSwgdGhpcyBjb3ZlcnMgYWxsIE5hTiB2YWx1ZXMsIGJlY2F1c2UgTmFOICE9PSBOYW4gKi9cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdWFudGl0aWVzIG11c3QgYmUgd2hvbGUgbnVtYmVycycpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmF0dHJzLnF1YW50aXR5ID0gcGFyc2VkVmFsdWU7XG5cbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLnF1YW50aXR5O1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgcHJvcGVydGllczoge1xuXG4gICAgLyoqXG4gICAgICogQ3VzdG9taXphdGlvbiBpbmZvcm1hdGlvbiBmb3IgYSBwcm9kdWN0LlxuICAgICAqIDxhIGhyZWY9XCJodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2N1c3RvbWl6YXRpb24vcHJvZHVjdHMvZ2V0LWN1c3RvbWl6YXRpb24taW5mb3JtYXRpb24tZm9yLXByb2R1Y3RzXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICogU2VlIGhlcmUgZm9yIG1vcmUgaW5mb1xuICAgICAqIDwvYT4uXG4gICAgICogQHByb3BlcnR5IHByb3BlcnRpZXNcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy5wcm9wZXJ0aWVzIHx8IHt9O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgIHRoaXMuYXR0cnMucHJvcGVydGllcyA9IHZhbHVlIHx8IHt9O1xuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICB2YXJpYW50X3RpdGxlOiB7XG5cbiAgICAvKipcbiAgICAgKiBUaXRsZSBvZiB2YXJpYW50LlxuICAgICAqIEBwcm9wZXJ0eSB2YXJpYW50X3RpdGxlXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLnZhcmlhbnRfdGl0bGU7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBwcmljZToge1xuXG4gICAgLyoqXG4gICAgICogUHJpY2Ugb2YgdGhlIHZhcmlhbnQuIEZvciBleGFtcGxlOiBgXCI1LjAwXCJgLlxuICAgICAqIEBwcm9wZXJ0eSBwcmljZVxuICAgICAqIEByZWFkT25seVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy5wcmljZTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIGNvbXBhcmVfYXRfcHJpY2U6IHtcblxuICAgIC8qKlxuICAgICAgKiBDb21wYXJlIGF0IHByaWNlIGZvciB2YXJpYW50LiBUaGUgYGNvbXBhcmVBdFByaWNlYCB3b3VsZCBiZVxuICAgICAgKiB0aGUgcHJpY2Ugb2YgdGhlIHByb2R1Y3QgcHJldmlvdXNseSBiZWZvcmUgdGhlIHByb2R1Y3Qgd2VudCBvbiBzYWxlLiBGb3IgbW9yZSBpbmZvXG4gICAgICAqIGdvIDxhIGhyZWY9XCJodHRwczovL2RvY3Muc2hvcGlmeS5jb20vbWFudWFsL3Byb2R1Y3RzL3Byb21vdGluZy1tYXJrZXRpbmcvc2FsZXNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5oZXJlPC9hPi5cbiAgICAgICpcbiAgICAgICogSWYgbm8gYGNvbXBhcmVBdFByaWNlYCBpcyBzZXQgdGhlbiB0aGlzIHZhbHVlIHdpbGwgYmUgYG51bGxgLiBBbiBleGFtcGxlIHZhbHVlOiBgXCI1LjAwXCJgLlxuICAgICAgKiBAcHJvcGVydHkgY29tcGFyZUF0UHJpY2VcbiAgICAgICogQHJlYWRPbmx5XG4gICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLmNvbXBhcmVfYXRfcHJpY2U7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBsaW5lX3ByaWNlOiB7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdG90YWwgcHJpY2UgZm9yIHRoaXMgbGluZSBpdGVtLiBGb3IgaW5zdGFuY2UgaWYgdGhlIHZhcmlhbnQgY29zdHMgYDEuNTBgIGFuZCB5b3UgaGF2ZSBhIHF1YW50aXR5XG4gICAgICogb2YgMiB0aGVuIGBsaW5lX3ByaWNlYCB3aWxsIGJlIGAzLjAwYC5cbiAgICAgKiBAcHJvcGVydHkgbGluZV9wcmljZVxuICAgICAqIEByZWFkT25seVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gKHRoaXMucXVhbnRpdHkgKiBwYXJzZUZsb2F0KHRoaXMucHJpY2UpKS50b0ZpeGVkKDIpO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgZ3JhbXM6IHtcblxuICAgIC8qKlxuICAgICAqIFZhcmlhbnQncyB3ZWlnaHQgaW4gZ3JhbXMuIElmIG5vIHdlaWdodCBpcyBzZXQgdGhlbiBgMGAgaXMgcmV0dXJuZWQuXG4gICAgICogQHByb3BlcnR5IGdyYW1zXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLmdyYW1zO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfVxufSkpO1xuXG4vKiBlc2xpbnQgbm8tdW5kZWZpbmVkOiAwIGNvbXBsZXhpdHk6IDAgKi9cbnZhciBHVUlEX1BSRUZJWCA9ICdzaG9waWZ5LWJ1eS4nICsgRGF0ZS5ub3coKTtcblxudmFyIEdVSURfREVTQyA9IHtcbiAgd3JpdGFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgdmFsdWU6IG51bGxcbn07XG5cbnZhciB1dWlkU2VlZCA9IDA7XG5cbmZ1bmN0aW9uIHV1aWQoKSB7XG4gIHJldHVybiArK3V1aWRTZWVkO1xufVxuXG52YXIgbnVtYmVyQ2FjaGUgPSB7fTtcbnZhciBzdHJpbmdDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBzZXRHdWlkRm9yKG9iaikge1xuICBpZiAob2JqICYmIG9ialtHVUlEX0tFWV0pIHtcbiAgICByZXR1cm4gb2JqW0dVSURfS0VZXTtcbiAgfVxuXG4gIGlmIChvYmogPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAnKHVuZGVmaW5lZCknO1xuICB9XG5cbiAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgIHJldHVybiAnKG51bGwpJztcbiAgfVxuXG4gIHZhciB0eXBlID0gdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqKTtcbiAgdmFyIGlkID0gdm9pZCAwO1xuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBpZCA9IG51bWJlckNhY2hlW29ial07XG5cbiAgICAgIGlmICghaWQpIHtcbiAgICAgICAgaWQgPSBudW1iZXJDYWNoZVtvYmpdID0gJ251JyArIG9iajtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgaWQgPSBzdHJpbmdDYWNoZVtvYmpdO1xuXG4gICAgICBpZiAoIWlkKSB7XG4gICAgICAgIGlkID0gc3RyaW5nQ2FjaGVbb2JqXSA9ICdzdCcgKyB1dWlkKCk7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICBpZiAob2JqKSB7XG4gICAgICAgIGlkID0gJyh0cnVlKSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZCA9ICcoZmFsc2UpJztcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKG9iaiA9PT0gT2JqZWN0KSB7XG4gICAgICAgIGlkID0gJyhPYmplY3QpJztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChvYmogPT09IEFycmF5KSB7XG4gICAgICAgIGlkID0gJyhBcnJheSknO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWQgPSBHVUlEX1BSRUZJWCArICcuJyArIHV1aWQoKTtcblxuICAgICAgaWYgKG9ialtHVUlEX0tFWV0gPT09IG51bGwpIHtcbiAgICAgICAgb2JqW0dVSURfS0VZXSA9IGlkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgR1VJRF9ERVNDLnZhbHVlID0gaWQ7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIEdVSURfS0VZLCBHVUlEX0RFU0MpO1xuICAgICAgfVxuICB9XG5cbiAgcmV0dXJuIGlkO1xufVxuXG4vKiBnbG9iYWwgZ2xvYmFsICovXG5cbnZhciBnbG9iYWxOYW1lc3BhY2UgPSB2b2lkIDA7XG5cbmlmICh0eXBlb2YgZ2xvYmFsID09PSAndW5kZWZpbmVkJykge1xuICBnbG9iYWxOYW1lc3BhY2UgPSB3aW5kb3c7XG59IGVsc2Uge1xuICBnbG9iYWxOYW1lc3BhY2UgPSBnbG9iYWw7XG59XG5cbmZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gIGlmICghZ2xvYmFsTmFtZXNwYWNlW2tleV0pIHtcbiAgICBnbG9iYWxOYW1lc3BhY2Vba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldChrZXkpIHtcbiAgcmV0dXJuIGdsb2JhbE5hbWVzcGFjZVtrZXldO1xufVxuXG52YXIgZ2xvYmFsVmFycyA9IHsgc2V0OiBzZXQsIGdldDogZ2V0IH07XG5cbmZ1bmN0aW9uIG9iamVjdHNFcXVhbChvbmUsIHR3bykge1xuICBpZiAob25lID09PSB0d28pIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3Qua2V5cyhvbmUpLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAob25lW2tleV0gaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICByZXR1cm4gb25lW2tleV0udG9TdHJpbmcoKSA9PT0gdHdvW2tleV0udG9TdHJpbmcoKTtcbiAgICB9IGVsc2UgaWYgKF90eXBlb2Yob25lW2tleV0pID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIG9iamVjdHNFcXVhbChvbmVba2V5XSwgdHdvW2tleV0pO1xuICAgIH1cblxuICAgIHJldHVybiBvbmVba2V5XSA9PT0gdHdvW2tleV07XG4gIH0pO1xufVxuXG4vKipcbiogQ2xhc3MgZm9yIGNhcnQgbW9kZWxcbiogQGNsYXNzIENhcnRNb2RlbFxuKi9cbnZhciBDYXJ0TW9kZWwgPSBCYXNlTW9kZWwuZXh0ZW5kKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHtcbiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXNbJ3N1cGVyJ10uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSxcblxuXG4gIC8qKlxuICAgICogQWRkIGl0ZW1zIHRvIHRoZSBjYXJ0LiBVcGRhdGVzIGNhcnQncyBgbGluZUl0ZW1zYCBiYXNlZCBvbiB2YXJpYW50cyBwYXNzZWQgaW4uXG4gICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgKiBjYXJ0LmFkZFZhcmlhbnRzKHt2YXJpYW50OiB2YXJpYW50T2JqZWN0LCBxdWFudGl0eTogMX0pLnRoZW4oY2FydCA9PiB7XG4gICAgKiAgIC8vIHRoZSBjYXJ0IGhhcyBjcmVhdGVkIGxpbmUgaXRlbXNcbiAgICAqIH0pO1xuICAgICogYGBgXG4gICAgKiBAZGVwcmVjYXRlZCBgY3JlYXRlTGluZUl0ZW1zRnJvbVZhcmlhbnRzYCB3aWxsIGJlIHVzZWQgaW4gdGhlIGZ1dHVyZSBhcyBpdCdzIG1vcmUgZGVzY3JpcHRpdmVcbiAgICAqIEBtZXRob2QgYWRkVmFyaWFudHNcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVtIC0gT25lIG9yIG1vcmUgdmFyaWFudHNcbiAgICAqIEBwYXJhbSB7UHJvZHVjdFZhcmlhbnRNb2RlbH0gaXRlbS52YXJpYW50IC0gdmFyaWFudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBpdGVtLnF1YW50aXR5IC0gcXVhbnRpdHlcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBbbW9yZUl0ZW1zLi4uXSAtIGZ1cnRoZXIgb2JqZWN0cyBkZWZpbmluZyBgdmFyaWFudGAgYW5kIGBxdWFudGl0eWAgbWF5YmUgcGFzc2VkIGluXG4gICAgKiBAcHJpdmF0ZVxuICAgICogQHJldHVybiB7UHJvbWlzZXxDYXJ0TW9kZWx9IC0gdGhlIGNhcnQgaW5zdGFuY2UuXG4gICovXG4gIGFkZFZhcmlhbnRzOiBmdW5jdGlvbiBhZGRWYXJpYW50cygpIHtcbiAgICBsb2dnZXIud2FybignQ2FydE1vZGVsIC0gJywgJ2FkZFZhcmlhbnRzIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgY3JlYXRlTGluZUl0ZW1zRnJvbVZhcmlhbnRzIGluc3RlYWQnKTtcblxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUxpbmVJdGVtc0Zyb21WYXJpYW50cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAgKiBBZGQgaXRlbXMgdG8gdGhlIGNhcnQuIFVwZGF0ZXMgY2FydCdzIGBsaW5lSXRlbXNgIGJhc2VkIG9uIHZhcmlhbnRzIHBhc3NlZCBpbi5cbiAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAqIGNhcnQuY3JlYXRlTGluZUl0ZW1zRnJvbVZhcmlhbnRzKHt2YXJpYW50OiB2YXJpYW50T2JqZWN0LCBxdWFudGl0eTogMX0pLnRoZW4oY2FydCA9PiB7XG4gICAgKiAgIC8vIHRoZSBjYXJ0IGhhcyBjcmVhdGVkIGxpbmUgaXRlbXNcbiAgICAqIH0pO1xuICAgICogYGBgXG4gICAgKiBAbWV0aG9kIGNyZWF0ZUxpbmVJdGVtc0Zyb21WYXJpYW50c1xuICAgICogQHBhcmFtIHtPYmplY3R9IGl0ZW0gLSBPbmUgb3IgbW9yZSB2YXJpYW50c1xuICAgICogQHBhcmFtIHtQcm9kdWN0VmFyaWFudE1vZGVsfSBpdGVtLnZhcmlhbnQgLSB2YXJpYW50IG9iamVjdFxuICAgICogQHBhcmFtIHtOdW1iZXJ9IGl0ZW0ucXVhbnRpdHkgLSBxdWFudGl0eVxuICAgICogQHBhcmFtIHtPYmplY3R9IFttb3JlSXRlbXMuLi5dIC0gZnVydGhlciBvYmplY3RzIGRlZmluaW5nIGB2YXJpYW50YCBhbmQgYHF1YW50aXR5YCBtYXliZSBwYXNzZWQgaW5cbiAgICAqIEBwdWJsaWNcbiAgICAqIEByZXR1cm4ge1Byb21pc2V8Q2FydE1vZGVsfSAtIHRoZSBjYXJ0IGluc3RhbmNlLlxuICAqL1xuICBjcmVhdGVMaW5lSXRlbXNGcm9tVmFyaWFudHM6IGZ1bmN0aW9uIGNyZWF0ZUxpbmVJdGVtc0Zyb21WYXJpYW50cygpIHtcbiAgICB2YXIgbmV3TGluZUl0ZW1zID0gW10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGxpbmVJdGVtID0ge1xuICAgICAgICBpbWFnZTogaXRlbS52YXJpYW50LmltYWdlLFxuICAgICAgICBpbWFnZV92YXJpYW50czogaXRlbS52YXJpYW50LmltYWdlVmFyaWFudHMsXG4gICAgICAgIHZhcmlhbnRfaWQ6IGl0ZW0udmFyaWFudC5pZCxcbiAgICAgICAgcHJvZHVjdF9pZDogaXRlbS52YXJpYW50LnByb2R1Y3RJZCxcbiAgICAgICAgdGl0bGU6IGl0ZW0udmFyaWFudC5wcm9kdWN0VGl0bGUsXG4gICAgICAgIHF1YW50aXR5OiBwYXJzZUludChpdGVtLnF1YW50aXR5LCAxMCksXG4gICAgICAgIHByb3BlcnRpZXM6IGl0ZW0ucHJvcGVydGllcyB8fCB7fSxcbiAgICAgICAgdmFyaWFudF90aXRsZTogaXRlbS52YXJpYW50LnRpdGxlLFxuICAgICAgICBwcmljZTogaXRlbS52YXJpYW50LnByaWNlLFxuICAgICAgICBjb21wYXJlX2F0X3ByaWNlOiBpdGVtLnZhcmlhbnQuY29tcGFyZUF0UHJpY2UsXG4gICAgICAgIGdyYW1zOiBpdGVtLnZhcmlhbnQuZ3JhbXNcbiAgICAgIH07XG5cbiAgICAgIHNldEd1aWRGb3IobGluZUl0ZW0pO1xuXG4gICAgICByZXR1cm4gbGluZUl0ZW07XG4gICAgfSk7XG4gICAgdmFyIGV4aXN0aW5nTGluZUl0ZW1zID0gdGhpcy5hdHRycy5saW5lX2l0ZW1zO1xuXG4gICAgZXhpc3RpbmdMaW5lSXRlbXMucHVzaC5hcHBseShleGlzdGluZ0xpbmVJdGVtcywgX3RvQ29uc3VtYWJsZUFycmF5KG5ld0xpbmVJdGVtcykpO1xuXG4gICAgdmFyIGRlZHVwZWRMaW5lSXRlbXMgPSBleGlzdGluZ0xpbmVJdGVtcy5yZWR1Y2UoZnVuY3Rpb24gKGl0ZW1BY2MsIGl0ZW0pIHtcbiAgICAgIHZhciBtYXRjaGluZ0l0ZW0gPSBpdGVtQWNjLmZpbHRlcihmdW5jdGlvbiAoZXhpc3RpbmdJdGVtKSB7XG4gICAgICAgIHJldHVybiBleGlzdGluZ0l0ZW0udmFyaWFudF9pZCA9PT0gaXRlbS52YXJpYW50X2lkICYmIG9iamVjdHNFcXVhbChleGlzdGluZ0l0ZW0ucHJvcGVydGllcywgaXRlbS5wcm9wZXJ0aWVzKTtcbiAgICAgIH0pWzBdO1xuXG4gICAgICBpZiAobWF0Y2hpbmdJdGVtKSB7XG4gICAgICAgIG1hdGNoaW5nSXRlbS5xdWFudGl0eSA9IG1hdGNoaW5nSXRlbS5xdWFudGl0eSArIGl0ZW0ucXVhbnRpdHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtQWNjLnB1c2goaXRlbSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpdGVtQWNjO1xuICAgIH0sIFtdKTtcblxuICAgIC8vIFVzZXJzIG1heSBwYXNzIG5lZ2F0aXZlIG51bWJlcnMgYW5kIHJlbW92ZSBpdGVtcy4gVGhpcyBlbnN1cmVzIHRoZXJlJ3Mgbm9cbiAgICAvLyBpdGVtIHdpdGggYSBxdWFudGl0eSBvZiB6ZXJvIG9yIGxlc3MuXG4gICAgdGhpcy5hdHRycy5saW5lX2l0ZW1zID0gZGVkdXBlZExpbmVJdGVtcy5yZWR1Y2UoZnVuY3Rpb24gKGl0ZW1BY2MsIGl0ZW0pIHtcbiAgICAgIGlmIChpdGVtLnF1YW50aXR5ID49IDEpIHtcbiAgICAgICAgaXRlbUFjYy5wdXNoKGl0ZW0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXRlbUFjYztcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gdGhpcy51cGRhdGVNb2RlbCgpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAgKiBVcGRhdGUgYSBsaW5lIGl0ZW0gcXVhbnRpdHkgYmFzZWQgb24gbGluZSBpdGVtIGlkXG4gICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgKiAvLyBUaGlzIGV4YW1wbGUgY2hhbmdlcyB0aGUgcXVhbnRpdHkgZm9yIHRoZSBmaXJzdCBsaW5lIGl0ZW0gdG8gMlxuICAgICogY29uc3QgZmlyc3RMaW5lSXRlbUlkID0gY2FydC5saW5lSXRlbXNbMF0uaWQ7XG4gICAgKlxuICAgICogY2FydC51cGRhdGVMaW5lSXRlbShmaXJzdExpbmVJdGVtSWQsIDIpLnRoZW4oY2FydCA9PiB7XG4gICAgKiAgIC8vIHRoZSBjYXJ0IGhhcyB1cGRhdGVkIHRoZSBsaW5lIGl0ZW1cbiAgICAqIH0pO1xuICAgICogYGBgXG4gICAgKiBAbWV0aG9kIHVwZGF0ZUxpbmVJdGVtXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgLSBsaW5lIGl0ZW0gSURcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBxdWFudGl0eSAtIG5ldyBxdWFudGl0eSBmb3IgbGluZSBpdGVtXG4gICAgKiBAdGhyb3dzIHtFcnJvcn0gaWYgbGluZSBpdGVtIHdpdGggSUQgaXMgbm90IGluIGNhcnQuXG4gICAgKiBAcHVibGljXG4gICAgKiBAcmV0dXJuIHtQcm9taXNlfENhcnRNb2RlbH0gLSB0aGUgY2FydCBpbnN0YW5jZVxuICAqL1xuICB1cGRhdGVMaW5lSXRlbTogZnVuY3Rpb24gdXBkYXRlTGluZUl0ZW0oaWQsIHF1YW50aXR5KSB7XG4gICAgaWYgKHF1YW50aXR5IDwgMSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTGluZUl0ZW0oaWQpO1xuICAgIH1cblxuICAgIHZhciBsaW5lSXRlbSA9IHRoaXMubGluZUl0ZW1zLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0uaWQgPT09IGlkO1xuICAgIH0pWzBdO1xuXG4gICAgaWYgKGxpbmVJdGVtKSB7XG4gICAgICBsaW5lSXRlbS5xdWFudGl0eSA9IHF1YW50aXR5O1xuXG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVNb2RlbCgpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdsaW5lIGl0ZW0gd2l0aCBpZDogJyArIGlkICsgJyBub3QgZm91bmQgaW4gY2FydCMnICsgdGhpcy5pZCkpO1xuICAgIH0pO1xuICB9LFxuXG5cbiAgLyoqXG4gICAgKiBSZW1vdmUgYSBsaW5lIGl0ZW0gZnJvbSBjYXJ0IGJhc2VkIG9uIGxpbmUgaXRlbSBpZFxuICAgICogYGBgamF2YXNjcmlwdFxuICAgICogLy8gVGhpcyBleGFtcGxlIHJlbW92ZXMgdGhlIGZpcnN0IGxpbmUgaXRlbVxuICAgICogY29uc3QgZmlyc3RMaW5lSXRlbUlkID0gY2FydC5saW5lSXRlbXNbMF0uaWQ7XG4gICAgKlxuICAgICogY2FydC5yZW1vdmVMaW5lSXRlbShmaXJzdExpbmVJdGVtSWQpLnRoZW4oY2FydCA9PiB7XG4gICAgKiAgIC8vIHRoZSBjYXJ0IGhhcyByZW1vdmVkIHRoZSBsaW5lIGl0ZW1cbiAgICAqIH0pO1xuICAgICogYGBgXG4gICAgKlxuICAgICogQG1ldGhvZCByZW1vdmVMaW5lSXRlbVxuICAgICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gbGluZSBpdGVtIElEXG4gICAgKiBAdGhyb3dzIHtFcnJvcn0gaWYgbGluZSBpdGVtIHdpdGggSUQgaXMgbm90IGluIGNhcnQuXG4gICAgKiBAcHVibGljXG4gICAgKiBAcmV0dXJuIHtQcm9taXNlfENhcnRNb2RlbH0gLSB0aGUgY2FydCBpbnN0YW5jZVxuICAqL1xuICByZW1vdmVMaW5lSXRlbTogZnVuY3Rpb24gcmVtb3ZlTGluZUl0ZW0oaWQpIHtcbiAgICB2YXIgb2xkTGVuZ3RoID0gdGhpcy5saW5lSXRlbXMubGVuZ3RoO1xuICAgIHZhciBuZXdMaW5lSXRlbXMgPSB0aGlzLmxpbmVJdGVtcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLmlkICE9PSBpZDtcbiAgICB9KTtcbiAgICB2YXIgbmV3TGVuZ3RoID0gbmV3TGluZUl0ZW1zLmxlbmd0aDtcblxuICAgIGlmIChuZXdMZW5ndGggPCBvbGRMZW5ndGgpIHtcbiAgICAgIHRoaXMuYXR0cnMubGluZV9pdGVtcyA9IG5ld0xpbmVJdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uYXR0cnM7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlTW9kZWwoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcignbGluZSBpdGVtIHdpdGggaWQ6ICcgKyBpZCArICcgbm90IGZvdW5kIGluIGNhcnQjJyArIHRoaXMuaWQpKTtcbiAgICB9KTtcbiAgfSxcblxuXG4gIC8qKlxuICAgICogUmVtb3ZlIGFsbCBsaW5lIGl0ZW1zIGZyb20gY2FydFxuICAgICogYGBgamF2YXNjcmlwdFxuICAgICogLy8gVGhpcyBleGFtcGxlIHJlbW92ZXMgYWxsIGxpbmUgaXRlbXMgZnJvbSB0aGUgY2FydFxuICAgICogY2FydC5jbGVhckxpbmVJdGVtcygpLnRoZW4oY2FydCA9PiB7XG4gICAgKiAgIC8vIHRoZSBjYXJ0IGhhcyByZW1vdmVkIGFsbCBsaW5lIGl0ZW1zXG4gICAgKiB9KTtcbiAgICAqIEBtZXRob2QgY2xlYXJMaW5lSXRlbXNcbiAgICAqIEBwdWJsaWNcbiAgICAqIEByZXR1cm4ge1Byb21pc2V8Q2FydE1vZGVsfSAtIHRoZSBjYXJ0IGluc3RhbmNlXG4gICovXG4gIGNsZWFyTGluZUl0ZW1zOiBmdW5jdGlvbiBjbGVhckxpbmVJdGVtcygpIHtcbiAgICB0aGlzLmF0dHJzLmxpbmVfaXRlbXMgPSBbXTtcblxuICAgIHJldHVybiB0aGlzLnVwZGF0ZU1vZGVsKCk7XG4gIH0sXG5cblxuICAvKipcbiAgICAqIEZvcmNlIHVwZGF0ZSBvZiBjYXJ0IG1vZGVsIG9uIHNlcnZlci4gVGhpcyBmdW5jdGlvbiB3aWxsIG9ubHkgYmUgdXNlZCBpbiBhZHZhbmNlZCBzaXR1YXRpb25zIGFuZCBkb2VzIG5vdCBuZWVkIHRvIGJlIGNhbGxlZFxuICAgICogZXhwbGljaXRseSB0byB1cGRhdGUgbGluZSBpdGVtcy4gSXQgaXMgYXV0b21hdGljYWxseSBjYWxsZWQgYWZ0ZXJcbiAgICAqIHt7I2Nyb3NzTGluayBcIkNhcnRNb2RlbC9jcmVhdGVMaW5lSXRlbXNGcm9tVmFyaWFudHNcIn19e3svY3Jvc3NMaW5rfX0sXG4gICAgKiB7eyNjcm9zc0xpbmsgXCJDYXJ0TW9kZWwvdXBkYXRlTGluZUl0ZW1cIn19e3svY3Jvc3NMaW5rfX0sXG4gICAgKiB7eyNjcm9zc0xpbmsgXCJDYXJ0TW9kZWwvcmVtb3ZlTGluZUl0ZW1cIn19e3svY3Jvc3NMaW5rfX0sXG4gICAgKiBhbmQge3sjY3Jvc3NMaW5rIFwiQ2FydE1vZGVsL3JlbW92ZUxpbmVJdGVtXCJ9fXt7L2Nyb3NzTGlua319XG4gICAgKlxuICAgICogQG1ldGhvZCB1cGRhdGVNb2RlbFxuICAgICogQHB1YmxpY1xuICAgICogQHJldHVybiB7UHJvbWlzZXxDYXJ0TW9kZWx9IC0gdGhlIGNhcnQgaW5zdGFuY2VcbiAgKi9cbiAgdXBkYXRlTW9kZWw6IGZ1bmN0aW9uIHVwZGF0ZU1vZGVsKCkge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHRoaXMuc2hvcENsaWVudC51cGRhdGUoJ2NhcnRzJywgdGhpcykudGhlbihmdW5jdGlvbiAodXBkYXRlQ2FydCkge1xuICAgICAgYXNzaWduJDEoX3RoaXM1LmF0dHJzLCB1cGRhdGVDYXJ0LmF0dHJzKTtcblxuICAgICAgcmV0dXJuIF90aGlzNTtcbiAgICB9KTtcbiAgfVxufSwge1xuICBpZDoge1xuXG4gICAgLyoqXG4gICAgICAqIGdldCBJRCBmb3IgY3VycmVudCBjYXJ0XG4gICAgICAqIEBwcm9wZXJ0eSBpZFxuICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cnNbR1VJRF9LRVldO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgbGluZUl0ZW1zOiB7XG5cbiAgICAvKipcbiAgICAgICogR2V0IGFuIGBBcnJheWAgb2Yge3sjY3Jvc3NMaW5rIFwiQ2FydExpbmVJdGVtTW9kZWxcIn19Q2FydExpbmVJdGVtTW9kZWwnc3t7L2Nyb3NzTGlua319XG4gICAgICAqIEBwcm9wZXJ0eSBsaW5lSXRlbXNcbiAgICAgICogQHJlYWRPbmx5XG4gICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICh0aGlzLmF0dHJzLmxpbmVfaXRlbXMgfHwgW10pLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gbmV3IENhcnRMaW5lSXRlbU1vZGVsKGl0ZW0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBsaW5lSXRlbUNvdW50OiB7XG5cbiAgICAvKipcbiAgICAgICogR2V0cyB0aGUgdG90YWwgcXVhbnRpdHkgb2YgYWxsIGxpbmUgaXRlbXMuIEV4YW1wbGU6IHlvdSd2ZSBhZGRlZCB0d28gdmFyaWFudHMgd2l0aCBxdWFudGl0aWVzIDMgYW5kIDIuIGBsaW5lSXRlbUNvdW50YCB3aWxsIGJlIDUuXG4gICAgICAqIEBwcm9wZXJ0eSBsaW5lSXRlbUNvdW50XG4gICAgICAqIEByZWFkT25seVxuICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5saW5lSXRlbXMucmVkdWNlKGZ1bmN0aW9uICh0b3RhbCwgaXRlbSkge1xuICAgICAgICByZXR1cm4gdG90YWwgKyBpdGVtLnF1YW50aXR5O1xuICAgICAgfSwgMCk7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBzdWJ0b3RhbDoge1xuXG4gICAgLyoqXG4gICAgICAqIEdldCBjdXJyZW50IHN1YnRvdGFsIHByaWNlIGZvciBhbGwgbGluZSBpdGVtcy4gRXhhbXBsZTogdHdvIGl0ZW1zIGhhdmUgYmVlbiBhZGRlZCB0byB0aGUgY2FydCB0aGF0IGNvc3QgJDEuMjVcbiAgICAgICogdGhlbiB0aGUgc3VidG90YWwgd2lsbCBiZSBgMi41MGBcbiAgICAgICpcbiAgICAgICogQHByb3BlcnR5IHN1YnRvdGFsXG4gICAgICAqIEByZWFkT25seVxuICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgc3VidG90YWwgPSB0aGlzLmxpbmVJdGVtcy5yZWR1Y2UoZnVuY3Rpb24gKHJ1bm5pbmdUb3RhbCwgbGluZUl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHJ1bm5pbmdUb3RhbCArIHBhcnNlRmxvYXQobGluZUl0ZW0ubGluZV9wcmljZSk7XG4gICAgICB9LCAwKTtcblxuICAgICAgcmV0dXJuIHN1YnRvdGFsLnRvRml4ZWQoMik7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBjaGVja291dFVybDoge1xuXG4gICAgLyoqXG4gICAgICAqIEdldCBjaGVja291dCBVUkwgZm9yIGN1cnJlbnQgY2FydFxuICAgICAgKiBAcHJvcGVydHkgY2hlY2tvdXRVcmxcbiAgICAgICogQHJlYWRPbmx5XG4gICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZztcbiAgICAgIHZhciBiYXNlVXJsID0gJ2h0dHBzOi8vJyArIGNvbmZpZy5kb21haW4gKyAnL2NhcnQnO1xuICAgICAgdmFyIGdhID0gZ2xvYmFsVmFycy5nZXQoJ2dhJyk7XG5cbiAgICAgIHZhciB2YXJpYW50UGF0aCA9IHRoaXMubGluZUl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbS52YXJpYW50X2lkICsgJzonICsgaXRlbS5xdWFudGl0eTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgcXVlcnkgPSAnYWNjZXNzX3Rva2VuPScgKyBjb25maWcuYXBpS2V5ICsgJyZfZmQ9MCc7XG5cbiAgICAgIGlmICh0eXBlb2YgZ2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIGxpbmtlclBhcmFtID0gdm9pZCAwO1xuXG4gICAgICAgIGdhKGZ1bmN0aW9uICh0cmFja2VyKSB7XG4gICAgICAgICAgbGlua2VyUGFyYW0gPSB0cmFja2VyLmdldCgnbGlua2VyUGFyYW0nKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGxpbmtlclBhcmFtKSB7XG4gICAgICAgICAgcXVlcnkgKz0gJyYnICsgbGlua2VyUGFyYW07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJhc2VVcmwgKyAnLycgKyB2YXJpYW50UGF0aCArICc/JyArIHF1ZXJ5O1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfVxufSkpO1xuXG52YXIgQ2FydFNlcmlhbGl6ZXIgPSBDb3JlT2JqZWN0LmV4dGVuZCh7XG4gIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgfSxcbiAgcm9vdEtleUZvclR5cGU6IGZ1bmN0aW9uIHJvb3RLZXlGb3JUeXBlKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZS5zbGljZSgwLCAtMSk7XG4gIH0sXG4gIG1vZGVsRm9yVHlwZTogZnVuY3Rpb24gbW9kZWxGb3JUeXBlKCkgLyogdHlwZSAqL3tcbiAgICByZXR1cm4gQ2FydE1vZGVsO1xuICB9LFxuICBkZXNlcmlhbGl6ZVNpbmdsZTogZnVuY3Rpb24gZGVzZXJpYWxpemVTaW5nbGUodHlwZSkge1xuICAgIHZhciBzaW5nbGVQYXlsb2FkID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgbWV0YUF0dHJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICAgIHZhciBtb2RlbEF0dHJzID0gc2luZ2xlUGF5bG9hZFt0aGlzLnJvb3RLZXlGb3JUeXBlKHR5cGUpXTtcbiAgICB2YXIgbW9kZWwgPSB0aGlzLm1vZGVsRnJvbUF0dHJzKHR5cGUsIG1vZGVsQXR0cnMsIG1ldGFBdHRycyk7XG5cbiAgICByZXR1cm4gbW9kZWw7XG4gIH0sXG4gIG1vZGVsRnJvbUF0dHJzOiBmdW5jdGlvbiBtb2RlbEZyb21BdHRycyh0eXBlLCBhdHRycywgbWV0YUF0dHJzKSB7XG4gICAgdmFyIE1vZGVsID0gdGhpcy5tb2RlbEZvclR5cGUodHlwZSk7XG5cbiAgICBtZXRhQXR0cnMuY29uZmlnID0gdGhpcy5jb25maWc7XG5cbiAgICByZXR1cm4gbmV3IE1vZGVsKGF0dHJzLCBtZXRhQXR0cnMpO1xuICB9LFxuICBzZXJpYWxpemU6IGZ1bmN0aW9uIHNlcmlhbGl6ZSh0eXBlLCBtb2RlbCkge1xuICAgIHZhciByb290ID0gdGhpcy5yb290S2V5Rm9yVHlwZSh0eXBlKTtcbiAgICB2YXIgcGF5bG9hZCA9IHt9O1xuICAgIHZhciBhdHRycyA9IGFzc2lnbiQxKHt9LCBtb2RlbC5hdHRycyk7XG5cbiAgICBwYXlsb2FkW3Jvb3RdID0gYXR0cnM7XG5cbiAgICBkZWxldGUgYXR0cnMuYXR0cmlidXRlcztcblxuICAgIE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGF0dHJzW2tleV07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBkZWxldGUgYXR0cnNba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBwYXlsb2FkO1xuICB9XG59KTtcblxudmFyIFJlZmVyZW5jZU1vZGVsID0gQmFzZU1vZGVsLmV4dGVuZChPYmplY3QuZGVmaW5lUHJvcGVydGllcyh7XG5cbiAgLyoqXG4gICAgKiBDbGFzcyBmb3IgcmVmZXJlbmNlIG1vZGVsXG4gICAgKiBAcHJpdmF0ZVxuICAgICogQGNsYXNzIFJlZmVyZW5jZU1vZGVsXG4gICAgKiBAY29uc3RydWN0b3JcbiAgKi9cbiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yKGF0dHJzKSB7XG4gICAgaWYgKE9iamVjdC5rZXlzKGF0dHJzKS5pbmRleE9mKCdyZWZlcmVuY2VJZCcpIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIGtleSByZWZlcmVuY2VJZCBvZiByZWZlcmVuY2UuIFJlZmVyZW5jZXMgdG8gbnVsbCBhcmUgbm90IGFsbG93ZWQnKTtcbiAgICB9XG5cbiAgICB0aGlzWydzdXBlciddLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbn0sIHtcbiAgaWQ6IHtcblxuICAgIC8qKlxuICAgICAgKiBnZXQgdGhlIElEIGZvciBjdXJyZW50IHJlZmVyZW5jZSAobm90IHdoYXQgaXQgcmVmZXJzIHRvLCBidXQgaXRzIG93biB1bmlxdWUgaWRlbnRpZmllcilcbiAgICAgICogQHByb3BlcnR5IGlkXG4gICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzW0dVSURfS0VZXTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIHJlZmVyZW5jZUlkOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy5yZWZlcmVuY2VJZDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICB0aGlzLmF0dHJzLnJlZmVyZW5jZUlkID0gdmFsdWU7XG5cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH1cbn0pKTtcblxudmFyIFJlZmVyZW5jZVNlcmlhbGl6ZXIgPSBDb3JlT2JqZWN0LmV4dGVuZCh7XG4gIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgfSxcbiAgbW9kZWxGb3JUeXBlOiBmdW5jdGlvbiBtb2RlbEZvclR5cGUoKSAvKiB0eXBlICove1xuICAgIHJldHVybiBSZWZlcmVuY2VNb2RlbDtcbiAgfSxcbiAgZGVzZXJpYWxpemVTaW5nbGU6IGZ1bmN0aW9uIGRlc2VyaWFsaXplU2luZ2xlKHR5cGUpIHtcbiAgICB2YXIgc2luZ2xlUGF5bG9hZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIG1ldGFBdHRycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgICB2YXIgTW9kZWwgPSB0aGlzLm1vZGVsRm9yVHlwZSh0eXBlKTtcblxuICAgIHJldHVybiBuZXcgTW9kZWwoc2luZ2xlUGF5bG9hZCwgbWV0YUF0dHJzKTtcbiAgfSxcbiAgc2VyaWFsaXplOiBmdW5jdGlvbiBzZXJpYWxpemUodHlwZSwgbW9kZWwpIHtcbiAgICB2YXIgYXR0cnMgPSBhc3NpZ24kMSh7fSwgbW9kZWwuYXR0cnMpO1xuXG4gICAgcmV0dXJuIGF0dHJzO1xuICB9XG59KTtcblxudmFyIFN0b3JlID0gQ29yZU9iamVjdC5leHRlbmQoe1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5sb2NhbFN0b3JhZ2VBdmFpbGFibGUgPSB0aGlzLnN0b3JhZ2VBdmFpbGFibGUoJ2xvY2FsU3RvcmFnZScpO1xuICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgfSxcbiAgc2V0SXRlbTogZnVuY3Rpb24gc2V0SXRlbShrZXksIHZhbHVlKSB7XG4gICAgaWYgKHRoaXMubG9jYWxTdG9yYWdlQXZhaWxhYmxlKSB7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2FjaGVba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgZ2V0SXRlbTogZnVuY3Rpb24gZ2V0SXRlbShrZXkpIHtcbiAgICBpZiAodGhpcy5sb2NhbFN0b3JhZ2VBdmFpbGFibGUpIHtcbiAgICAgIHZhciBzdHJpbmdWYWx1ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHN0cmluZ1ZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlW2tleV0gfHwgbnVsbDtcbiAgICB9XG4gIH0sXG4gIHN0b3JhZ2VBdmFpbGFibGU6IGZ1bmN0aW9uIHN0b3JhZ2VBdmFpbGFibGUodHlwZSkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgc3RvcmFnZSA9IGdsb2JhbFZhcnMuZ2V0KHR5cGUpO1xuICAgICAgdmFyIHggPSAnX19zdG9yYWdlX3Rlc3RfXyc7XG5cbiAgICAgIHN0b3JhZ2Uuc2V0SXRlbSh4LCB4KTtcbiAgICAgIHN0b3JhZ2UucmVtb3ZlSXRlbSh4KTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG5cbnZhciBMb2NhbFN0b3JhZ2VBZGFwdGVyID0gQ29yZU9iamVjdC5leHRlbmQoe1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zdG9yZSA9IG5ldyBTdG9yZSgpO1xuICB9LFxuICBpZEtleUZvclR5cGU6IGZ1bmN0aW9uIGlkS2V5Rm9yVHlwZSgpIC8qIHR5cGUgKi97XG4gICAgcmV0dXJuIEdVSURfS0VZO1xuICB9LFxuICBmZXRjaFNpbmdsZTogZnVuY3Rpb24gZmV0Y2hTaW5nbGUodHlwZSwgaWQpIHtcbiAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgdmFsdWUgPSBfdGhpczYuc3RvcmUuZ2V0SXRlbShfdGhpczYuc3RvcmFnZUtleSh0eXBlLCBpZCkpO1xuXG4gICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcih0eXBlICsgJyMnICsgaWQgKyAnIG5vdCBmb3VuZCcpKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgIH0pO1xuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSh0eXBlLCBwYXlsb2FkKSB7XG4gICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHZhciBpZCA9IF90aGlzNy5pZGVudGlmeShwYXlsb2FkKTtcblxuICAgICAgX3RoaXM3LnN0b3JlLnNldEl0ZW0oX3RoaXM3LnN0b3JhZ2VLZXkodHlwZSwgaWQpLCBwYXlsb2FkKTtcbiAgICAgIHJlc29sdmUocGF5bG9hZCk7XG4gICAgfSk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKHR5cGUsIGlkLCBwYXlsb2FkKSB7XG4gICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF90aGlzOC5zdG9yZS5zZXRJdGVtKF90aGlzOC5zdG9yYWdlS2V5KHR5cGUsIGlkKSwgcGF5bG9hZCk7XG4gICAgICByZXNvbHZlKHBheWxvYWQpO1xuICAgIH0pO1xuICB9LFxuICBzdG9yYWdlS2V5OiBmdW5jdGlvbiBzdG9yYWdlS2V5KHR5cGUsIGlkKSB7XG4gICAgcmV0dXJuIHR5cGUgKyAnLicgKyBpZDtcbiAgfSxcbiAgaWRlbnRpZnk6IGZ1bmN0aW9uIGlkZW50aWZ5KHBheWxvYWQpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHBheWxvYWQpO1xuXG4gICAgaWYgKGtleXMubGVuZ3RoID09PSAxICYmIF90eXBlb2YocGF5bG9hZFtrZXlzWzBdXSkgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gc2V0R3VpZEZvcihwYXlsb2FkW2tleXNbMF1dKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2V0R3VpZEZvcihwYXlsb2FkKTtcbiAgfVxufSk7XG5cbi8qKlxuICogQG1vZHVsZSBzaG9waWZ5LWJ1eVxuICogQHN1Ym1vZHVsZSBzaG9wLWNsaWVudFxuICovXG5cbmZ1bmN0aW9uIGZldGNoRmFjdG9yeShmZXRjaFR5cGUsIHR5cGUpIHtcbiAgdmFyIGZ1bmMgPSB2b2lkIDA7XG5cbiAgc3dpdGNoIChmZXRjaFR5cGUpIHtcbiAgICBjYXNlICdhbGwnOlxuICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoQWxsKHR5cGUpO1xuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ29uZSc6XG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2guYXBwbHkodGhpcywgW3R5cGVdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncXVlcnknOlxuICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoUXVlcnkuYXBwbHkodGhpcywgW3R5cGVdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gZnVuYztcbn1cblxudmFyIFNob3BDbGllbnQgPSBDb3JlT2JqZWN0LmV4dGVuZChPYmplY3QuZGVmaW5lUHJvcGVydGllcyh7XG4gIC8qKlxuICAgKiBAY2xhc3MgU2hvcENsaWVudFxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcblxuICAgIHRoaXMuc2VyaWFsaXplcnMgPSB7XG4gICAgICBwcm9kdWN0czogTGlzdGluZ3NTZXJpYWxpemVyLFxuICAgICAgY29sbGVjdGlvbnM6IExpc3RpbmdzU2VyaWFsaXplcixcbiAgICAgIGNhcnRzOiBDYXJ0U2VyaWFsaXplcixcbiAgICAgIHJlZmVyZW5jZXM6IFJlZmVyZW5jZVNlcmlhbGl6ZXJcbiAgICB9O1xuXG4gICAgdGhpcy5hZGFwdGVycyA9IHtcbiAgICAgIHByb2R1Y3RzOiBMaXN0aW5nc0FkYXB0ZXIsXG4gICAgICBjb2xsZWN0aW9uczogTGlzdGluZ3NBZGFwdGVyLFxuICAgICAgY2FydHM6IExvY2FsU3RvcmFnZUFkYXB0ZXIsXG4gICAgICByZWZlcmVuY2VzOiBMb2NhbFN0b3JhZ2VBZGFwdGVyXG4gICAgfTtcbiAgfSxcblxuXG4gIGNvbmZpZzogbnVsbCxcblxuICAvKipcbiAgICogRmV0Y2ggYWxsIG9mIGEgYHR5cGVgLCByZXR1cm5pbmcgYSBwcm9taXNlLlxuICAgKlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNsaWVudC5mZXRjaEFsbCgncHJvZHVjdHMnKS50aGVuKHByb2R1Y3RzID0+IHtcbiAgICogICAvLyBkbyB0aGluZ3Mgd2l0aCBwcm9kdWN0c1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBtZXRob2QgZmV0Y2hBbGxcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIHBsdXJhbGl6ZWQgbmFtZSBvZiB0aGUgdHlwZSwgaW4gbG93ZXIgY2FzZS5cbiAgICogQHJldHVybiB7UHJvbWlzZXxBcnJheX0gYSBwcm9taXNlIHJlc29sdmluZyB3aXRoIGFuIGFycmF5IG9mIGB0eXBlYFxuICAgKi9cbiAgZmV0Y2hBbGw6IGZ1bmN0aW9uIGZldGNoQWxsKHR5cGUpIHtcbiAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgIHZhciBhZGFwdGVyID0gbmV3IHRoaXMuYWRhcHRlcnNbdHlwZV0odGhpcy5jb25maWcpO1xuXG4gICAgcmV0dXJuIGFkYXB0ZXIuZmV0Y2hNdWx0aXBsZSh0eXBlKS50aGVuKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICByZXR1cm4gX3RoaXM5LmRlc2VyaWFsaXplKHR5cGUsIHBheWxvYWQsIGFkYXB0ZXIsIG51bGwsIHsgbXVsdGlwbGU6IHRydWUgfSk7XG4gICAgfSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogRmV0Y2ggb25lIG9mIGEgYHR5cGVgLCByZXR1cm5pbmcgYSBwcm9taXNlLlxuICAgKlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNsaWVudC5mZXRjaCgncHJvZHVjdHMnLCAxMjMpLnRoZW4ocHJvZHVjdCA9PiB7XG4gICAqICAgLy8gZG8gdGhpbmdzIHdpdGggdGhlIHByb2R1Y3RcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAbWV0aG9kIGZldGNoXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBwbHVyYWxpemVkIG5hbWUgb2YgdGhlIHR5cGUsIGluIGxvd2VyIGNhc2UuXG4gICAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gaWQgYSB1bmlxdWUgaWRlbnRpZmllclxuICAgKiBAcmV0dXJuIHtQcm9taXNlfEJhc2VNb2RlbH0gYSBwcm9taXNlIHJlc29sdmluZyB3aXRoIGEgc2luZ2xlIGluc3RhbmNlIG9mXG4gICAqIGB0eXBlYCBleHByZXNzZWQgYXMgYSBgQmFzZU1vZGVsYC5cbiAgICovXG4gIGZldGNoOiBmdW5jdGlvbiBmZXRjaCh0eXBlLCBpZCkge1xuICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgIHZhciBhZGFwdGVyID0gbmV3IHRoaXMuYWRhcHRlcnNbdHlwZV0odGhpcy5jb25maWcpO1xuXG4gICAgcmV0dXJuIGFkYXB0ZXIuZmV0Y2hTaW5nbGUodHlwZSwgaWQpLnRoZW4oZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgIHJldHVybiBfdGhpczEwLmRlc2VyaWFsaXplKHR5cGUsIHBheWxvYWQsIGFkYXB0ZXIsIG51bGwsIHsgc2luZ2xlOiB0cnVlIH0pO1xuICAgIH0pO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEZldGNoIG1hbnkgb2YgYSBgdHlwZWAsIHRoYXQgbWF0Y2ggYHF1ZXJ5YFxuICAgKlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNsaWVudC5mZXRjaFF1ZXJ5KCdwcm9kdWN0cycsIHsgY29sbGVjdGlvbl9pZDogNDU2IH0pLnRoZW4ocHJvZHVjdHMgPT4ge1xuICAgKiAgIC8vIGRvIHRoaW5ncyB3aXRoIHRoZSBwcm9kdWN0c1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBtZXRob2QgZmV0Y2hRdWVyeVxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgcGx1cmFsaXplZCBuYW1lIG9mIHRoZSB0eXBlLCBpbiBsb3dlciBjYXNlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcXVlcnkgYSBxdWVyeSBzZW50IHRvIHRoZSBhcGkgc2VydmVyLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfEFycmF5fSBhIHByb21pc2UgcmVzb2x2aW5nIHdpdGggYW4gYXJyYXkgb2YgYHR5cGVgLlxuICAgKi9cbiAgZmV0Y2hRdWVyeTogZnVuY3Rpb24gZmV0Y2hRdWVyeSh0eXBlLCBxdWVyeSkge1xuICAgIHZhciBfdGhpczExID0gdGhpcztcblxuICAgIHZhciBhZGFwdGVyID0gbmV3IHRoaXMuYWRhcHRlcnNbdHlwZV0odGhpcy5jb25maWcpO1xuXG4gICAgcmV0dXJuIGFkYXB0ZXIuZmV0Y2hNdWx0aXBsZSh0eXBlLCBxdWVyeSkudGhlbihmdW5jdGlvbiAocGF5bG9hZCkge1xuICAgICAgcmV0dXJuIF90aGlzMTEuZGVzZXJpYWxpemUodHlwZSwgcGF5bG9hZCwgYWRhcHRlciwgbnVsbCwgeyBtdWx0aXBsZTogdHJ1ZSB9KTtcbiAgICB9KTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgYHR5cGVgLCBvcHRpb25hbGx5IGluY2x1ZGluZyBgbW9kZWxBdHRyc2AuXG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY2xpZW50LmNyZWF0ZSgnY2FydHMnLCB7IGxpbmVfaXRlbXM6IFsgLi4uIF0gfSkudGhlbihjYXJ0ID0+IHtcbiAgICogICAvLyBkbyB0aGluZ3Mgd2l0aCB0aGUgY2FydC5cbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgcGx1cmFsaXplZCBuYW1lIG9mIHRoZSB0eXBlLCBpbiBsb3dlciBjYXNlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gW21vZGVsQXR0cnM9e31dIGF0dHJpYnV0ZXMgcmVwcmVzZW50aW5nIHRoZSBpbnRlcm5hbCBzdGF0ZVxuICAgKiBvZiB0aGUgbW9kZWwgdG8gYmUgcGVyc2lzdGVkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfENhcnRNb2RlbH0gYSBwcm9taXNlIHJlc29sdmluZyB3aXRoIGEgc2luZ2xlIGluc3RhbmNlIG9mXG4gICAqIGB0eXBlYFxuICAgKi9cbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUodHlwZSkge1xuICAgIHZhciBfdGhpczEyID0gdGhpcztcblxuICAgIHZhciBtb2RlbEF0dHJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIHZhciBhZGFwdGVyID0gbmV3IHRoaXMuYWRhcHRlcnNbdHlwZV0odGhpcy5jb25maWcpO1xuICAgIHZhciBzZXJpYWxpemVyID0gbmV3IHRoaXMuc2VyaWFsaXplcnNbdHlwZV0odGhpcy5jb25maWcpO1xuICAgIHZhciBNb2RlbCA9IHNlcmlhbGl6ZXIubW9kZWxGb3JUeXBlKHR5cGUpO1xuICAgIHZhciBtb2RlbCA9IG5ldyBNb2RlbChtb2RlbEF0dHJzLCB7IHNob3BDbGllbnQ6IHRoaXMgfSk7XG4gICAgdmFyIGF0dHJzID0gc2VyaWFsaXplci5zZXJpYWxpemUodHlwZSwgbW9kZWwpO1xuXG4gICAgcmV0dXJuIGFkYXB0ZXIuY3JlYXRlKHR5cGUsIGF0dHJzKS50aGVuKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICByZXR1cm4gX3RoaXMxMi5kZXNlcmlhbGl6ZSh0eXBlLCBwYXlsb2FkLCBhZGFwdGVyLCBzZXJpYWxpemVyLCB7IHNpbmdsZTogdHJ1ZSB9KTtcbiAgICB9KTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgYHR5cGVgLCBvcHRpb25hbGx5IGluY2x1ZGluZyBgYXR0cnNgLlxuICAgKlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNsaWVudC5jcmVhdGUoJ2NhcnRzJywgeyBsaW5lX2l0ZW1zOiBbIC4uLiBdIH0pLnRoZW4oY2FydCA9PiB7XG4gICAqICAgLy8gZG8gdGhpbmdzIHdpdGggdGhlIGNhcnQuXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQG1ldGhvZCB1cGRhdGVcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIHBsdXJhbGl6ZWQgbmFtZSBvZiB0aGUgdHlwZSwgaW4gbG93ZXIgY2FzZS5cbiAgICogQHBhcmFtIHtCYXNlTW9kZWx9IHVwZGF0ZWRNb2RlbCBUaGUgbW9kZWwgdGhhdCByZXByZXNlbnRzIG5ldyBzdGF0ZSB0b1xuICAgKiB0byBwZXJzaXN0LlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfENhcnRNb2RlbH0gYSBwcm9taXNlIHJlc29sdmluZyB3aXRoIGEgc2luZ2xlIGluc3RhbmNlIG9mXG4gICAqIGB0eXBlYFxuICAgKi9cbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUodHlwZSwgdXBkYXRlZE1vZGVsKSB7XG4gICAgdmFyIF90aGlzMTMgPSB0aGlzO1xuXG4gICAgdmFyIGFkYXB0ZXIgPSB1cGRhdGVkTW9kZWwuYWRhcHRlcjtcbiAgICB2YXIgc2VyaWFsaXplciA9IHVwZGF0ZWRNb2RlbC5zZXJpYWxpemVyO1xuICAgIHZhciBzZXJpYWxpemVkTW9kZWwgPSBzZXJpYWxpemVyLnNlcmlhbGl6ZSh0eXBlLCB1cGRhdGVkTW9kZWwpO1xuICAgIHZhciBpZCA9IHVwZGF0ZWRNb2RlbC5hdHRyc1thZGFwdGVyLmlkS2V5Rm9yVHlwZSh0eXBlKV07XG5cbiAgICByZXR1cm4gYWRhcHRlci51cGRhdGUodHlwZSwgaWQsIHNlcmlhbGl6ZWRNb2RlbCkudGhlbihmdW5jdGlvbiAocGF5bG9hZCkge1xuICAgICAgcmV0dXJuIF90aGlzMTMuZGVzZXJpYWxpemUodHlwZSwgcGF5bG9hZCwgYWRhcHRlciwgc2VyaWFsaXplciwgeyBzaW5nbGU6IHRydWUgfSk7XG4gICAgfSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogUHJveHkgdG8gc2VyaWFsaXplcidzIGRlc2VyaWFsaXplLlxuICAgKlxuICAgKiBAbWV0aG9kIGRlc2VyaWFsaXplXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBwbHVyYWxpemVkIG5hbWUgb2YgdGhlIHR5cGUsIGluIGxvd2VyIGNhc2UuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkIFRoZSByYXcgcGF5bG9hZCByZXR1cm5lZCBieSB0aGUgYWRhcHRlci5cbiAgICogQHBhcmFtIHtCYXNlQWRhcHRlcn0gYWRhcHRlciBUaGUgYWRhcHRlciB0aGF0IHlpZWxkZWQgdGhlIHBheWxvYWQuXG4gICAqIEBwYXJhbSB7QmFzZVNlcmlhbGl6ZXJ9IGV4aXN0aW5nU2VyaWFsaXplciBUaGUgc2VyaWFsaXplciB0byBhdHRhY2guIElmXG4gICAqIG5vbmUgaXMgcGFzc2VkLCB0aGVuIGB0aGlzLmRlc2VyaWFsaXplYCB3aWxsIGNyZWF0ZSBvbmUgZm9yIHRoZSB0eXBlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zIHRoYXQgZGV0ZXJtaW5lIHdoaWNoIGRlc2VyaWFsaXphdGlvbiBtZXRob2QgdG9cbiAgICogdXNlLlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdHMubXVsdGlwbGUgdHJ1ZSB3aGVuIHRoZSBwYXlsb2FkIHJlcHJlc2VudHMgbXVsdGlwbGVcbiAgICogbW9kZWxzXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0cy5zaW5nbGUgdHJ1ZSB3aGVuIHRoZSBwYXlsb2FkIHJlcHJlc2VudHMgb25lIG1vZGVsLlxuICAgKiBAcmV0dXJuIHtCYXNlTW9kZWx9IGFuIGluc3RhbmNlIG9mIGB0eXBlYCByZWlmaWVkIGludG8gYSBtb2RlbC5cbiAgICovXG4gIGRlc2VyaWFsaXplOiBmdW5jdGlvbiBkZXNlcmlhbGl6ZSh0eXBlLCBwYXlsb2FkLCBhZGFwdGVyLCBleGlzdGluZ1NlcmlhbGl6ZXIpIHtcbiAgICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDoge307XG5cbiAgICB2YXIgc2VyaWFsaXplciA9IGV4aXN0aW5nU2VyaWFsaXplciB8fCBuZXcgdGhpcy5zZXJpYWxpemVyc1t0eXBlXSh0aGlzLmNvbmZpZyk7XG4gICAgdmFyIG1ldGEgPSB7IHNob3BDbGllbnQ6IHRoaXMsIGFkYXB0ZXI6IGFkYXB0ZXIsIHNlcmlhbGl6ZXI6IHNlcmlhbGl6ZXIsIHR5cGU6IHR5cGUgfTtcbiAgICB2YXIgc2VyaWFsaXplZFBheWxvYWQgPSB2b2lkIDA7XG5cbiAgICBpZiAob3B0cy5tdWx0aXBsZSkge1xuICAgICAgc2VyaWFsaXplZFBheWxvYWQgPSBzZXJpYWxpemVyLmRlc2VyaWFsaXplTXVsdGlwbGUodHlwZSwgcGF5bG9hZCwgbWV0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlcmlhbGl6ZWRQYXlsb2FkID0gc2VyaWFsaXplci5kZXNlcmlhbGl6ZVNpbmdsZSh0eXBlLCBwYXlsb2FkLCBtZXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VyaWFsaXplZFBheWxvYWQ7XG4gIH0sXG5cblxuICAvKipcbiAgICAqIENyZWF0ZXMgYSB7eyNjcm9zc0xpbmsgXCJDYXJ0TW9kZWxcIn19Q2FydE1vZGVse3svY3Jvc3NMaW5rfX0gaW5zdGFuY2UuXG4gICAgKlxuICAgICogYGBgamF2YXNjcmlwdFxuICAgICogY2xpZW50LmNyZWF0ZUNhcnQoKS50aGVuKGNhcnQgPT4ge1xuICAgICogICAvLyBkbyBzb21ldGhpbmcgd2l0aCBjYXJ0XG4gICAgKiB9KTtcbiAgICAqIGBgYFxuICAgICpcbiAgICAqIEBtZXRob2QgY3JlYXRlQ2FydFxuICAgICogQHB1YmxpY1xuICAgICogQHJldHVybiB7UHJvbWlzZXxDYXJ0TW9kZWx9IC0gbmV3IGNhcnQgaW5zdGFuY2UuXG4gICovXG4gIGNyZWF0ZUNhcnQ6IGZ1bmN0aW9uIGNyZWF0ZUNhcnQoKSB7XG4gICAgdmFyIHVzZXJBdHRycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICB2YXIgYmFzZUF0dHJzID0ge1xuICAgICAgbGluZV9pdGVtczogW11cbiAgICB9O1xuICAgIHZhciBhdHRycyA9IHt9O1xuXG4gICAgYXNzaWduJDEoYXR0cnMsIGJhc2VBdHRycyk7XG4gICAgYXNzaWduJDEoYXR0cnMsIHVzZXJBdHRycyk7XG5cbiAgICByZXR1cm4gdGhpcy5jcmVhdGUoJ2NhcnRzJywgYXR0cnMpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAgKiBVcGRhdGVzIGFuIGV4aXN0aW5nIHt7I2Nyb3NzTGluayBcIkNhcnRNb2RlbFwifX1DYXJ0TW9kZWx7ey9jcm9zc0xpbmt9fSBpbnN0YW5jZSBhbmQgcGVyc2lzdHMgaXQgdG8gbG9jYWxTdG9yYWdlLlxuICAgICpcbiAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAqIGNsaWVudC5jcmVhdGVDYXJ0KCkudGhlbihjYXJ0ID0+IHtcbiAgICAqICAgY2FydC5saW5lSXRlbXMgPSBbXG4gICAgKiAgICAgLy8gLi4uXG4gICAgKiAgIF07XG4gICAgKiAgIGNsaWVudC51cGRhdGVDYXJ0KGNhcnQpO1xuICAgICogfSk7XG4gICAgKiBgYGBcbiAgICAqXG4gICAgKiBAcGFyYW0ge0NhcnRNb2RlbH0gdXBkYXRlZENhcnQgYW4gdXBkYXRlZCBDYXJ0TW9kZWxcbiAgICAqIEBtZXRob2QgdXBkYXRlQ2FydFxuICAgICogQHByaXZhdGVcbiAgICAqIEByZXR1cm4ge1Byb21pc2V8Q2FydE1vZGVsfSAtIHVwZGF0ZWQgY2FydCBpbnN0YW5jZS5cbiAgKi9cbiAgdXBkYXRlQ2FydDogZnVuY3Rpb24gdXBkYXRlQ2FydCh1cGRhdGVkQ2FydCkge1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZSgnY2FydHMnLCB1cGRhdGVkQ2FydCk7XG4gIH0sXG5cblxuICAvKipcbiAgICogUmV0cmlldmUgYSBwcmV2aW91c2x5IGNyZWF0ZWQgY2FydCBieSBpdHMga2V5LlxuICAgKlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNsaWVudC5mZXRjaENhcnQoJ3Nob3BpZnktYnV5LjE0NTk4MDQ2OTkxMTguMicpLnRoZW4oY2FydCA9PiB7XG4gICAqICAgY29uc29sZS5sb2coY2FydCk7IC8vIFRoZSByZXRyaWV2ZWQgY2FydFxuICAgKiB9KTtcbiAgICpcbiAgICogQG1ldGhvZCBmZXRjaENhcnRcbiAgICogQHB1YmxpY1xuICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgVGhlIGNhcnQncyB1bmlxdWUgaWRlbnRpZmllclxuICAgKiBAcmV0dXJuIHtQcm9taXNlfENhcnRNb2RlbH0gVGhlIGNhcnQgbW9kZWwuXG4gICAqXG4gICAqL1xuICBmZXRjaENhcnQ6IGZldGNoRmFjdG9yeSgnb25lJywgJ2NhcnRzJyksXG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gYW4gYEFycmF5YCBvZiBwcm9kdWN0cyBmcm9tIHlvdXIgc3RvcmVcbiAgICogYGBgXG4gICAqIGNsaWVudC5mZXRjaEFsbFByb2R1Y3RzKClcbiAgICogLnRoZW4oZnVuY3Rpb24ocHJvZHVjdHMpIHtcbiAgICogICAvLyBhbGwgcHJvZHVjdHMgaW4gc3RvcmVcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAbWV0aG9kIGZldGNoQWxsUHJvZHVjdHNcbiAgICogQHB1YmxpY1xuICAgKiBAcmV0dXJuIHtQcm9taXNlfEFycmF5fSBUaGUgcHJvZHVjdCBtb2RlbHMuXG4gICAqL1xuICBmZXRjaEFsbFByb2R1Y3RzOiBmZXRjaEZhY3RvcnkoJ2FsbCcsICdwcm9kdWN0cycpLFxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGFuIGBBcnJheWAgb2YgY29sbGVjdGlvbnMgZnJvbSB5b3VyIHN0b3JlXG4gICAqIGBgYFxuICAgKiBjbGllbnQuZmV0Y2hBbGxDb2xsZWN0aW9ucygpXG4gICAqIC50aGVuKGZ1bmN0aW9uKGNvbGxlY3Rpb25zKSB7XG4gICAqXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQG1ldGhvZCBmZXRjaEFsbENvbGxlY3Rpb25zXG4gICAqIEBwdWJsaWNcbiAgICogQHJldHVybiB7UHJvbWlzZXxBcnJheX0gVGhlIGNvbGxlY3Rpb24gbW9kZWxzLlxuICAgKi9cbiAgZmV0Y2hBbGxDb2xsZWN0aW9uczogZmV0Y2hGYWN0b3J5KCdhbGwnLCAnY29sbGVjdGlvbnMnKSxcblxuICAvKipcbiAgICogRmV0Y2ggb25lIHByb2R1Y3QgYnkgaXRzIElELlxuICAgKlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNsaWVudC5mZXRjaFByb2R1Y3QoJzg1Njk5MTE1NTgnKS50aGVuKHByb2R1Y3QgPT4ge1xuICAgKiAgIGNvbnNvbGUubG9nKHByb2R1Y3QpOyAvLyBUaGUgcHJvZHVjdCB3aXRoIGFuIElEIG9mICc4NTY5OTExNTU4J1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBtZXRob2QgZmV0Y2hQcm9kdWN0XG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBpZCBhIHVuaXF1ZSBpZGVudGlmaWVyXG4gICAqIEByZXR1cm4ge1Byb21pc2V8QmFzZU1vZGVsfSBUaGUgcHJvZHVjdCBtb2RlbCB3aXRoIHRoZSBzcGVjaWZpZWQgSUQuXG4gICAqL1xuICBmZXRjaFByb2R1Y3Q6IGZldGNoRmFjdG9yeSgnb25lJywgJ3Byb2R1Y3RzJyksXG5cbiAgLyoqXG4gICAqIEZldGNoIG9uZSBjb2xsZWN0aW9uIGJ5IGl0cyBJRC5cbiAgICpcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjbGllbnQuZmV0Y2hDb2xsZWN0aW9uKCczMzY5MDM0OTQnKS50aGVuKGNvbGxlY3Rpb24gPT4ge1xuICAgKiAgIGNvbnNvbGUubG9nKGNvbGxlY3Rpb24pOyAvLyBUaGUgY29sbGVjdGlvbiB3aXRoIGFuIElEIG9mICczMzY5MDM0OTQnXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQG1ldGhvZCBmZXRjaENvbGxlY3Rpb25cbiAgICogQHB1YmxpY1xuICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGlkIGEgdW5pcXVlIGlkZW50aWZpZXJcbiAgICogQHJldHVybiB7UHJvbWlzZXxCYXNlTW9kZWx9IFRoZSBjb2xsZWN0aW9uIG1vZGVsIHdpdGggdGhlIHNwZWNpZmllZCBJRC5cbiAgICovXG4gIGZldGNoQ29sbGVjdGlvbjogZmV0Y2hGYWN0b3J5KCdvbmUnLCAnY29sbGVjdGlvbnMnKSxcblxuICAvKipcbiAgICogRmV0Y2hlcyBhIGxpc3Qgb2YgcHJvZHVjdHMgbWF0Y2hpbmcgYSBzcGVjaWZpZWQgcXVlcnkuXG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY2xpZW50LmZldGNoUXVlcnlQcm9kdWN0cyh7IGNvbGxlY3Rpb25faWQ6ICczMzY5MDM0OTQnLCB0YWc6IFsnaGF0cyddIH0pLnRoZW4ocHJvZHVjdHMgPT4ge1xuICAgKiAgIGNvbnNvbGUubG9nKHByb2R1Y3RzKTsgLy8gQW4gYXJyYXkgb2YgcHJvZHVjdHMgaW4gY29sbGVjdGlvbiAnMzM2OTAzNDk0JyBoYXZpbmcgdGhlIHRhZyAnaGF0cydcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKiBAbWV0aG9kIGZldGNoUXVlcnlQcm9kdWN0c1xuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBxdWVyeSBBIHF1ZXJ5IHNlbnQgdG8gdGhlIGFwaSBzZXJ2ZXIgY29udGFpbmluZyBvbmUgb3IgbW9yZSBvZjpcbiAgICogICBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IFtxdWVyeS5jb2xsZWN0aW9uX2lkXSBUaGUgSUQgb2YgYSBjb2xsZWN0aW9uIHRvIHJldHJpZXZlIHByb2R1Y3RzIGZyb21cbiAgICogICBAcGFyYW0ge0FycmF5fSBbcXVlcnkudGFnXSBBIGxpc3Qgb2YgdGFncyB0byBmaWx0ZXIgdGhlIHByb2R1Y3RzIGJ5LiBBY2NlcHRzIHVwIHRvIDEwIHRhZ3MuXG4gICAqICAgQHBhcmFtIHtBcnJheX0gW3F1ZXJ5LnByb2R1Y3RfaWRzXSBBIGxpc3Qgb2YgcHJvZHVjdCBJRHMgdG8gcmV0cmlldmVcbiAgICogICBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IFtxdWVyeS5wYWdlPTFdIFRoZSBwYWdlIG9mZnNldCBudW1iZXIgb2YgdGhlIGN1cnJlbnQgbG9va3VwIChiYXNlZCBvbiB0aGUgYGxpbWl0YClcbiAgICogICBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IFtxdWVyeS5saW1pdD01MF0gVGhlIG51bWJlciBvZiBwcm9kdWN0cyB0byByZXRyaWV2ZSBwZXIgcGFnZVxuICAgKiAgIEBwYXJhbSB7U3RyaW5nfSBbcXVlcnkuaGFuZGxlXSBUaGUgaGFuZGxlIG9mIHRoZSBwcm9kdWN0IHRvIGxvb2sgdXBcbiAgICogICBAcGFyYW0ge1N0cmluZ30gW3F1ZXJ5LnVwZGF0ZWRfYXRfbWluXSBQcm9kdWN0cyB1cGRhdGVkIHNpbmNlIHRoZSBzdXBwbGllZCB0aW1lc3RhbXAgKGZvcm1hdDogMjAwOC0xMi0zMSAwMzowMClcbiAgICogICBAcGFyYW0ge1N0cmluZ30gW3F1ZXJ5LnNvcnRfYnldIFdpbGwgbW9kaWZ5IGhvdyBwcm9kdWN0cyBhcmUgb3JkZXJlZC4gUG9zc2libGUgdmFsdWVzIGFyZTpcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcInVwZGF0ZWRfYXRcImAsIGBcImJlc3Qtc2VsbGluZ1wiYCwgYFwidGl0bGUtYXNjZW5kaW5nXCJgLCBgXCJ0aXRsZS1kZXNjZW5kaW5nXCJgLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFwicHJpY2UtZGVzY2VuZGluZ1wiYCwgYFwicHJpY2UtYXNjZW5kaW5nXCJgLCBgXCJjcmVhdGVkLWRlc2NlbmRpbmdcImAsIGBcImNyZWF0ZWQtYXNjZW5kaW5nXCJgLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgYFwiY29sbGVjdGlvbi1kZWZhdWx0XCJgLiBVc2luZyBgXCJjb2xsZWN0aW9uLWRlZmF1bHRcImAgbWVhbnMgdGhhdCBwcm9kdWN0cyB3aWxsIGJlIG9yZGVyZWRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB1c2luZyB0aGUgY3VzdG9tIG9yZGVyaW5nIGRlZmluZWQgaW4geW91ciBTaG9waWZ5IEFkbWluLiBEZWZhdWx0IHZhbHVlIGBcImNvbGxlY3Rpb24tZGVmYXVsdFwiYC5cbiAgICogQHJldHVybiB7UHJvbWlzZXxBcnJheX0gVGhlIHByb2R1Y3QgbW9kZWxzLlxuICAgKi9cbiAgZmV0Y2hRdWVyeVByb2R1Y3RzOiBmZXRjaEZhY3RvcnkoJ3F1ZXJ5JywgJ3Byb2R1Y3RzJyksXG5cbiAgLyoqXG4gICAqIEZldGNoZXMgYSBsaXN0IG9mIGNvbGxlY3Rpb25zIG1hdGNoaW5nIGEgc3BlY2lmaWVkIHF1ZXJ5LlxuICAgKlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNsaWVudC5mZXRjaFF1ZXJ5Q29sbGVjdGlvbnMoe3BhZ2U6IDIsIGxpbWl0OiAyMH0pLnRoZW4oY29sbGVjdGlvbnMgPT4ge1xuICAgKiAgIGNvbnNvbGUubG9nKGNvbGxlY3Rpb25zKTsgLy8gQW4gYXJyYXkgb2YgY29sbGVjdGlvbiByZXNvdXJjZXNcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAbWV0aG9kIGZldGNoUXVlcnlDb2xsZWN0aW9uc1xuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBxdWVyeSBhIHF1ZXJ5IHNlbnQgdG8gdGhlIGFwaSBzZXJ2ZXIuXG4gICAqICAgQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBbcXVlcnkucGFnZT0xXSB0aGUgcGFnZSBvZmZzZXQgbnVtYmVyIG9mIHRoZSBjdXJyZW50IGxvb2t1cCAoYmFzZWQgb24gdGhlIGBsaW1pdGApXG4gICAqICAgQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBbcXVlcnkubGltaXQ9NTBdIHRoZSBudW1iZXIgb2YgY29sbGVjdGlvbnMgdG8gcmV0cmlldmUgcGVyIHBhZ2VcbiAgICogQHJldHVybiB7UHJvbWlzZXxBcnJheX0gVGhlIGNvbGxlY3Rpb24gbW9kZWxzLlxuICAgKi9cbiAgZmV0Y2hRdWVyeUNvbGxlY3Rpb25zOiBmZXRjaEZhY3RvcnkoJ3F1ZXJ5JywgJ2NvbGxlY3Rpb25zJyksXG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGxvb2tzIHVwIGEgcmVmZXJlbmNlIGluIGxvY2FsU3RvcmFnZSB0byB0aGUgbW9zdCByZWNlbnQgY2FydC5cbiAgICogSWYgb25lIGlzIG5vdCBmb3VuZCwgY3JlYXRlcyBvbmUuIElmIHRoZSBjYXJ0IHRoZSByZWZlcmVuY2UgcG9pbnRzIHRvXG4gICAqIGRvZXNuJ3QgZXhpc3QsIGNyZWF0ZSBvbmUgYW5kIHN0b3JlIHRoZSBuZXcgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNsaWVudC5mZXRjaFJlY2VudENhcnQoKS50aGVuKGNhcnQgPT4ge1xuICAgKiAgLy8gZG8gc3R1ZmYgd2l0aCB0aGUgY2FydFxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBtZXRob2QgZmV0Y2hSZWNlbnRDYXJ0XG4gICAqIEBwdWJsaWNcbiAgICogQHJldHVybiB7UHJvbWlzZXxDYXJ0TW9kZWx9IFRoZSBjYXJ0LlxuICAgKi9cbiAgZmV0Y2hSZWNlbnRDYXJ0OiBmdW5jdGlvbiBmZXRjaFJlY2VudENhcnQoKSB7XG4gICAgdmFyIF90aGlzMTQgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goJ3JlZmVyZW5jZXMnLCB0aGlzLmNvbmZpZy5kb21haW4gKyAnLnJlY2VudC1jYXJ0JykudGhlbihmdW5jdGlvbiAocmVmZXJlbmNlKSB7XG4gICAgICB2YXIgY2FydElkID0gcmVmZXJlbmNlLnJlZmVyZW5jZUlkO1xuXG4gICAgICByZXR1cm4gX3RoaXMxNC5mZXRjaENhcnQoY2FydElkKTtcbiAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMxNC5jcmVhdGVDYXJ0KCkudGhlbihmdW5jdGlvbiAoY2FydCkge1xuICAgICAgICB2YXIgcmVmQXR0cnMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlSWQ6IGNhcnQuaWRcbiAgICAgICAgfTtcblxuICAgICAgICByZWZBdHRyc1tHVUlEX0tFWV0gPSBfdGhpczE0LmNvbmZpZy5kb21haW4gKyAnLnJlY2VudC1jYXJ0JztcblxuICAgICAgICBfdGhpczE0LmNyZWF0ZSgncmVmZXJlbmNlcycsIHJlZkF0dHJzKTtcblxuICAgICAgICByZXR1cm4gY2FydDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59LCB7XG4gIHNlcmlhbGl6ZXJzOiB7XG4gICAgLyoqXG4gICAgICogQGF0dHJpYnV0ZVxuICAgICAqIEBkZWZhdWx0IHtcbiAgICAgKiAgcHJvZHVjdHM6IExpc3RpbmdzQWRhcHRlcixcbiAgICAgKiAgY29sbGVjdGlvbnM6IExpc3RpbmdzQWRhcHRlcixcbiAgICAgKiAgY2FydHM6IENhcnRBZGFwdGVyXG4gICAgICogfVxuICAgICAqIEB0eXBlIE9iamVjdFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICAvLyBQcmV2ZW50IGxlYWt5IHN0YXRlXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gYXNzaWduJDEoe30sIHRoaXMuc2hhZG93ZWRTZXJpYWxpemVycyk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZXMpIHtcbiAgICAgIHRoaXMuc2hhZG93ZWRTZXJpYWxpemVycyA9IGFzc2lnbiQxKHt9LCB2YWx1ZXMpO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgYWRhcHRlcnM6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBhc3NpZ24kMSh7fSwgdGhpcy5zaGFkb3dlZEFkYXB0ZXJzKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlcykge1xuICAgICAgdGhpcy5zaGFkb3dlZEFkYXB0ZXJzID0gYXNzaWduJDEoe30sIHZhbHVlcyk7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9XG59KSk7XG5cbi8qIGdsb2JhbHMgcmVxdWlyZSAqL1xuXG5pZiAoaXNOb2RlTGlrZUVudmlyb25tZW50KCkpIHtcbiAgLyogdGhpcyBpbmRpcmVjdGlvbiBpcyBuZWVkZWQgYmVjYXVzZSBiYWJlbCB0aHJvd3MgZXJyb3JzIHdoZW5cbiAgICogdHJhbnNwaWxpbmcgcmVxdWlyZSgnbm9kZS1mZXRjaCcpIHVzaW5nIGBhbWRgIHBsdWdpbiB3aXRoIGJhYmVsNlxuICAgKi9cbiAgdmFyIGxvY2FsUmVxdWlyZSA9IHJlcXVpcmU7XG4gIHZhciBfZmV0Y2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0Mik7XG5cbiAgZ2xvYmFsVmFycy5zZXQoJ2ZldGNoJywgX2ZldGNoKTtcbiAgZ2xvYmFsVmFycy5zZXQoJ1Jlc3BvbnNlJywgX2ZldGNoLlJlc3BvbnNlKTtcbn1cblxuLyogZ2xvYmFsIEJ1ZmZlciAqL1xuXG5pZiAoaXNOb2RlTGlrZUVudmlyb25tZW50KCkpIHtcbiAgZ2xvYmFsVmFycy5zZXQoJ2J0b2EnLCBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoc3RyaW5nKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEBtb2R1bGUgc2hvcGlmeS1idXlcbiAqIEBzdWJtb2R1bGUgc2hvcGlmeVxuICovXG5cbi8qKlxuICogYFNob3BpZnlCdXlgIG9ubHkgZGVmaW5lcyBvbmUgZnVuY3Rpb24ge3sjY3Jvc3NMaW5rIFwiU2hvcGlmeUJ1eS9idWlsZENsaWVudFwifX17ey9jcm9zc0xpbmt9fSB3aGljaCBjYW5cbiAqIGJlIHVzZWQgdG8gYnVpbGQgYSB7eyNjcm9zc0xpbmsgXCJTaG9wQ2xpZW50XCJ9fXt7L2Nyb3NzTGlua319IHRvIHF1ZXJ5IHlvdXIgc3RvcmUgdXNpbmcgdGhlXG4gKiBwcm92aWRlZFxuICoge3sjY3Jvc3NMaW5rIFwiU2hvcGlmeUJ1eS9idWlsZENsaWVudC9jb25maWdBdHRyczphcGlLZXlcIn19YGFwaUtleWB7ey9jcm9zc0xpbmt9fSxcbiAqIHt7I2Nyb3NzTGluayBcIlNob3BpZnlCdXkvYnVpbGRDbGllbnQvY29uZmlnQXR0cnM6YXBwSWRcIn19YGFwcElkYHt7L2Nyb3NzTGlua319LFxuICogYW5kIHt7I2Nyb3NzTGluayBcIlNob3BpZnlCdXkvYnVpbGRDbGllbnQvY29uZmlnQXR0cnM6ZG9tYWluXCJ9fWBkb21haW5ge3svY3Jvc3NMaW5rfX0uXG4gKiBAY2xhc3MgU2hvcGlmeUJ1eVxuICogQHN0YXRpY1xuICovXG52YXIgU2hvcGlmeSA9IHtcbiAgU2hvcENsaWVudDogU2hvcENsaWVudCxcbiAgQ29uZmlnOiBDb25maWcsXG4gIHZlcnNpb246IHZlcnNpb24sXG4gIE5PX0lNQUdFX1VSSTogTk9fSU1BR0VfVVJJLFxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBTaG9wQ2xpZW50LiBUaGlzIGlzIHRoZSBtYWluIGVudHJ5IHBvaW50IHRvIHRoZSBTREsuXG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgY2xpZW50ID0gU2hvcGlmeUJ1eS5idWlsZENsaWVudCh7XG4gICAqICAgYXBpS2V5OiAnYmYwODFlODYwYmM5ZGMxY2UwNjU0ZmRmYmMyMDg5MmQnLFxuICAgKiAgIGFwcElkOiA2LFxuICAgKiAgIG15U2hvcGlmeURvbWFpbjogJ3lvdXItc2hvcC1zdWJkb21haW4ubXlzaG9waWZ5LmNvbScsIC8vRGVwcmVjYXRlZC4gVXNlIGBkb21haW5gIGluc3RlYWRcbiAgICogICBkb21haW46ICdlbWJlZHMubXlzaG9waWZ5LmNvbSdcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAbWV0aG9kIGJ1aWxkQ2xpZW50XG4gICAqIEBmb3IgU2hvcGlmeUJ1eVxuICAgKiBAc3RhdGljXG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ0F0dHJzIEFuIG9iamVjdCBvZiByZXF1aXJlZCBjb25maWcgZGF0YSBzdWNoIGFzOiBgYXBpS2V5YCwgYGFwcElkYCwgYGRvbWFpbmBcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNvbmZpZ0F0dHJzLmFwaUtleSBBbiBBUEkgS2V5IGZvciB5b3VyIHN0b3JlLiBEb2N1bWVudGF0aW9uIGhvdyB0byBnZXQgYW4gQVBJIEtleTpcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vYXBpL3Nka3MvanMtYnV5LXNkay9nZXR0aW5nLXN0YXJ0ZWQjYXBpLWtleVxuICAgKiBAcGFyYW0ge1N0cmluZ30gY29uZmlnQXR0cnMuYXBwSWQgVHlwaWNhbGx5IHdpbGwgYmUgNiB3aGljaCBpcyB0aGUgQnV5IEJ1dHRvbiBBcHAgSWQuIEZvciBtb3JlIGluZm8gb24gQXBwIElkIHNlZTpcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS9hcGkvc2Rrcy9qcy1idXktc2RrL2dldHRpbmctc3RhcnRlZCNhcHAtaWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNvbmZpZ0F0dHJzLmRvbWFpbiBZb3VyIHNob3AncyBmdWxsIGBteXNob3BpZnkuY29tYCBkb21haW4uIEZvciBleGFtcGxlOiBgZW1iZWRzLm15c2hvcGlmeS5jb21gXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb25maWdBdHRycy5teVNob3BpZnlEb21haW4gWW91IHNob3AncyBgbXlzaG9waWZ5LmNvbWAgZG9tYWluLiBbZGVwcmVjYXRlZCBVc2UgY29uZmlnQXR0cnMuZG9tYWluXVxuICAgKiBAcmV0dXJuIHtTaG9wQ2xpZW50fSBhIGNsaWVudCBmb3IgdGhlIHNob3AgdXNpbmcgeW91ciBhcGkgY3JlZGVudGlhbHMgd2hpY2ggeW91IGNhbiB1c2UgdG8gcXVlcnkgeW91ciBzdG9yZS5cbiAgICovXG4gIGJ1aWxkQ2xpZW50OiBmdW5jdGlvbiBidWlsZENsaWVudCgpIHtcbiAgICB2YXIgY29uZmlnQXR0cnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgdmFyIGNvbmZpZyA9IG5ldyB0aGlzLkNvbmZpZyhjb25maWdBdHRycyk7XG5cbiAgICByZXR1cm4gbmV3IHRoaXMuU2hvcENsaWVudChjb25maWcpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNob3BpZnk7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2KSwgX193ZWJwYWNrX3JlcXVpcmVfXygxNzApLkJ1ZmZlcikpXG5cbi8qKiovIH0pLFxuLyogMzM2ICovLFxuLyogMzM3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbnZhciBjYW1lbDJoeXBoZW4gPSBmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHJcbiAgICAgICAgICAucmVwbGFjZSgvW0EtWl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gJy0nICsgbWF0Y2gudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50b0xvd2VyQ2FzZSgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbDJoeXBoZW47XG5cbi8qKiovIH0pLFxuLyogMzM4ICovLFxuLyogMzM5ICovLFxuLyogMzQwICovLFxuLyogMzQxICovLFxuLyogMzQyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8qIChpZ25vcmVkKSAqL1xuXG4vKioqLyB9KSxcbi8qIDM0MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3REb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfcmVhY3RSZWR1eCA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBfc2hvcGlmeUFQSSA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xuXG52YXIgX3Nob3BpZnlBUEkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hvcGlmeUFQSSk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMTUwKTtcblxudmFyIF9yb3V0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1MSk7XG5cbnZhciBfcm91dGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JvdXRlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjYXJ0QWN0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xudmFyIHByb2R1Y3RBY3Rpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCk7XG52YXIgY29sbGVjdGlvbkFjdGlvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KTtcbnZhciBzdG9yZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDkpLmNvbmZpZ3VyZSgpO1xuXG5cbi8vIHN1YnNjcmliZSB0byB0aGUgcmVkdXggc3RvcmVcbnN0b3JlLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIGNvbnNvbGUubG9nKCdOZXcgc3RhdGUnLCBzdGF0ZSk7XG59KTtcblxuLy8gYWRkIHByb2R1Y3RzIGFuZCBjb2xsZWN0aW9ucyB0byBzdG9yZVxuc3RvcmUuZGlzcGF0Y2gocHJvZHVjdEFjdGlvbnMuc3RhcnRBZGRQcm9kdWN0cygpKTtcbnN0b3JlLmRpc3BhdGNoKGNvbGxlY3Rpb25BY3Rpb25zLnN0YXJ0QWRkQ29sbGVjdGlvbnMoKSk7XG5cbi8vIGNyZWF0ZSBzaG9waWZ5IGNhcnQgaW5zdGFuY2UgYmFzZWQgb24gbGFzdCBzZXNzaW9uIChiYXNlZCBvbiBsb2NhbFN0b3JhZ2UpXG5pZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhc3RDYXJ0SWQnKSkge1xuICBfc2hvcGlmeUFQSTIuZGVmYXVsdC5yZXN0b3JlQ2FydCgpLnRoZW4oZnVuY3Rpb24gKGxvY2FsQ2FydCkge1xuICAgIHN0b3JlLmRpc3BhdGNoKHsgdHlwZTogJ1NFVF9JTklUSUFMX0NBUlRfU1RBVEUnLCBsb2NhbENhcnQ6IGxvY2FsQ2FydCB9KTtcbiAgfSk7XG59IGVsc2Uge1xuICBfc2hvcGlmeUFQSTIuZGVmYXVsdC5jcmVhdGVDYXJ0KCkudGhlbihmdW5jdGlvbiAobG9jYWxDYXJ0KSB7XG4gICAgc3RvcmUuZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0lOSVRJQUxfQ0FSVF9TVEFURScsIGxvY2FsQ2FydDogbG9jYWxDYXJ0IH0pO1xuICB9KTtcbn1cblxuLy8gQXBwIGNzc1xuLy8gcmVxdWlyZSgnc3R5bGUhY3NzIXNhc3MhYXBwbGljYXRpb25TdHlsZXMnKVxuXG5fcmVhY3REb20yLmRlZmF1bHQucmVuZGVyKF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICBfcmVhY3RSZWR1eC5Qcm92aWRlcixcbiAgeyBzdG9yZTogc3RvcmUgfSxcbiAgX3JvdXRlcjIuZGVmYXVsdFxuKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpKTtcblxuLyoqKi8gfSlcbl0sWzM0M10pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBidW5kbGUubWluLjZmZDZhYzI0ZTU0OWYyN2IxODE0LmpzIiwiaW1wb3J0IHNob3BpZnlBUEkgZnJvbSAnc2hvcGlmeUFQSSc7XG5cbmV4cG9ydCB2YXIgc3RhcnRBZGRvclVwZGF0ZUNhcnRJdGVtID0gKHByb2R1Y3RWYXJpYW50LCBxdWFudGl0eSkgPT4ge1xuICByZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xuICAgIGxldCBjYXJ0ID0gZ2V0U3RhdGUoKS5jYXJ0O1xuICAgIGxldCB2YXJpYW50SWQ7XG5cbiAgICAvLyBhc3NpZ24gdmFyaWFudCBpZCBiYXNlZCBvbiBpcyBwcm9kdWN0IG9yIGNhcnQgbGluZSBpdGVtXG4gICAgaWYocHJvZHVjdFZhcmlhbnQudmFyaWFudF9pZCl7XG4gICAgICB2YXJpYW50SWQgPSBwcm9kdWN0VmFyaWFudC52YXJpYW50X2lkO1xuICAgIH1lbHNle1xuICAgICAgdmFyaWFudElkID0gcHJvZHVjdFZhcmlhbnQuaWQ7XG4gICAgfVxuXG4gICAgbGV0IGNhcnRMaW5lSXRlbSA9IGZpbmRDYXJ0SXRlbUJ5VmFyaWFudElkKHZhcmlhbnRJZCk7XG5cbiAgICAvLyBmdW5jdGlvbiB0byBjaGVjayBpZiBwcm9kdWN0IHZhcmlhbnQgYWxyZWFkeSBleGlzdHMgaW4gY2FydFxuICAgIGZ1bmN0aW9uIGZpbmRDYXJ0SXRlbUJ5VmFyaWFudElkKHZhcmlhbnRJZCkge1xuICAgICAgcmV0dXJuIGNhcnQubGluZUl0ZW1zLmZpbHRlcigoaXRlbSkgPT4ge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnaXRlbS52YXJpYW50X2lkOiAnLCBpdGVtLnZhcmlhbnRfaWQpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygndmFyaWFudElkOiAnLCB2YXJpYW50SWQpO1xuICAgICAgICByZXR1cm4gKGl0ZW0udmFyaWFudF9pZCA9PT0gdmFyaWFudElkKTtcbiAgICAgIH0pWzBdO1xuICAgIH1cblxuICAgIGlmIChjYXJ0TGluZUl0ZW0pIHtcbiAgICAgIGRpc3BhdGNoKHVwZGF0ZUNhcnRJdGVtKGNhcnRMaW5lSXRlbSwgcGFyc2VJbnQocXVhbnRpdHkpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpc3BhdGNoKGFkZFRvQ2FydChwcm9kdWN0VmFyaWFudCwgcXVhbnRpdHkpKTtcbiAgICB9XG5cbiAgICAvLyB1cGRhdGUgdGhlIGNhcnQgc3VidG90YWxcbiAgICBkaXNwYXRjaCh1cGRhdGVDYXJ0U3VidG90YWwoKSk7XG5cbiAgICAvLyAgdXBkYXRlIHRoZSBjYXJ0IGl0ZW1zIGNvdW50XG4gICAgZGlzcGF0Y2godXBkYXRlQ2FydEl0ZW1zQ291bnQocXVhbnRpdHkpKTtcbiAgfVxufTtcblxuLy8gYWRkIHByb2R1Y3QgdG8gY2FydFxuZXhwb3J0IHZhciBhZGRUb0NhcnQgPSAocHJvZHVjdFZhcmlhbnQsIHF1YW50aXR5KSA9PiB7XG4gIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XG4gICAgc2hvcGlmeUFQSS5jYXJ0LmNyZWF0ZUxpbmVJdGVtc0Zyb21WYXJpYW50cyh7IHZhcmlhbnQ6IHByb2R1Y3RWYXJpYW50LCBxdWFudGl0eTogcXVhbnRpdHkgfSkudGhlbihmdW5jdGlvbih1cGRhdGVkQ2FydCkge1xuICAgICAgbGV0IHVwZGF0ZWRDYXJ0SXRlbXMgPSB1cGRhdGVkQ2FydC5saW5lSXRlbXM7XG4gICAgICBkaXNwYXRjaCh7IHR5cGU6ICdVUERBVEVfQ0FSVF9JVEVNUycsIHVwZGF0ZWRDYXJ0SXRlbXMgfSk7XG4gICAgICBkaXNwYXRjaChvcGVuQ2FydCgpKTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3JzKSB7XG4gICAgICBjb25zb2xlLmxvZygnRmFpbGVkIHRvIGFkZFRvQ2FydCcsIGVycm9ycyk7XG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIHVwZGF0ZSBjYXJ0IHN1YnRvdGFsXG5leHBvcnQgdmFyIHVwZGF0ZUNhcnRTdWJ0b3RhbCA9ICgpID0+IHtcbiAgcmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcbiAgICBsZXQgbmV3U3VidG90YWwgPSBzaG9waWZ5QVBJLmNhcnQuc3VidG90YWw7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnVVBEQVRFX0NBUlRfU1VCVE9UQUwnLCBuZXdTdWJ0b3RhbCB9KTtcbiAgfVxufTtcblxuLy8gdXBkYXRlIGNhcnQgaXRlbXMgY291bnRcbmV4cG9ydCB2YXIgdXBkYXRlQ2FydEl0ZW1zQ291bnQgPSAocXVhbnRpdHkpID0+IHtcbiAgcmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcbiAgICBsZXQgY2FydCA9IGdldFN0YXRlKCkuY2FydDtcbiAgICBsZXQgdXBkYXRlZENhcnRJdGVtc0NvdW50ID0gcGFyc2VJbnQoY2FydC5saW5lSXRlbXNDb3VudCkgKyBwYXJzZUludChxdWFudGl0eSk7XG4gICAgY29uc29sZS5sb2coJ25ldyBxdWFudGl0eTogJywgcXVhbnRpdHkpO1xuICAgIGNvbnNvbGUubG9nKCdvbGQgcXVhbnRpdHk6ICcsIGNhcnQubGluZUl0ZW1zQ291bnQpO1xuICAgIGNvbnNvbGUubG9nKCd1cGRhdGVkQ2FydEl0ZW1zQ291bnQ6ICcsIHVwZGF0ZWRDYXJ0SXRlbXNDb3VudCk7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnVVBEQVRFX0NBUlRfSVRFTVNfQ09VTlQnLCB1cGRhdGVkQ2FydEl0ZW1zQ291bnQgfSk7XG5cbiAgICBpZihwYXJzZUludCh1cGRhdGVkQ2FydEl0ZW1zQ291bnQpIDwgMSkge1xuICAgICAgZGlzcGF0Y2goY2xvc2VDYXJ0KCkpO1xuICAgIH1lbHNle1xuICAgICAgZGlzcGF0Y2gob3BlbkNhcnQoKSk7XG4gICAgfVxuICB9XG59O1xuXG4vLyB1cGRhdGUgYSBjYXJ0IGl0ZW1cbmV4cG9ydCB2YXIgdXBkYXRlQ2FydEl0ZW0gPSAoc2VsZWN0ZWRDYXJ0SXRlbSwgcXVhbnRpdHkpID0+IHtcbiAgcmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcbiAgICBsZXQgY2FydCA9IGdldFN0YXRlKCkuY2FydDtcbiAgICBsZXQgdXBkYXRlZFF1YW50aXR5ID0gc2VsZWN0ZWRDYXJ0SXRlbS5xdWFudGl0eSArIHF1YW50aXR5O1xuICAgIGxldCB1cGRhdGVkQ2FydEl0ZW1zID0gW107XG5cbiAgICAvLyBpZiB0aGUgbmV3IHF1YW50aXR5IGlzIG1vcmUgdGhhbiAwLCBrZWVwIGl0IGluIHRoZSBuZXcgYXJyYXlcbiAgICBjYXJ0LmxpbmVJdGVtcy5mb3JFYWNoKChjYXJ0SXRlbSkgPT4ge1xuICAgICAgaWYgKHNlbGVjdGVkQ2FydEl0ZW0uaWQgPT09IGNhcnRJdGVtLmlkKSB7XG4gICAgICAgIGlmICh1cGRhdGVkUXVhbnRpdHkgPiAwKSB7XG4gICAgICAgICAgbGV0IHVwZGF0ZWRDYXJ0SXRlbSA9IFtdO1xuXG4gICAgICAgICAgLy8gY2xvbmUgdGhlIGxpbmUgaXRlbVxuICAgICAgICAgIHVwZGF0ZWRDYXJ0SXRlbSA9IGNhcnRJdGVtO1xuXG4gICAgICAgICAgLy8gdXBkYXRlIHRoZSBxdWFudGl0eSBvZiB0aGUgbmV3IGNsb25lXG4gICAgICAgICAgdXBkYXRlZENhcnRJdGVtLnF1YW50aXR5ID0gdXBkYXRlZFF1YW50aXR5O1xuXG4gICAgICAgICAgLy8gcmV0dXJuIHRoZSB1cGRhdGVkIGNhcnQgaXRlbVxuICAgICAgICAgIHVwZGF0ZWRDYXJ0SXRlbXMucHVzaCh1cGRhdGVkQ2FydEl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9ZWxzZXtcbiAgICAgICAgLy8gcmV0dXJuIHRoZSB1bm1vZGlmaWVkIGl0ZW1cbiAgICAgICAgdXBkYXRlZENhcnRJdGVtcy5wdXNoKGNhcnRJdGVtKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSB0aGUgc2hvcGlmeSBjYXJ0IGFwaSBzaW5nbGV0b25cbiAgICBzaG9waWZ5QVBJLmNhcnQudXBkYXRlTGluZUl0ZW0oc2VsZWN0ZWRDYXJ0SXRlbS5pZCwgdXBkYXRlZFF1YW50aXR5KS50aGVuKCgpID0+IHtcbiAgICAgIC8vIHVwZGF0ZSB0aGUgbG9jYWwgY2FydCBpdGVtcyAoaW4gcmVkdXggc3RvcmUpXG4gICAgICBkaXNwYXRjaCh7IHR5cGU6ICdVUERBVEVfQ0FSVF9JVEVNUycsIHVwZGF0ZWRDYXJ0SXRlbXMgfSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIG9wZW4gY2FydFxuZXhwb3J0IHZhciBvcGVuQ2FydCA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnT1BFTl9DQVJUJ1xuICB9XG59O1xuXG4vLyBjbG9zZSBjYXJ0XG5leHBvcnQgdmFyIGNsb3NlQ2FydCA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQ0xPU0VfQ0FSVCdcbiAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9hY3Rpb25zL2NhcnRBY3Rpb25zLmpzeCIsImxldCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5sZXQgU2hvcGlmeUJ1eSA9IHJlcXVpcmUoJ3Nob3BpZnktYnV5Jyk7XG5sZXQgc3RvcmUgPSByZXF1aXJlKCdjb25maWd1cmVTdG9yZScpLmNvbmZpZ3VyZSgpO1xuXG5jbGFzcyBzaG9waWZ5QVBJIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jbGllbnQgPSBTaG9waWZ5QnV5LmJ1aWxkQ2xpZW50KHtcbiAgICAgIGFwaUtleTogJ2UwYWI4Y2Y5YjVhMzBjZWUyNjE2YmYxNTFhNTZjNzYzJyxcbiAgICAgIGRvbWFpbjogJ3JtYy1wcmV2aWV3Lm15c2hvcGlmeS5jb20nLFxuICAgICAgYXBwSWQ6ICc2J1xuICAgIH0pO1xuICAgIHRoaXMuY2FydCA9IHt9O1xuICB9XG5cbiAgY3JlYXRlQ2FydCgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5jbGllbnQuY3JlYXRlQ2FydCgpLnRoZW4oKG5ld0NhcnQpID0+IHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xhc3RDYXJ0SWQnLCBuZXdDYXJ0LmlkKTtcbiAgICAgICAgY29uc29sZS5sb2coJ2NyZWF0ZWQgbmV3IGNhcnQnLCBuZXdDYXJ0KTtcbiAgICAgICAgLy8gc2V0IHNpbmdsZXRvbiBjYXJ0IG9iamVjdCB0byByZWZlcmVuY2Ugc2hvcGlmeSBjYXJ0XG4gICAgICAgIHRoaXMuY2FydCA9IG5ld0NhcnQ7XG5cbiAgICAgICAgLy8gc2V0IGxvY2FsQ2FydCAocmVkdXggY29ubmVjdGVkKSB0byBrZWVwIHRyYWNrIG9mIHN0YXRlIGNoYW5nZXNcbiAgICAgICAgbGV0IGxvY2FsQ2FydCA9IHtcbiAgICAgICAgICBpc09wZW46IGZhbHNlLFxuICAgICAgICAgIGxpbmVJdGVtc0NvdW50OiAwLFxuICAgICAgICAgIGxpbmVJdGVtczogW10sXG4gICAgICAgICAgc3VidG90YWw6IDBcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKGxvY2FsQ2FydCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlc3RvcmVDYXJ0KCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudC5mZXRjaENhcnQobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhc3RDYXJ0SWQnKSkudGhlbigocmVtb3RlQ2FydCkgPT4ge1xuICAgICAgICAvLyBzZXQgc2luZ2xldG9uIGNhcnQgb2JqZWN0IHRvIHJlZmVyZW5jZSBzaG9waWZ5IGNhcnRcbiAgICAgICAgdGhpcy5jYXJ0ID0gcmVtb3RlQ2FydDtcblxuICAgICAgICAvLyBzZXQgbG9jYWxDYXJ0IChyZWR1eCBjb25uZWN0ZWQpIHRvIGtlZXAgdHJhY2sgb2Ygc3RhdGUgY2hhbmdlc1xuICAgICAgICBsZXQgbG9jYWxDYXJ0ID0ge1xuICAgICAgICAgIGlzT3BlbjogZmFsc2UsXG4gICAgICAgICAgbGluZUl0ZW1zQ291bnQ6IHJlbW90ZUNhcnQubGluZUl0ZW1Db3VudCxcbiAgICAgICAgICBsaW5lSXRlbXM6IHJlbW90ZUNhcnQubGluZUl0ZW1zLFxuICAgICAgICAgIHN1YnRvdGFsOiByZW1vdGVDYXJ0LnN1YnRvdGFsXG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShsb2NhbENhcnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgKG5ldyBzaG9waWZ5QVBJKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9hcGkvc2hvcGlmeUFQSS5qc3giLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE2IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZykpO1xuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jbGFzc25hbWVzL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAzOFxuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCJpbXBvcnQgc2hvcGlmeUFQSSBmcm9tICdzaG9waWZ5QVBJJztcblxuZXhwb3J0IHZhciBzZXRBY3RpdmVDb2xsZWN0aW9uID0gKGlkKSA9PiB7XG4gIHJldHVybiAoZGlzcGF0Y2gpID0+IHtcbiAgICByZXR1cm4gc2hvcGlmeUFQSS5jbGllbnQuZmV0Y2hDb2xsZWN0aW9uKGlkKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICBsZXQgY29sbGVjdGlvbiA9IGRhdGEgfHwge307XG4gICAgICBsZXQgcGFyc2VkQ29sbGVjdGlvbiA9IHsuLi5jb2xsZWN0aW9ufTtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9BQ1RJVkVfQ09MTEVDVElPTicsIHBhcnNlZENvbGxlY3Rpb24gfSk7XG4gICAgfSk7XG4gIH07XG59O1xuXG4vLyBBZGQgY29sbGVjdGlvbnMgdG8gc3RvcmVcbmV4cG9ydCB2YXIgc3RhcnRBZGRDb2xsZWN0aW9ucyA9ICgpID0+IHtcbiAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xuICAgIHJldHVybiBzaG9waWZ5QVBJLmNsaWVudC5mZXRjaEFsbENvbGxlY3Rpb25zKCkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgdmFyIGNvbGxlY3Rpb25zID0gZGF0YSB8fCB7fTtcbiAgICAgIHZhciBwYXJzZWRDb2xsZWN0aW9ucyA9IFtdO1xuXG4gICAgICBPYmplY3Qua2V5cyhjb2xsZWN0aW9ucykuZm9yRWFjaCgoY29sbGVjdGlvbklkKSA9PiB7XG4gICAgICAgIHBhcnNlZENvbGxlY3Rpb25zLnB1c2goe1xuICAgICAgICAgIGtleTogY29sbGVjdGlvbklkLFxuICAgICAgICAgIC4uLmNvbGxlY3Rpb25zW2NvbGxlY3Rpb25JZF1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgZGlzcGF0Y2goYWRkQ29sbGVjdGlvbnMocGFyc2VkQ29sbGVjdGlvbnMpKTtcbiAgICB9KTtcbiAgfTtcbn07XG5cbmV4cG9ydCB2YXIgYWRkQ29sbGVjdGlvbnMgPSAoY29sbGVjdGlvbnMpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQUREX0NPTExFQ1RJT05TJyxcbiAgICBjb2xsZWN0aW9uc1xuICB9O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9hY3Rpb25zL2NvbGxlY3Rpb25BY3Rpb25zLmpzeCIsImltcG9ydCBzaG9waWZ5QVBJIGZyb20gJ3Nob3BpZnlBUEknO1xuXG4vLyBBZGQgcHJvZHVjdHMgdG8gc3RvcmVcbmV4cG9ydCB2YXIgc3RhcnRBZGRQcm9kdWN0cyA9ICgpID0+IHtcbiAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xuICAgIHJldHVybiBzaG9waWZ5QVBJLmNsaWVudC5mZXRjaEFsbFByb2R1Y3RzKCkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgbGV0IHByb2R1Y3RzID0gZGF0YSB8fCB7fTtcbiAgICAgIGxldCBwYXJzZWRQcm9kdWN0cyA9IHByb2R1Y3RzLm1hcCgocHJvZHVjdCwgaW5kZXgpID0+IHtcbiAgICAgICAgbGV0IHVwZGF0ZWRQcm9kdWN0ID0gW107XG4gICAgICAgIHVwZGF0ZWRQcm9kdWN0ID0gcHJvZHVjdDtcbiAgICAgICAgdXBkYXRlZFByb2R1Y3Qua2V5ID0gaW5kZXg7XG4gICAgICAgIHJldHVybiB1cGRhdGVkUHJvZHVjdDtcbiAgICAgIH0pO1xuXG4gICAgICBkaXNwYXRjaChhZGRQcm9kdWN0cyhwYXJzZWRQcm9kdWN0cykpO1xuICAgICAgZGlzcGF0Y2gocHJlbG9hZFByb2R1Y3RJbWFnZXMoKSk7XG4gICAgfSk7XG4gIH07XG59O1xuXG5leHBvcnQgdmFyIGFkZFByb2R1Y3RzID0gKHByb2R1Y3RzKSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0FERF9QUk9EVUNUUycsXG4gICAgcHJvZHVjdHNcbiAgfTtcbn07XG5cbmV4cG9ydCB2YXIgcHJlbG9hZFByb2R1Y3RJbWFnZXMgPSAoKSA9PiB7XG4gIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XG4gICAgbGV0IHByb2R1Y3RzID0gZ2V0U3RhdGUoKS5wcm9kdWN0cy5hbGw7XG4gICAgbGV0IGltYWdlcyA9IFtdO1xuICAgIHByb2R1Y3RzLm1hcCgocHJvZHVjdCwgaW5kZXgpID0+IHtcbiAgICAgIGltYWdlc1tpbmRleF0gPSBuZXcgSW1hZ2UoKTtcbiAgICAgIGltYWdlc1tpbmRleF0uc3JjID0gcHJvZHVjdC5zZWxlY3RlZFZhcmlhbnQuaW1hZ2VWYXJpYW50c1s0XS5zcmM7XG4gICAgICByZXR1cm4gaW1hZ2VzW2luZGV4XTtcbiAgICB9KTtcbiAgfTtcbn07XG5cblxuLy8gc2V0IGFjdGl2ZSBwcm9kdWN0XG5leHBvcnQgdmFyIHNldEFjdGl2ZVByb2R1Y3QgPSAob3B0aW9ucykgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdTRVRfQUNUSVZFX1BST0RVQ1QnLFxuICAgIG9wdGlvbnNcbiAgfTtcbn07XG5cbi8vIGNsZWFyIGFjdGl2ZSBwcm9kdWN0IGZyb20gcmVkdXhcbmV4cG9ydCB2YXIgY2xlYXJBY3RpdmVQcm9kdWN0ID0gKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdDTEVBUl9BQ1RJVkVfUFJPRFVDVCdcbiAgfTtcbn07XG5cbi8vIHVwZGF0ZSBhY3RpdmUgcHJvZHVjdCBvcHRpb25cbmV4cG9ydCB2YXIgdXBkYXRlQWN0aXZlUHJvZHVjdE9wdGlvbnMgPSAob3B0aW9ucykgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdVUERBVEVfQUNUSVZFX1BST0RVQ1RfT1BUSU9OUycsXG4gICAgb3B0aW9uc1xuICB9O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9hY3Rpb25zL3Byb2R1Y3RBY3Rpb25zLmpzeCIsImltcG9ydCAqIGFzIHJlZHV4IGZyb20gJ3JlZHV4JztcbmltcG9ydCB0aHVuayBmcm9tICdyZWR1eC10aHVuayc7XG5cbmltcG9ydCB7cHJvZHVjdHNSZWR1Y2VyLCBjb2xsZWN0aW9uc1JlZHVjZXIsIGNhcnRSZWR1Y2VyLCBuYXZSZWR1Y2VyfSBmcm9tICdyZWR1Y2Vycyc7XG5cbmV4cG9ydCBsZXQgY29uZmlndXJlID0gKGluaXRpYWxTdGF0ZSA9IHt9KSA9PiB7XG4gIHZhciByZWR1Y2VyID0gcmVkdXguY29tYmluZVJlZHVjZXJzKHtcbiAgICBwcm9kdWN0czogcHJvZHVjdHNSZWR1Y2VyLFxuICAgIGNvbGxlY3Rpb25zOiBjb2xsZWN0aW9uc1JlZHVjZXIsXG4gICAgY2FydDogY2FydFJlZHVjZXIsXG4gICAgbmF2OiBuYXZSZWR1Y2VyXG4gIH0pO1xuXG4gIHZhciBzdG9yZSA9IHJlZHV4LmNyZWF0ZVN0b3JlKHJlZHVjZXIsIGluaXRpYWxTdGF0ZSwgcmVkdXguY29tcG9zZShcbiAgICByZWR1eC5hcHBseU1pZGRsZXdhcmUodGh1bmspLFxuICAgIHdpbmRvdy5kZXZUb29sc0V4dGVuc2lvbiA/IHdpbmRvdy5kZXZUb29sc0V4dGVuc2lvbigpIDogZiA9PiBmXG4gICkpO1xuXG4gIHJldHVybiBzdG9yZTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RvcmUvY29uZmlndXJlU3RvcmUuanN4IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTG9hZGVyKCl7XG4gIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImxvYWRlclwiPjxpIGNsYXNzTmFtZT1cImZhIGZhLWNpcmNsZS1vLW5vdGNoIGZhLXNwaW4gZmEtM3ggZmEtZndcIj48L2k+PC9kaXY+XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvcHJlc2VudGF0aW9uYWwvTG9hZGVyLmpzIiwiY2xhc3MgRm9ybWF0e1xuICBjb25zdHJ1Y3Rvcigpe1xuICB9XG5cbiAgLy8gZm9ybWF0IGFtb3VudCBhcyBjdXJyZW5jeVxuICBhc01vbmV5KGFtb3VudCwgY3VycmVuY3ksIHRob3VzYW5kU2VwYXJhdG9yLCBkZWNpbWFsU2VwYXJhdG9yLCBsb2NhbGVEZWNpbWFsU2VwYXJhdG9yKSB7XG4gICAgY3VycmVuY3kgPSBjdXJyZW5jeSB8fCAnJCc7XG4gICAgdGhvdXNhbmRTZXBhcmF0b3IgPSB0aG91c2FuZFNlcGFyYXRvciB8fCAnLCc7XG4gICAgZGVjaW1hbFNlcGFyYXRvciA9IGRlY2ltYWxTZXBhcmF0b3IgfHwgJy4nO1xuICAgIGxvY2FsZURlY2ltYWxTZXBhcmF0b3IgPSBsb2NhbGVEZWNpbWFsU2VwYXJhdG9yIHx8ICcuJztcbiAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCcoXFxcXGQpKD89KFxcXFxkezN9KStcXFxcLiknLCAnZycpO1xuXG4gICAgcmV0dXJuIGN1cnJlbmN5ICsgcGFyc2VGbG9hdChhbW91bnQsIDEwKS50b0ZpeGVkKDIpXG4gICAgICAucmVwbGFjZShsb2NhbGVEZWNpbWFsU2VwYXJhdG9yLCBkZWNpbWFsU2VwYXJhdG9yKVxuICAgICAgLnJlcGxhY2UocmVnZXgsICckMScgKyB0aG91c2FuZFNlcGFyYXRvcilcbiAgICAgIC50b1N0cmluZygpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IChuZXcgRm9ybWF0KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC91dGlscy9mb3JtYXQuanN4IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfdHJhY2tIZWxwZXIgPSByZXF1aXJlKCcuL3RyYWNrSGVscGVyJyk7XG5cbnZhciBfb2JqZWN0QXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgX29iamVjdEFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RBc3NpZ24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgaGVscGVycyA9IHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZShwcm9wcykge1xuICAgIHZhciBzbGlja0xpc3QgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcy5saXN0KTtcblxuICAgIHZhciBzbGlkZUNvdW50ID0gX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLmNvdW50KHByb3BzLmNoaWxkcmVuKTtcbiAgICB2YXIgbGlzdFdpZHRoID0gdGhpcy5nZXRXaWR0aChzbGlja0xpc3QpO1xuICAgIHZhciB0cmFja1dpZHRoID0gdGhpcy5nZXRXaWR0aChfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcy50cmFjaykpO1xuICAgIHZhciBzbGlkZVdpZHRoO1xuXG4gICAgaWYgKCFwcm9wcy52ZXJ0aWNhbCkge1xuICAgICAgdmFyIGNlbnRlclBhZGRpbmdBZGogPSBwcm9wcy5jZW50ZXJNb2RlICYmIHBhcnNlSW50KHByb3BzLmNlbnRlclBhZGRpbmcpICogMjtcbiAgICAgIHNsaWRlV2lkdGggPSAodGhpcy5nZXRXaWR0aChfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcykpIC0gY2VudGVyUGFkZGluZ0FkaikgLyBwcm9wcy5zbGlkZXNUb1Nob3c7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlV2lkdGggPSB0aGlzLmdldFdpZHRoKF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKSk7XG4gICAgfVxuXG4gICAgdmFyIHNsaWRlSGVpZ2h0ID0gdGhpcy5nZXRIZWlnaHQoc2xpY2tMaXN0LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWluZGV4PVwiMFwiXScpKTtcbiAgICB2YXIgbGlzdEhlaWdodCA9IHNsaWRlSGVpZ2h0ICogcHJvcHMuc2xpZGVzVG9TaG93O1xuXG4gICAgdmFyIGN1cnJlbnRTbGlkZSA9IHByb3BzLnJ0bCA/IHNsaWRlQ291bnQgLSAxIC0gcHJvcHMuaW5pdGlhbFNsaWRlIDogcHJvcHMuaW5pdGlhbFNsaWRlO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzbGlkZUNvdW50OiBzbGlkZUNvdW50LFxuICAgICAgc2xpZGVXaWR0aDogc2xpZGVXaWR0aCxcbiAgICAgIGxpc3RXaWR0aDogbGlzdFdpZHRoLFxuICAgICAgdHJhY2tXaWR0aDogdHJhY2tXaWR0aCxcbiAgICAgIGN1cnJlbnRTbGlkZTogY3VycmVudFNsaWRlLFxuICAgICAgc2xpZGVIZWlnaHQ6IHNsaWRlSGVpZ2h0LFxuICAgICAgbGlzdEhlaWdodDogbGlzdEhlaWdodFxuICAgIH0sIGZ1bmN0aW9uICgpIHtcblxuICAgICAgdmFyIHRhcmdldExlZnQgPSAoMCwgX3RyYWNrSGVscGVyLmdldFRyYWNrTGVmdCkoKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHtcbiAgICAgICAgc2xpZGVJbmRleDogdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUsXG4gICAgICAgIHRyYWNrUmVmOiB0aGlzLnRyYWNrXG4gICAgICB9LCBwcm9wcywgdGhpcy5zdGF0ZSkpO1xuICAgICAgLy8gZ2V0Q1NTIGZ1bmN0aW9uIG5lZWRzIHByZXZpb3VzbHkgc2V0IHN0YXRlXG4gICAgICB2YXIgdHJhY2tTdHlsZSA9ICgwLCBfdHJhY2tIZWxwZXIuZ2V0VHJhY2tDU1MpKCgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KSh7IGxlZnQ6IHRhcmdldExlZnQgfSwgcHJvcHMsIHRoaXMuc3RhdGUpKTtcblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRyYWNrU3R5bGU6IHRyYWNrU3R5bGUgfSk7XG5cbiAgICAgIHRoaXMuYXV0b1BsYXkoKTsgLy8gb25jZSB3ZSdyZSBzZXQgdXAsIHRyaWdnZXIgdGhlIGluaXRpYWwgYXV0b3BsYXkuXG4gICAgfSk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKHByb3BzKSB7XG4gICAgdmFyIHNsaWNrTGlzdCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzLmxpc3QpO1xuICAgIC8vIFRoaXMgbWV0aG9kIGhhcyBtb3N0bHkgc2FtZSBjb2RlIGFzIGluaXRpYWxpemUgbWV0aG9kLlxuICAgIC8vIFJlZmFjdG9yIGl0XG4gICAgdmFyIHNsaWRlQ291bnQgPSBfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4uY291bnQocHJvcHMuY2hpbGRyZW4pO1xuICAgIHZhciBsaXN0V2lkdGggPSB0aGlzLmdldFdpZHRoKHNsaWNrTGlzdCk7XG4gICAgdmFyIHRyYWNrV2lkdGggPSB0aGlzLmdldFdpZHRoKF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzLnRyYWNrKSk7XG4gICAgdmFyIHNsaWRlV2lkdGg7XG5cbiAgICBpZiAoIXByb3BzLnZlcnRpY2FsKSB7XG4gICAgICB2YXIgY2VudGVyUGFkZGluZ0FkaiA9IHByb3BzLmNlbnRlck1vZGUgJiYgcGFyc2VJbnQocHJvcHMuY2VudGVyUGFkZGluZykgKiAyO1xuICAgICAgc2xpZGVXaWR0aCA9ICh0aGlzLmdldFdpZHRoKF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKSkgLSBjZW50ZXJQYWRkaW5nQWRqKSAvIHByb3BzLnNsaWRlc1RvU2hvdztcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVXaWR0aCA9IHRoaXMuZ2V0V2lkdGgoX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpKTtcbiAgICB9XG5cbiAgICB2YXIgc2xpZGVIZWlnaHQgPSB0aGlzLmdldEhlaWdodChzbGlja0xpc3QucXVlcnlTZWxlY3RvcignW2RhdGEtaW5kZXg9XCIwXCJdJykpO1xuICAgIHZhciBsaXN0SGVpZ2h0ID0gc2xpZGVIZWlnaHQgKiBwcm9wcy5zbGlkZXNUb1Nob3c7XG5cbiAgICAvLyBwYXVzZSBzbGlkZXIgaWYgYXV0b3BsYXkgaXMgc2V0IHRvIGZhbHNlXG4gICAgaWYgKHByb3BzLmF1dG9wbGF5KSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXV0b1BsYXkoKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNsaWRlQ291bnQ6IHNsaWRlQ291bnQsXG4gICAgICBzbGlkZVdpZHRoOiBzbGlkZVdpZHRoLFxuICAgICAgbGlzdFdpZHRoOiBsaXN0V2lkdGgsXG4gICAgICB0cmFja1dpZHRoOiB0cmFja1dpZHRoLFxuICAgICAgc2xpZGVIZWlnaHQ6IHNsaWRlSGVpZ2h0LFxuICAgICAgbGlzdEhlaWdodDogbGlzdEhlaWdodFxuICAgIH0sIGZ1bmN0aW9uICgpIHtcblxuICAgICAgdmFyIHRhcmdldExlZnQgPSAoMCwgX3RyYWNrSGVscGVyLmdldFRyYWNrTGVmdCkoKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHtcbiAgICAgICAgc2xpZGVJbmRleDogdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUsXG4gICAgICAgIHRyYWNrUmVmOiB0aGlzLnRyYWNrXG4gICAgICB9LCBwcm9wcywgdGhpcy5zdGF0ZSkpO1xuICAgICAgLy8gZ2V0Q1NTIGZ1bmN0aW9uIG5lZWRzIHByZXZpb3VzbHkgc2V0IHN0YXRlXG4gICAgICB2YXIgdHJhY2tTdHlsZSA9ICgwLCBfdHJhY2tIZWxwZXIuZ2V0VHJhY2tDU1MpKCgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KSh7IGxlZnQ6IHRhcmdldExlZnQgfSwgcHJvcHMsIHRoaXMuc3RhdGUpKTtcblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRyYWNrU3R5bGU6IHRyYWNrU3R5bGUgfSk7XG4gICAgfSk7XG4gIH0sXG4gIGdldFdpZHRoOiBmdW5jdGlvbiBnZXRXaWR0aChlbGVtKSB7XG4gICAgcmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggfHwgZWxlbS5vZmZzZXRXaWR0aCB8fCAwO1xuICB9LFxuICBnZXRIZWlnaHQ6IGZ1bmN0aW9uIGdldEhlaWdodChlbGVtKSB7XG4gICAgcmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IDA7XG4gIH0sXG5cbiAgYWRhcHRIZWlnaHQ6IGZ1bmN0aW9uIGFkYXB0SGVpZ2h0KCkge1xuICAgIGlmICh0aGlzLnByb3BzLmFkYXB0aXZlSGVpZ2h0KSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSAnW2RhdGEtaW5kZXg9XCInICsgdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUgKyAnXCJdJztcbiAgICAgIGlmICh0aGlzLmxpc3QpIHtcbiAgICAgICAgdmFyIHNsaWNrTGlzdCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzLmxpc3QpO1xuICAgICAgICBzbGlja0xpc3Quc3R5bGUuaGVpZ2h0ID0gc2xpY2tMaXN0LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpLm9mZnNldEhlaWdodCArICdweCc7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBjYW5Hb05leHQ6IGZ1bmN0aW9uIGNhbkdvTmV4dChvcHRzKSB7XG4gICAgdmFyIGNhbkdvID0gdHJ1ZTtcbiAgICBpZiAoIW9wdHMuaW5maW5pdGUpIHtcbiAgICAgIGlmIChvcHRzLmNlbnRlck1vZGUpIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgY3VycmVudCBzbGlkZSBpcyBsYXN0IHNsaWRlXG4gICAgICAgIGlmIChvcHRzLmN1cnJlbnRTbGlkZSA+PSBvcHRzLnNsaWRlQ291bnQgLSAxKSB7XG4gICAgICAgICAgY2FuR28gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgYWxsIHNsaWRlcyBhcmUgc2hvd24gaW4gc2xpZGVyXG4gICAgICAgIGlmIChvcHRzLnNsaWRlQ291bnQgPD0gb3B0cy5zbGlkZXNUb1Nob3cgfHwgb3B0cy5jdXJyZW50U2xpZGUgPj0gb3B0cy5zbGlkZUNvdW50IC0gb3B0cy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICBjYW5HbyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjYW5HbztcbiAgfSxcbiAgc2xpZGVIYW5kbGVyOiBmdW5jdGlvbiBzbGlkZUhhbmRsZXIoaW5kZXgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gRnVuY3Rpb25hbGl0eSBvZiBhbmltYXRlU2xpZGUgYW5kIHBvc3RTbGlkZSBpcyBtZXJnZWQgaW50byB0aGlzIGZ1bmN0aW9uXG4gICAgLy8gY29uc29sZS5sb2coJ3NsaWRlSGFuZGxlcicsIGluZGV4KTtcbiAgICB2YXIgdGFyZ2V0U2xpZGUsIGN1cnJlbnRTbGlkZTtcbiAgICB2YXIgdGFyZ2V0TGVmdCwgY3VycmVudExlZnQ7XG4gICAgdmFyIGNhbGxiYWNrO1xuXG4gICAgaWYgKHRoaXMucHJvcHMud2FpdEZvckFuaW1hdGUgJiYgdGhpcy5zdGF0ZS5hbmltYXRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5mYWRlKSB7XG4gICAgICBjdXJyZW50U2xpZGUgPSB0aGlzLnN0YXRlLmN1cnJlbnRTbGlkZTtcblxuICAgICAgLy8gRG9uJ3QgY2hhbmdlIHNsaWRlIGlmIGl0J3Mgbm90IGluZml0ZSBhbmQgY3VycmVudCBzbGlkZSBpcyB0aGUgZmlyc3Qgb3IgbGFzdCBzbGlkZS5cbiAgICAgIGlmICh0aGlzLnByb3BzLmluZmluaXRlID09PSBmYWxzZSAmJiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuc3RhdGUuc2xpZGVDb3VudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyAgU2hpZnRpbmcgdGFyZ2V0U2xpZGUgYmFjayBpbnRvIHRoZSByYW5nZVxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICB0YXJnZXRTbGlkZSA9IGluZGV4ICsgdGhpcy5zdGF0ZS5zbGlkZUNvdW50O1xuICAgICAgfSBlbHNlIGlmIChpbmRleCA+PSB0aGlzLnN0YXRlLnNsaWRlQ291bnQpIHtcbiAgICAgICAgdGFyZ2V0U2xpZGUgPSBpbmRleCAtIHRoaXMuc3RhdGUuc2xpZGVDb3VudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFNsaWRlID0gaW5kZXg7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmxhenlMb2FkICYmIHRoaXMuc3RhdGUubGF6eUxvYWRlZExpc3QuaW5kZXhPZih0YXJnZXRTbGlkZSkgPCAwKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGxhenlMb2FkZWRMaXN0OiB0aGlzLnN0YXRlLmxhenlMb2FkZWRMaXN0LmNvbmNhdCh0YXJnZXRTbGlkZSlcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBhbmltYXRpbmc6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMuYWZ0ZXJDaGFuZ2UpIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5hZnRlckNoYW5nZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIF90aGlzLmFuaW1hdGlvbkVuZENhbGxiYWNrO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGFuaW1hdGluZzogdHJ1ZSxcbiAgICAgICAgY3VycmVudFNsaWRlOiB0YXJnZXRTbGlkZVxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbkVuZENhbGxiYWNrID0gc2V0VGltZW91dChjYWxsYmFjaywgdGhpcy5wcm9wcy5zcGVlZCk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMuYmVmb3JlQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMucHJvcHMuYmVmb3JlQ2hhbmdlKHRoaXMuc3RhdGUuY3VycmVudFNsaWRlLCB0YXJnZXRTbGlkZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYXV0b1BsYXkoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0YXJnZXRTbGlkZSA9IGluZGV4O1xuICAgIGlmICh0YXJnZXRTbGlkZSA8IDApIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICBjdXJyZW50U2xpZGUgPSAwO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLnNsaWRlQ291bnQgJSB0aGlzLnByb3BzLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgIGN1cnJlbnRTbGlkZSA9IHRoaXMuc3RhdGUuc2xpZGVDb3VudCAtIHRoaXMuc3RhdGUuc2xpZGVDb3VudCAlIHRoaXMucHJvcHMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50U2xpZGUgPSB0aGlzLnN0YXRlLnNsaWRlQ291bnQgKyB0YXJnZXRTbGlkZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRhcmdldFNsaWRlID49IHRoaXMuc3RhdGUuc2xpZGVDb3VudCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgIGN1cnJlbnRTbGlkZSA9IHRoaXMuc3RhdGUuc2xpZGVDb3VudCAtIHRoaXMucHJvcHMuc2xpZGVzVG9TaG93O1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLnNsaWRlQ291bnQgJSB0aGlzLnByb3BzLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgIGN1cnJlbnRTbGlkZSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50U2xpZGUgPSB0YXJnZXRTbGlkZSAtIHRoaXMuc3RhdGUuc2xpZGVDb3VudDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudFNsaWRlID0gdGFyZ2V0U2xpZGU7XG4gICAgfVxuXG4gICAgdGFyZ2V0TGVmdCA9ICgwLCBfdHJhY2tIZWxwZXIuZ2V0VHJhY2tMZWZ0KSgoMCwgX29iamVjdEFzc2lnbjIuZGVmYXVsdCkoe1xuICAgICAgc2xpZGVJbmRleDogdGFyZ2V0U2xpZGUsXG4gICAgICB0cmFja1JlZjogdGhpcy50cmFja1xuICAgIH0sIHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpKTtcblxuICAgIGN1cnJlbnRMZWZ0ID0gKDAsIF90cmFja0hlbHBlci5nZXRUcmFja0xlZnQpKCgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KSh7XG4gICAgICBzbGlkZUluZGV4OiBjdXJyZW50U2xpZGUsXG4gICAgICB0cmFja1JlZjogdGhpcy50cmFja1xuICAgIH0sIHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpKTtcblxuICAgIGlmICh0aGlzLnByb3BzLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgdGFyZ2V0TGVmdCA9IGN1cnJlbnRMZWZ0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmJlZm9yZUNoYW5nZSkge1xuICAgICAgdGhpcy5wcm9wcy5iZWZvcmVDaGFuZ2UodGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUsIGN1cnJlbnRTbGlkZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMubGF6eUxvYWQpIHtcbiAgICAgIHZhciBsb2FkZWQgPSB0cnVlO1xuICAgICAgdmFyIHNsaWRlc1RvTG9hZCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IHRhcmdldFNsaWRlOyBpIDwgdGFyZ2V0U2xpZGUgKyB0aGlzLnByb3BzLnNsaWRlc1RvU2hvdzsgaSsrKSB7XG4gICAgICAgIGxvYWRlZCA9IGxvYWRlZCAmJiB0aGlzLnN0YXRlLmxhenlMb2FkZWRMaXN0LmluZGV4T2YoaSkgPj0gMDtcbiAgICAgICAgaWYgKCFsb2FkZWQpIHtcbiAgICAgICAgICBzbGlkZXNUb0xvYWQucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFsb2FkZWQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbGF6eUxvYWRlZExpc3Q6IHRoaXMuc3RhdGUubGF6eUxvYWRlZExpc3QuY29uY2F0KHNsaWRlc1RvTG9hZClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2xpZGUgVHJhbnNpdGlvbiBoYXBwZW5zIGhlcmUuXG4gICAgLy8gYW5pbWF0ZWQgdHJhbnNpdGlvbiBoYXBwZW5zIHRvIHRhcmdldCBTbGlkZSBhbmRcbiAgICAvLyBub24gLSBhbmltYXRlZCB0cmFuc2l0aW9uIGhhcHBlbnMgdG8gY3VycmVudCBTbGlkZVxuICAgIC8vIElmIENTUyB0cmFuc2l0aW9ucyBhcmUgZmFsc2UsIGRpcmVjdGx5IGdvIHRoZSBjdXJyZW50IHNsaWRlLlxuXG4gICAgaWYgKHRoaXMucHJvcHMudXNlQ1NTID09PSBmYWxzZSkge1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY3VycmVudFNsaWRlOiBjdXJyZW50U2xpZGUsXG4gICAgICAgIHRyYWNrU3R5bGU6ICgwLCBfdHJhY2tIZWxwZXIuZ2V0VHJhY2tDU1MpKCgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KSh7IGxlZnQ6IGN1cnJlbnRMZWZ0IH0sIHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpKVxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5hZnRlckNoYW5nZSkge1xuICAgICAgICAgIHRoaXMucHJvcHMuYWZ0ZXJDaGFuZ2UoY3VycmVudFNsaWRlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcblxuICAgICAgdmFyIG5leHRTdGF0ZUNoYW5nZXMgPSB7XG4gICAgICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgICAgIGN1cnJlbnRTbGlkZTogY3VycmVudFNsaWRlLFxuICAgICAgICB0cmFja1N0eWxlOiAoMCwgX3RyYWNrSGVscGVyLmdldFRyYWNrQ1NTKSgoMCwgX29iamVjdEFzc2lnbjIuZGVmYXVsdCkoeyBsZWZ0OiBjdXJyZW50TGVmdCB9LCB0aGlzLnByb3BzLCB0aGlzLnN0YXRlKSksXG4gICAgICAgIHN3aXBlTGVmdDogbnVsbFxuICAgICAgfTtcblxuICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjaygpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUobmV4dFN0YXRlQ2hhbmdlcyk7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5hZnRlckNoYW5nZSkge1xuICAgICAgICAgIF90aGlzLnByb3BzLmFmdGVyQ2hhbmdlKGN1cnJlbnRTbGlkZSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIF90aGlzLmFuaW1hdGlvbkVuZENhbGxiYWNrO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGFuaW1hdGluZzogdHJ1ZSxcbiAgICAgICAgY3VycmVudFNsaWRlOiBjdXJyZW50U2xpZGUsXG4gICAgICAgIHRyYWNrU3R5bGU6ICgwLCBfdHJhY2tIZWxwZXIuZ2V0VHJhY2tBbmltYXRlQ1NTKSgoMCwgX29iamVjdEFzc2lnbjIuZGVmYXVsdCkoeyBsZWZ0OiB0YXJnZXRMZWZ0IH0sIHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpKVxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbkVuZENhbGxiYWNrID0gc2V0VGltZW91dChjYWxsYmFjaywgdGhpcy5wcm9wcy5zcGVlZCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmF1dG9QbGF5KCk7XG4gIH0sXG4gIHN3aXBlRGlyZWN0aW9uOiBmdW5jdGlvbiBzd2lwZURpcmVjdGlvbih0b3VjaE9iamVjdCkge1xuICAgIHZhciB4RGlzdCwgeURpc3QsIHIsIHN3aXBlQW5nbGU7XG5cbiAgICB4RGlzdCA9IHRvdWNoT2JqZWN0LnN0YXJ0WCAtIHRvdWNoT2JqZWN0LmN1clg7XG4gICAgeURpc3QgPSB0b3VjaE9iamVjdC5zdGFydFkgLSB0b3VjaE9iamVjdC5jdXJZO1xuICAgIHIgPSBNYXRoLmF0YW4yKHlEaXN0LCB4RGlzdCk7XG5cbiAgICBzd2lwZUFuZ2xlID0gTWF0aC5yb3VuZChyICogMTgwIC8gTWF0aC5QSSk7XG4gICAgaWYgKHN3aXBlQW5nbGUgPCAwKSB7XG4gICAgICBzd2lwZUFuZ2xlID0gMzYwIC0gTWF0aC5hYnMoc3dpcGVBbmdsZSk7XG4gICAgfVxuICAgIGlmIChzd2lwZUFuZ2xlIDw9IDQ1ICYmIHN3aXBlQW5nbGUgPj0gMCB8fCBzd2lwZUFuZ2xlIDw9IDM2MCAmJiBzd2lwZUFuZ2xlID49IDMxNSkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMucnRsID09PSBmYWxzZSA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgfVxuICAgIGlmIChzd2lwZUFuZ2xlID49IDEzNSAmJiBzd2lwZUFuZ2xlIDw9IDIyNSkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMucnRsID09PSBmYWxzZSA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgaWYgKHN3aXBlQW5nbGUgPj0gMzUgJiYgc3dpcGVBbmdsZSA8PSAxMzUpIHtcbiAgICAgICAgcmV0dXJuICdkb3duJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAndXAnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAndmVydGljYWwnO1xuICB9LFxuICBwbGF5OiBmdW5jdGlvbiBwbGF5KCkge1xuICAgIHZhciBuZXh0SW5kZXg7XG5cbiAgICBpZiAoIXRoaXMuc3RhdGUubW91bnRlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnJ0bCkge1xuICAgICAgbmV4dEluZGV4ID0gdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUgLSB0aGlzLnByb3BzLnNsaWRlc1RvU2Nyb2xsO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5jYW5Hb05leHQoX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpKSkge1xuICAgICAgICBuZXh0SW5kZXggPSB0aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSArIHRoaXMucHJvcHMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zbGlkZUhhbmRsZXIobmV4dEluZGV4KTtcbiAgfSxcbiAgYXV0b1BsYXk6IGZ1bmN0aW9uIGF1dG9QbGF5KCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmF1dG9QbGF5VGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnN0YXRlLmF1dG9QbGF5VGltZXIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5hdXRvcGxheSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGF1dG9QbGF5VGltZXI6IHNldFRpbWVvdXQodGhpcy5wbGF5LCB0aGlzLnByb3BzLmF1dG9wbGF5U3BlZWQpXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIHBhdXNlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5hdXRvUGxheVRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5zdGF0ZS5hdXRvUGxheVRpbWVyKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhdXRvUGxheVRpbWVyOiBudWxsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGhlbHBlcnM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LXNsaWNrL2xpYi9taXhpbnMvaGVscGVycy5qc1xuLy8gbW9kdWxlIGlkID0gODBcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmxldCB7IGNvbm5lY3QgfSA9IHJlcXVpcmUoJ3JlYWN0LXJlZHV4Jyk7XG5sZXQgYWN0aW9ucyA9IHJlcXVpcmUoJ2NvbGxlY3Rpb25BY3Rpb25zJyk7XG5cbmNsYXNzIENvbGxlY3Rpb24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsTW91bnQoKXtcbiAgICBsZXQge2Rpc3BhdGNofSA9IHRoaXMucHJvcHM7XG4gICAgZGlzcGF0Y2goYWN0aW9ucy5zZXRBY3RpdmVDb2xsZWN0aW9uKHRoaXMucHJvcHMucGFyYW1zLmNvbGxlY3Rpb25JZCkpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCBjb2xsZWN0aW9uO1xuICAgIGNvbGxlY3Rpb24gPSB0aGlzLnByb3BzLmNvbGxlY3Rpb247XG4gICAgaWYgKGNvbGxlY3Rpb24pe1xuICAgICAgbGV0IHtkaXNwYXRjaH0gPSB0aGlzLnByb3BzO1xuICAgICAgbGV0IHtjb2xsZWN0aW9uX2lkLCB0aXRsZX0gPSBjb2xsZWN0aW9uO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbGxlY3Rpb24taW5kZXhcIj5cbiAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj57dGl0bGV9PC9oMT5cbiAgICAgICAgPC9kaXY+XG4gICAgICApXG4gICAgfWVsc2V7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PkxvYWRpbmcgY29sbGVjdGlvbi4uLjwvZGl2PlxuICAgICAgKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICAoc3RhdGUpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgY29sbGVjdGlvbjogc3RhdGUuY29sbGVjdGlvbnMuYWN0aXZlXG4gICAgfVxuICB9XG4pKENvbGxlY3Rpb24pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbnRhaW5lcnMvQ29sbGVjdGlvbi5qc3giLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtMaW5rfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xubGV0IHtjb25uZWN0fSA9IHJlcXVpcmUoJ3JlYWN0LXJlZHV4Jyk7XG5sZXQgcHJvZHVjdEFjdGlvbnMgPSByZXF1aXJlKCdwcm9kdWN0QWN0aW9ucycpO1xubGV0IGNhcnRBY3Rpb25zID0gcmVxdWlyZSgnY2FydEFjdGlvbnMnKTtcbmltcG9ydCB7YnJvd3Nlckhpc3Rvcnl9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgRm9ybWF0IGZyb20gJ2Zvcm1hdCc7XG5pbXBvcnQgTW9kYWwgZnJvbSAncmVhY3QtbW9kYWwnO1xuaW1wb3J0IHNob3BpZnlBUEkgZnJvbSAnc2hvcGlmeUFQSSc7XG5pbXBvcnQgTG9hZGVyIGZyb20gJ0xvYWRlcic7XG5cbmNsYXNzIFByb2R1Y3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbW9kYWxJc09wZW46IGZhbHNlXG4gICAgfVxuXG4gICAgdGhpcy5vcGVuTW9kYWwgPSB0aGlzLm9wZW5Nb2RhbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2xvc2VNb2RhbCA9IHRoaXMuY2xvc2VNb2RhbC5iaW5kKHRoaXMpO1xuXG4gICAgbGV0IGRpc3BhdGNoO1xuICAgIGxldCBwcm9kdWN0O1xuICB9XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCl7XG4gICAgdGhpcy5kaXNwYXRjaCA9IHRoaXMucHJvcHMuZGlzcGF0Y2g7XG5cbiAgICBzaG9waWZ5QVBJLmNsaWVudC5mZXRjaFByb2R1Y3QodGhpcy5wcm9wcy5wYXJhbXMucHJvZHVjdElkKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICBsZXQgcHJvZHVjdCA9IGRhdGEgfHwge307XG4gICAgICB0aGlzLnByb2R1Y3QgPSBwcm9kdWN0O1xuICAgICAgdGhpcy5kaXNwYXRjaChwcm9kdWN0QWN0aW9ucy5zZXRBY3RpdmVQcm9kdWN0KHByb2R1Y3Qub3B0aW9ucykpO1xuICAgIH0pO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKXtcbiAgICB0aGlzLmRpc3BhdGNoKHByb2R1Y3RBY3Rpb25zLmNsZWFyQWN0aXZlUHJvZHVjdCgpKTtcbiAgfVxuXG4gIGNsb3NlTW9kYWwoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7bW9kYWxJc09wZW46IGZhbHNlfSk7XG4gIH1cblxuICBvcGVuTW9kYWwoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7bW9kYWxJc09wZW46IHRydWV9KTtcbiAgfVxuXG4gIGhhbmRsZU9wdGlvbkNoYW5nZShvcHRpb25OYW1lLCB2YWx1ZSkge1xuICAgIC8vIHVwZGF0ZSBwcm9kdWN0IG9wdGlvbnMgaW4gdGhlIFNob3BpZnkgc2luZ2xldG9uXG4gICAgdGhpcy5wcm9kdWN0Lm9wdGlvbnMuZmlsdGVyKChvcHRpb24pID0+IHtcbiAgICAgIHJldHVybiBvcHRpb24ubmFtZSA9PT0gb3B0aW9uTmFtZTtcbiAgICB9KVswXS5zZWxlY3RlZCA9IHZhbHVlO1xuXG4gICAgLy8gdXBkYXRlIHByb2R1Y3Qgb3B0aW9uc1xuICAgIHRoaXMuZGlzcGF0Y2gocHJvZHVjdEFjdGlvbnMudXBkYXRlQWN0aXZlUHJvZHVjdE9wdGlvbnModGhpcy5wcm9kdWN0Lm9wdGlvbnMpKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQgYWN0aXZlUHJvZHVjdDtcbiAgICBhY3RpdmVQcm9kdWN0ID0gdGhpcy5wcm9kdWN0O1xuICAgIGlmIChhY3RpdmVQcm9kdWN0KSB7XG4gICAgICBsZXQge2Rpc3BhdGNofSA9IHRoaXMucHJvcHM7XG4gICAgICBsZXQge3Byb2R1Y3RfaWQsIHRpdGxlLCBpbWFnZXMsIG9wdGlvbnN9ID0gYWN0aXZlUHJvZHVjdC5hdHRycztcbiAgICAgIGxldCB7ZGVzY3JpcHRpb24sIHNlbGVjdGVkVmFyaWFudCwgc2VsZWN0ZWRWYXJpYW50SW1hZ2V9ID0gYWN0aXZlUHJvZHVjdDtcblxuICAgICAgbGV0IHJlbmRlck9wdGlvbnMgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9kdWN0LW9wdGlvbnNcIj5cbiAgICAgICAgICAgIHthY3RpdmVQcm9kdWN0Lm9wdGlvbnMubWFwKChvcHRpb24sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChvcHRpb24ubmFtZSAhPSBcIlNpemVcIiAmJiBvcHRpb24ubmFtZSAhPSBcIlRpdGxlXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgPHNlbGVjdCBrZXk9e2luZGV4fSBuYW1lPXtvcHRpb24ubmFtZX0gdmFsdWU9e29wdGlvbi5zZWxlY3RlZH0gb25DaGFuZ2U9eyhldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU9wdGlvbkNoYW5nZShvcHRpb24ubmFtZSwgZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICAgICAgICB7b3B0aW9uLnZhbHVlcy5tYXAoKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIGtleT17aW5kZXh9IHZhbHVlPXt2YWx1ZX0+e3ZhbHVlfTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIGxldCByZW5kZXJTaXplcyA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBhY3RpdmVQcm9kdWN0Lm9wdGlvbnMubWFwKChvcHRpb24sIG9wdGlvbnNJbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKG9wdGlvbi5uYW1lID09IFwiU2l6ZVwiKSB7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPHVsIGtleT17b3B0aW9uc0luZGV4fSBjbGFzc05hbWU9XCJwcm9kdWN0LXNpemVzXCI+XG4gICAgICAgICAgICAgICAgICB7b3B0aW9uLnZhbHVlcy5tYXAoKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgIDxsaVxuICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YHByb2R1Y3Qtc2l6ZSAke29wdGlvbi5zZWxlY3RlZCA9PT0gdmFsdWUgPyAnc2VsZWN0ZWQnIDogJyd9YH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVPcHRpb25DaGFuZ2Uob3B0aW9uLm5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAge3ZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgIDwvbGk+KTtcbiAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUubG9nKCdhY3RpdmVQcm9kdWN0OiAnLCBhY3RpdmVQcm9kdWN0KTtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzbWFsbC0xMiBtZWRpdW0tOCBjb2x1bW5cIj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXticm93c2VySGlzdG9yeS5nb0JhY2t9IGNsYXNzTmFtZT1cImJ1dHRvbiBob2xsb3dcIj4mbHNhcXVvOyBCYWNrIHRvIHByb2R1Y3RzPC9idXR0b24+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCI+PGltZyBzcmM9e3NlbGVjdGVkVmFyaWFudEltYWdlLnNyY30gYWx0PVwiXCIgLz48L3A+XG4gICAgICAgICAgICAgIHsvKiA8cD5DdXJyZW50IG9wdGlvbnM6PC9wPiAqL31cbiAgICAgICAgICAgICAgey8qIHtvcHRpb25zLm1hcChvcHRpb24gPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiA8cD57b3B0aW9uLm5hbWV9PC9wPlxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAge2ltYWdlcy5tYXAoaW1hZ2UgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiA8aW1nIGtleT17aW1hZ2UuaWR9IGhlaWdodD1cIjUwXCIgd2lkdGg9XCI1MFwiIHNyYz17aW1hZ2Uuc3JjfSBhbHQ9XCJcIiAvPlxuICAgICAgICAgICAgICB9KX0gKi99XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic21hbGwtMTIgbWVkaXVtLTQgY29sdW1uXCI+XG4gICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJwcm9kdWN0LXRpdGxlXCI+e3RpdGxlfTwvaDE+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvZHVjdC1pbmZvXCI+XG4gICAgICAgICAgICAgICAgPGg1IGNsYXNzTmFtZT1cInByb2R1Y3QtaW5mb19faGVhZGxpbmVcIj5BcnRpc3Q8L2g1PlxuICAgICAgICAgICAgICAgIDxwPkpXSVNIODg8L3A+XG5cbiAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPVwicHJvZHVjdC1pbmZvX19oZWFkbGluZVwiPkRlc2NyaXB0aW9uPC9oNT5cbiAgICAgICAgICAgICAgICA8ZGl2IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBkZXNjcmlwdGlvbn19PjwvZGl2PlxuXG4gICAgICAgICAgICAgICAge3JlbmRlck9wdGlvbnMoKX1cblxuICAgICAgICAgICAgICAgIHsvKiA8ZGl2IGNsYXNzTmFtZT1cInByb2R1Y3Qtc3R5bGVcIj5cbiAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiU2VsZWN0IHN0eWxlXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzTmFtZT1cInByb2R1Y3Qtc3R5bGVfX2J1dHRvblwiPjxpIGNsYXNzTmFtZT1cImZhIGZhLWNhcmV0LXJpZ2h0XCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PiAqL31cblxuICAgICAgICAgICAgICAgIHtyZW5kZXJTaXplcygpfVxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9kdWN0LXByaWNlXCI+e0Zvcm1hdC5hc01vbmV5KHNlbGVjdGVkVmFyaWFudC5wcmljZSl9PC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2R1Y3QtY2hhcml0eVwiPlxuICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJDaG9vc2UgQ2hhcml0eVwiIC8+XG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzc05hbWU9XCJwcm9kdWN0LWNoYXJpdHlfX2J1dHRvblwiPjxpIGNsYXNzTmFtZT1cImZhIGZhLWNhcmV0LXJpZ2h0XCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9kdWN0LWNoYXJpdHlfX21vcmUtaW5mb1wiIG9uQ2xpY2s9e3RoaXMub3Blbk1vZGFsfT48aSBjbGFzc05hbWU9XCJmYSBmYS1pbmZvLWNpcmNsZVwiPjwvaT4gPGEgaHJlZj1cIiNcIj5tb3JlIGluZm88L2E+PC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgIDxNb2RhbFxuICAgICAgICAgICAgICAgICAgICBpc09wZW49e3RoaXMuc3RhdGUubW9kYWxJc09wZW59XG4gICAgICAgICAgICAgICAgICAgIG9uUmVxdWVzdENsb3NlPXt0aGlzLmNsb3NlTW9kYWx9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRMYWJlbD1cIm1vcmUgaW5mb1wiXG4gICAgICAgICAgICAgICAgICAgIGNsb3NlVGltZW91dE1TPXsyMDB9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIlJlYWN0TW9kYWxfX0NvbnRlbnRcIlxuICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgIDxwPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIFBlbGxlbnRlc3F1ZSBlZ2VzdGFzLCBuaWJoIHNlZCB0cmlzdGlxdWUgb3JuYXJlLCBudW5jIGR1aSBzb2xsaWNpdHVkaW4gZWxpdCwgaWQgY29uc2VjdGV0dXIgb2RpbyBsZWN0dXMgZXUgbnVsbGEuIFByb2luIGRhcGlidXMgY29udmFsbGlzIHVybmEgc2l0IGFtZXQgZGljdHVtLiBVdCBwb3J0dGl0b3IgbGlndWxhIGF0IHB1cnVzIGF1Y3RvciBtb2xlc3RpZS4gRXRpYW0gdmVsaXQgbmliaCwgcG9ydHRpdG9yIGF0IGlwc3VtIG1hdHRpcywgY29uc2VjdGV0dXIgZWdlc3RhcyBhcmN1LiBEb25lYyBwZWxsZW50ZXNxdWUgYXVndWUgc2l0IGFtZXQgZWxlbWVudHVtIGZhY2lsaXNpcy4gQWVuZWFuIHNlbXBlciBtYWxlc3VhZGEgbGlndWxhIGZhdWNpYnVzIHNvbGxpY2l0dWRpbi4gQ3VyYWJpdHVyIHV0IGxvcmVtIGFjIGVyYXQgcG9ydGEgbGFjaW5pYSBwdWx2aW5hciBldCByaXN1cy48L3A+XG4gICAgICAgICAgICAgICAgICAgICA8cD5TZWQgYXQgbnVsbGEgZG9sb3IuIFV0IHF1aXMgcXVhbSBmaW5pYnVzLCBlZmZpY2l0dXIgbWkgc2VkLCBzb2xsaWNpdHVkaW4gdXJuYS4gTnVuYyB2ZWwgdG9ydG9yIGNvbW1vZG8sIG1vbGxpcyBlc3QgZXUsIGJsYW5kaXQgbWFzc2EuIFZpdmFtdXMgc2VkIG1pIHZpdGFlIHNlbSBjb21tb2RvIGNvbnNlY3RldHVyIGV1IGluIHNlbS4gRG9uZWMgdXQgZmFjaWxpc2lzIG9kaW8uIE51bGxhbSBpZCBlbGVtZW50dW0gZXJvcywgbm9uIHRlbXB1cyB0b3J0b3IuIE51bGxhbSBpbiBtYXR0aXMgZmVsaXMuIFByYWVzZW50IGJpYmVuZHVtIGJsYW5kaXQgYW50ZSwgZXQgZWxlbWVudHVtIG1ldHVzIGNvbnNlY3RldHVyIHZpdGFlLjwvcD5cbiAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiY2xvc2UtbW9kYWwtaWNvblwiIG9uQ2xpY2s9e3RoaXMuY2xvc2VNb2RhbH0+PGkgY2xhc3NOYW1lPVwiZmEgZmEtdGltZXNcIiAvPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPC9Nb2RhbD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpPT57XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGNhcnRBY3Rpb25zLnN0YXJ0QWRkb3JVcGRhdGVDYXJ0SXRlbShhY3RpdmVQcm9kdWN0LnNlbGVjdGVkVmFyaWFudCwgMSkpO1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ1dHRvbiBsYXJnZSBhZGQtdG8tY2FydFwiPkFkZCBUbyBDYXJ0PC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCIvaW1hZ2VzL2NyZWRpdC1jYXJkcy5wbmdcIiBhbHQ9XCJBY2NlcHRlZCBjcmVkaXQgY2FyZHNcIiAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIClcbiAgICB9ZWxzZXtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxMb2FkZXIgLz5cbiAgICAgIClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgKHN0YXRlKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGl2ZVByb2R1Y3Q6IHN0YXRlLnByb2R1Y3RzLmFjdGl2ZVxuICAgIH1cbiAgfVxuKShQcm9kdWN0KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9jb250YWluZXJzL1Byb2R1Y3QuanN4IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7TGlua30gZnJvbSAncmVhY3Qtcm91dGVyJztcblxuY2xhc3MgUHJvZHVjdEl0ZW0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgbGV0IHt0aXRsZSwgaWQsIGltYWdlfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9kdWN0LWl0ZW1cIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9kdWN0LWl0ZW0taW5uZXJcIj5cbiAgICAgICAgICA8TGluayB0bz17YC9wcm9kdWN0LyR7aWR9YH0+PGRpdiBjbGFzc05hbWU9XCJwcm9kdWN0LWl0ZW0taW1hZ2VcIiBzdHlsZT17e2JhY2tncm91bmRJbWFnZTogJ3VybCgnICsgaW1hZ2UgKyAnKSd9fT48L2Rpdj48L0xpbms+XG4gICAgICAgICAgPGhyIC8+XG4gICAgICAgICAgPGg2IGNsYXNzTmFtZT1cInByb2R1Y3QtaXRlbS10aXRsZVwiPjxMaW5rIHRvPXtgL3Byb2R1Y3QvJHtpZH1gfT57dGl0bGV9PC9MaW5rPjwvaDY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhdXRob3JcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXV0aG9yX19waG90b1wiIHN0eWxlPXt7YmFja2dyb3VuZEltYWdlOiAndXJsKCcgKyBpbWFnZSArICcpJ319PjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhdXRob3JfX2luZm9cIj5cbiAgICAgICAgICAgICAgPExpbmsgdG8gPXtgL2F1dGhvci9gfT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImF1dGhvcl9fbmFtZVwiPkphbWVzODg8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImF1dGhvcl9fbG9jYXRpb25cIj5DYW50b24gT2hpbzwvZGl2PlxuICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7LyogPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnByb3BzLmFkZFRvQ2FydH0gY2xhc3NOYW1lPVwiYnRuXCI+QWRkIFRvIENhcnQ8L2J1dHRvbj4gKi99XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvZHVjdEl0ZW07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvY29udGFpbmVycy9Qcm9kdWN0SXRlbS5qc3giLCJ2YXIgY2FtZWwyaHlwaGVuID0gcmVxdWlyZSgnc3RyaW5nLWNvbnZlcnQvY2FtZWwyaHlwaGVuJyk7XG5cbnZhciBpc0RpbWVuc2lvbiA9IGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gIHZhciByZSA9IC9baGVpZ2h0fHdpZHRoXSQvO1xuICByZXR1cm4gcmUudGVzdChmZWF0dXJlKTtcbn07XG5cbnZhciBvYmoybXEgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBtcSA9ICcnO1xuICB2YXIgZmVhdHVyZXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChmZWF0dXJlLCBpbmRleCkge1xuICAgIHZhciB2YWx1ZSA9IG9ialtmZWF0dXJlXTtcbiAgICBmZWF0dXJlID0gY2FtZWwyaHlwaGVuKGZlYXR1cmUpO1xuICAgIC8vIEFkZCBweCB0byBkaW1lbnNpb24gZmVhdHVyZXNcbiAgICBpZiAoaXNEaW1lbnNpb24oZmVhdHVyZSkgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgdmFsdWUgPSB2YWx1ZSArICdweCc7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgbXEgKz0gZmVhdHVyZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgbXEgKz0gJ25vdCAnICsgZmVhdHVyZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbXEgKz0gJygnICsgZmVhdHVyZSArICc6ICcgKyB2YWx1ZSArICcpJztcbiAgICB9XG4gICAgaWYgKGluZGV4IDwgZmVhdHVyZXMubGVuZ3RoLTEpIHtcbiAgICAgIG1xICs9ICcgYW5kICdcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbXE7XG59O1xuXG52YXIganNvbjJtcSA9IGZ1bmN0aW9uIChxdWVyeSkge1xuICB2YXIgbXEgPSAnJztcbiAgaWYgKHR5cGVvZiBxdWVyeSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcXVlcnk7XG4gIH1cbiAgLy8gSGFuZGxpbmcgYXJyYXkgb2YgbWVkaWEgcXVlcmllc1xuICBpZiAocXVlcnkgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHF1ZXJ5LmZvckVhY2goZnVuY3Rpb24gKHEsIGluZGV4KSB7XG4gICAgICBtcSArPSBvYmoybXEocSk7XG4gICAgICBpZiAoaW5kZXggPCBxdWVyeS5sZW5ndGgtMSkge1xuICAgICAgICBtcSArPSAnLCAnXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1xO1xuICB9XG4gIC8vIEhhbmRsaW5nIHNpbmdsZSBtZWRpYSBxdWVyeVxuICByZXR1cm4gb2JqMm1xKHF1ZXJ5KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ganNvbjJtcTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vanNvbjJtcS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gOTNcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgfVxuICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCksXG4gICAgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKiBEZXRlY3QgaWYgcHJvcGVydGllcyBzaGFkb3dpbmcgdGhvc2Ugb24gYE9iamVjdC5wcm90b3R5cGVgIGFyZSBub24tZW51bWVyYWJsZS4gKi9cbnZhciBub25FbnVtU2hhZG93cyA9ICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgJ3ZhbHVlT2YnOiAxIH0sICd2YWx1ZU9mJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAvLyBTYWZhcmkgOC4xIG1ha2VzIGBhcmd1bWVudHMuY2FsbGVlYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICAvLyBTYWZhcmkgOSBtYWtlcyBgYXJndW1lbnRzLmxlbmd0aGAgZW51bWVyYWJsZSBpbiBzdHJpY3QgbW9kZS5cbiAgdmFyIHJlc3VsdCA9IChpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpXG4gICAgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpXG4gICAgOiBbXTtcblxuICB2YXIgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aCxcbiAgICAgIHNraXBJbmRleGVzID0gISFsZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoa2V5ID09ICdsZW5ndGgnIHx8IGlzSW5kZXgoa2V5LCBsZW5ndGgpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICB9XG4gICAgaW5kZXggPSAtMTtcbiAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgfVxuICAgIG90aGVyQXJnc1tzdGFydF0gPSBhcnJheTtcbiAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgPyBzb3VyY2Vba2V5XSA6IG5ld1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgIGxlbmd0aCA9IDE7XG4gICAgfVxuICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHwgcmVJc1VpbnQudGVzdCh2YWx1ZSkpICYmXG4gICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgKSB7XG4gICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIC8vIFNhZmFyaSA4LjEgbWFrZXMgYGFyZ3VtZW50cy5jYWxsZWVgIGVudW1lcmFibGUgaW4gc3RyaWN0IG1vZGUuXG4gIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgKCFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgfHwgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gYXJnc1RhZyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gKiBpcyBhbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDgtOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gaXNPYmplY3QodmFsdWUpID8gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQXNzaWducyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGVcbiAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICogU3Vic2VxdWVudCBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgIGFuZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYE9iamVjdC5hc3NpZ25gXShodHRwczovL21kbi5pby9PYmplY3QvYXNzaWduKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMTAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICogQHNlZSBfLmFzc2lnbkluXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBCYXIoKSB7XG4gKiAgIHRoaXMuYyA9IDM7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gKlxuICogXy5hc3NpZ24oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAqL1xudmFyIGFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gIGlmIChub25FbnVtU2hhZG93cyB8fCBpc1Byb3RvdHlwZShzb3VyY2UpIHx8IGlzQXJyYXlMaWtlKHNvdXJjZSkpIHtcbiAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH1cbiAgfVxufSk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9sb2Rhc2guYXNzaWduL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA5NVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCJmdW5jdGlvbiB3YXJuKHMpIHtcbiAgY29uc29sZS53YXJuKCdbcmVhY3QtZ2FdJywgcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1nYS9zcmMvdXRpbHMvY29uc29sZS93YXJuLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiLy8gR0Egc3RyaW5ncyBuZWVkIHRvIGhhdmUgbGVhZGluZy90cmFpbGluZyB3aGl0ZXNwYWNlIHRyaW1tZWQsIGFuZCBub3QgYWxsXG4vLyBicm93c2VycyBoYXZlIFN0cmluZy5wcm90b3RveXBlLnRyaW0oKS5cblxuZnVuY3Rpb24gdHJpbShzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0cmltO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWdhL3NyYy91dGlscy90cmltLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiLyohXG4gKiBBZGFwdGVkIGZyb20galF1ZXJ5IFVJIGNvcmVcbiAqXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMTQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2NhdGVnb3J5L3VpLWNvcmUvXG4gKi9cblxuZnVuY3Rpb24gZm9jdXNhYmxlKGVsZW1lbnQsIGlzVGFiSW5kZXhOb3ROYU4pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKC9pbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9ufG9iamVjdC8udGVzdChub2RlTmFtZSkgP1xuICAgICFlbGVtZW50LmRpc2FibGVkIDpcbiAgICBcImFcIiA9PT0gbm9kZU5hbWUgP1xuICAgICAgZWxlbWVudC5ocmVmIHx8IGlzVGFiSW5kZXhOb3ROYU4gOlxuICAgICAgaXNUYWJJbmRleE5vdE5hTikgJiYgdmlzaWJsZShlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gaGlkZGVuKGVsKSB7XG4gIHJldHVybiAoZWwub2Zmc2V0V2lkdGggPD0gMCAmJiBlbC5vZmZzZXRIZWlnaHQgPD0gMCkgfHxcbiAgICBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZSc7XG59XG5cbmZ1bmN0aW9uIHZpc2libGUoZWxlbWVudCkge1xuICB3aGlsZSAoZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50ID09PSBkb2N1bWVudC5ib2R5KSBicmVhaztcbiAgICBpZiAoaGlkZGVuKGVsZW1lbnQpKSByZXR1cm4gZmFsc2U7XG4gICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdGFiYmFibGUoZWxlbWVudCkge1xuICB2YXIgdGFiSW5kZXggPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcbiAgaWYgKHRhYkluZGV4ID09PSBudWxsKSB0YWJJbmRleCA9IHVuZGVmaW5lZDtcbiAgdmFyIGlzVGFiSW5kZXhOYU4gPSBpc05hTih0YWJJbmRleCk7XG4gIHJldHVybiAoaXNUYWJJbmRleE5hTiB8fCB0YWJJbmRleCA+PSAwKSAmJiBmb2N1c2FibGUoZWxlbWVudCwgIWlzVGFiSW5kZXhOYU4pO1xufVxuXG5mdW5jdGlvbiBmaW5kVGFiYmFibGVEZXNjZW5kYW50cyhlbGVtZW50KSB7XG4gIHJldHVybiBbXS5zbGljZS5jYWxsKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnKicpLCAwKS5maWx0ZXIoZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gdGFiYmFibGUoZWwpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmaW5kVGFiYmFibGVEZXNjZW5kYW50cztcblxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LW1vZGFsL2xpYi9oZWxwZXJzL3RhYmJhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gICAgY2xhc3NOYW1lOiAnJyxcbiAgICBhY2Nlc3NpYmlsaXR5OiB0cnVlLFxuICAgIGFkYXB0aXZlSGVpZ2h0OiBmYWxzZSxcbiAgICBhcnJvd3M6IHRydWUsXG4gICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgIGF1dG9wbGF5U3BlZWQ6IDMwMDAsXG4gICAgY2VudGVyTW9kZTogZmFsc2UsXG4gICAgY2VudGVyUGFkZGluZzogJzUwcHgnLFxuICAgIGNzc0Vhc2U6ICdlYXNlJyxcbiAgICBjdXN0b21QYWdpbmc6IGZ1bmN0aW9uIGN1c3RvbVBhZ2luZyhpKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdidXR0b24nLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGkgKyAxXG4gICAgICAgICk7XG4gICAgfSxcbiAgICBkb3RzOiBmYWxzZSxcbiAgICBkb3RzQ2xhc3M6ICdzbGljay1kb3RzJyxcbiAgICBkcmFnZ2FibGU6IHRydWUsXG4gICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICBlZGdlRnJpY3Rpb246IDAuMzUsXG4gICAgZmFkZTogZmFsc2UsXG4gICAgZm9jdXNPblNlbGVjdDogZmFsc2UsXG4gICAgaW5maW5pdGU6IHRydWUsXG4gICAgaW5pdGlhbFNsaWRlOiAwLFxuICAgIGxhenlMb2FkOiBmYWxzZSxcbiAgICBwYXVzZU9uSG92ZXI6IHRydWUsXG4gICAgcmVzcG9uc2l2ZTogbnVsbCxcbiAgICBydGw6IGZhbHNlLFxuICAgIHNsaWRlOiAnZGl2JyxcbiAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgc3BlZWQ6IDUwMCxcbiAgICBzd2lwZTogdHJ1ZSxcbiAgICBzd2lwZVRvU2xpZGU6IGZhbHNlLFxuICAgIHRvdWNoTW92ZTogdHJ1ZSxcbiAgICB0b3VjaFRocmVzaG9sZDogNSxcbiAgICB1c2VDU1M6IHRydWUsXG4gICAgdmFyaWFibGVXaWR0aDogZmFsc2UsXG4gICAgdmVydGljYWw6IGZhbHNlLFxuICAgIHdhaXRGb3JBbmltYXRlOiB0cnVlLFxuICAgIGFmdGVyQ2hhbmdlOiBudWxsLFxuICAgIGJlZm9yZUNoYW5nZTogbnVsbCxcbiAgICBlZGdlRXZlbnQ6IG51bGwsXG4gICAgaW5pdDogbnVsbCxcbiAgICBzd2lwZUV2ZW50OiBudWxsLFxuICAgIC8vIG5leHRBcnJvdywgcHJldkFycm93IGFyZSByZWFjdCBjb21wb25ldHNcbiAgICBuZXh0QXJyb3c6IG51bGwsXG4gICAgcHJldkFycm93OiBudWxsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRQcm9wcztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3Qtc2xpY2svbGliL2RlZmF1bHQtcHJvcHMuanNcbi8vIG1vZHVsZSBpZCA9IDEzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmdldFRyYWNrTGVmdCA9IGV4cG9ydHMuZ2V0VHJhY2tBbmltYXRlQ1NTID0gZXhwb3J0cy5nZXRUcmFja0NTUyA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9vYmplY3RBc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBfb2JqZWN0QXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdEFzc2lnbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjaGVja1NwZWNLZXlzID0gZnVuY3Rpb24gY2hlY2tTcGVjS2V5cyhzcGVjLCBrZXlzQXJyYXkpIHtcbiAgcmV0dXJuIGtleXNBcnJheS5yZWR1Y2UoZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgc3BlYy5oYXNPd25Qcm9wZXJ0eShrZXkpO1xuICB9LCB0cnVlKSA/IG51bGwgOiBjb25zb2xlLmVycm9yKCdLZXlzIE1pc3NpbmcnLCBzcGVjKTtcbn07XG5cbnZhciBnZXRUcmFja0NTUyA9IGV4cG9ydHMuZ2V0VHJhY2tDU1MgPSBmdW5jdGlvbiBnZXRUcmFja0NTUyhzcGVjKSB7XG4gIGNoZWNrU3BlY0tleXMoc3BlYywgWydsZWZ0JywgJ3ZhcmlhYmxlV2lkdGgnLCAnc2xpZGVDb3VudCcsICdzbGlkZXNUb1Nob3cnLCAnc2xpZGVXaWR0aCddKTtcblxuICB2YXIgdHJhY2tXaWR0aCwgdHJhY2tIZWlnaHQ7XG5cbiAgdmFyIHRyYWNrQ2hpbGRyZW4gPSBzcGVjLnNsaWRlQ291bnQgKyAyICogc3BlYy5zbGlkZXNUb1Nob3c7XG5cbiAgaWYgKCFzcGVjLnZlcnRpY2FsKSB7XG4gICAgaWYgKHNwZWMudmFyaWFibGVXaWR0aCkge1xuICAgICAgdHJhY2tXaWR0aCA9IChzcGVjLnNsaWRlQ291bnQgKyAyICogc3BlYy5zbGlkZXNUb1Nob3cpICogc3BlYy5zbGlkZVdpZHRoO1xuICAgIH0gZWxzZSBpZiAoc3BlYy5jZW50ZXJNb2RlKSB7XG4gICAgICB0cmFja1dpZHRoID0gKHNwZWMuc2xpZGVDb3VudCArIDIgKiAoc3BlYy5zbGlkZXNUb1Nob3cgKyAxKSkgKiBzcGVjLnNsaWRlV2lkdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYWNrV2lkdGggPSAoc3BlYy5zbGlkZUNvdW50ICsgMiAqIHNwZWMuc2xpZGVzVG9TaG93KSAqIHNwZWMuc2xpZGVXaWR0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdHJhY2tIZWlnaHQgPSB0cmFja0NoaWxkcmVuICogc3BlYy5zbGlkZUhlaWdodDtcbiAgfVxuXG4gIHZhciBzdHlsZSA9IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIFdlYmtpdFRyYW5zZm9ybTogIXNwZWMudmVydGljYWwgPyAndHJhbnNsYXRlM2QoJyArIHNwZWMubGVmdCArICdweCwgMHB4LCAwcHgpJyA6ICd0cmFuc2xhdGUzZCgwcHgsICcgKyBzcGVjLmxlZnQgKyAncHgsIDBweCknLFxuICAgIHRyYW5zZm9ybTogIXNwZWMudmVydGljYWwgPyAndHJhbnNsYXRlM2QoJyArIHNwZWMubGVmdCArICdweCwgMHB4LCAwcHgpJyA6ICd0cmFuc2xhdGUzZCgwcHgsICcgKyBzcGVjLmxlZnQgKyAncHgsIDBweCknLFxuICAgIHRyYW5zaXRpb246ICcnLFxuICAgIFdlYmtpdFRyYW5zaXRpb246ICcnLFxuICAgIG1zVHJhbnNmb3JtOiAhc3BlYy52ZXJ0aWNhbCA/ICd0cmFuc2xhdGVYKCcgKyBzcGVjLmxlZnQgKyAncHgpJyA6ICd0cmFuc2xhdGVZKCcgKyBzcGVjLmxlZnQgKyAncHgpJ1xuICB9O1xuXG4gIGlmICh0cmFja1dpZHRoKSB7XG4gICAgKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHN0eWxlLCB7IHdpZHRoOiB0cmFja1dpZHRoIH0pO1xuICB9XG5cbiAgaWYgKHRyYWNrSGVpZ2h0KSB7XG4gICAgKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHN0eWxlLCB7IGhlaWdodDogdHJhY2tIZWlnaHQgfSk7XG4gIH1cblxuICAvLyBGYWxsYmFjayBmb3IgSUU4XG4gIGlmICh3aW5kb3cgJiYgIXdpbmRvdy5hZGRFdmVudExpc3RlbmVyICYmIHdpbmRvdy5hdHRhY2hFdmVudCkge1xuICAgIGlmICghc3BlYy52ZXJ0aWNhbCkge1xuICAgICAgc3R5bGUubWFyZ2luTGVmdCA9IHNwZWMubGVmdCArICdweCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLm1hcmdpblRvcCA9IHNwZWMubGVmdCArICdweCc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufTtcblxudmFyIGdldFRyYWNrQW5pbWF0ZUNTUyA9IGV4cG9ydHMuZ2V0VHJhY2tBbmltYXRlQ1NTID0gZnVuY3Rpb24gZ2V0VHJhY2tBbmltYXRlQ1NTKHNwZWMpIHtcbiAgY2hlY2tTcGVjS2V5cyhzcGVjLCBbJ2xlZnQnLCAndmFyaWFibGVXaWR0aCcsICdzbGlkZUNvdW50JywgJ3NsaWRlc1RvU2hvdycsICdzbGlkZVdpZHRoJywgJ3NwZWVkJywgJ2Nzc0Vhc2UnXSk7XG5cbiAgdmFyIHN0eWxlID0gZ2V0VHJhY2tDU1Moc3BlYyk7XG4gIC8vIHVzZUNTUyBpcyB0cnVlIGJ5IGRlZmF1bHQgc28gaXQgY2FuIGJlIHVuZGVmaW5lZFxuICBzdHlsZS5XZWJraXRUcmFuc2l0aW9uID0gJy13ZWJraXQtdHJhbnNmb3JtICcgKyBzcGVjLnNwZWVkICsgJ21zICcgKyBzcGVjLmNzc0Vhc2U7XG4gIHN0eWxlLnRyYW5zaXRpb24gPSAndHJhbnNmb3JtICcgKyBzcGVjLnNwZWVkICsgJ21zICcgKyBzcGVjLmNzc0Vhc2U7XG4gIHJldHVybiBzdHlsZTtcbn07XG5cbnZhciBnZXRUcmFja0xlZnQgPSBleHBvcnRzLmdldFRyYWNrTGVmdCA9IGZ1bmN0aW9uIGdldFRyYWNrTGVmdChzcGVjKSB7XG5cbiAgY2hlY2tTcGVjS2V5cyhzcGVjLCBbJ3NsaWRlSW5kZXgnLCAndHJhY2tSZWYnLCAnaW5maW5pdGUnLCAnY2VudGVyTW9kZScsICdzbGlkZUNvdW50JywgJ3NsaWRlc1RvU2hvdycsICdzbGlkZXNUb1Njcm9sbCcsICdzbGlkZVdpZHRoJywgJ2xpc3RXaWR0aCcsICd2YXJpYWJsZVdpZHRoJywgJ3NsaWRlSGVpZ2h0J10pO1xuXG4gIHZhciBzbGlkZU9mZnNldCA9IDA7XG4gIHZhciB0YXJnZXRMZWZ0O1xuICB2YXIgdGFyZ2V0U2xpZGU7XG4gIHZhciB2ZXJ0aWNhbE9mZnNldCA9IDA7XG5cbiAgaWYgKHNwZWMuZmFkZSkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWYgKHNwZWMuaW5maW5pdGUpIHtcbiAgICBpZiAoc3BlYy5zbGlkZUNvdW50ID49IHNwZWMuc2xpZGVzVG9TaG93KSB7XG4gICAgICBzbGlkZU9mZnNldCA9IHNwZWMuc2xpZGVXaWR0aCAqIHNwZWMuc2xpZGVzVG9TaG93ICogLTE7XG4gICAgICB2ZXJ0aWNhbE9mZnNldCA9IHNwZWMuc2xpZGVIZWlnaHQgKiBzcGVjLnNsaWRlc1RvU2hvdyAqIC0xO1xuICAgIH1cbiAgICBpZiAoc3BlYy5zbGlkZUNvdW50ICUgc3BlYy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgaWYgKHNwZWMuc2xpZGVJbmRleCArIHNwZWMuc2xpZGVzVG9TY3JvbGwgPiBzcGVjLnNsaWRlQ291bnQgJiYgc3BlYy5zbGlkZUNvdW50ID4gc3BlYy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgaWYgKHNwZWMuc2xpZGVJbmRleCA+IHNwZWMuc2xpZGVDb3VudCkge1xuICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gKHNwZWMuc2xpZGVzVG9TaG93IC0gKHNwZWMuc2xpZGVJbmRleCAtIHNwZWMuc2xpZGVDb3VudCkpICogc3BlYy5zbGlkZVdpZHRoICogLTE7XG4gICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoc3BlYy5zbGlkZXNUb1Nob3cgLSAoc3BlYy5zbGlkZUluZGV4IC0gc3BlYy5zbGlkZUNvdW50KSkgKiBzcGVjLnNsaWRlSGVpZ2h0ICogLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2xpZGVPZmZzZXQgPSBzcGVjLnNsaWRlQ291bnQgJSBzcGVjLnNsaWRlc1RvU2Nyb2xsICogc3BlYy5zbGlkZVdpZHRoICogLTE7XG4gICAgICAgICAgdmVydGljYWxPZmZzZXQgPSBzcGVjLnNsaWRlQ291bnQgJSBzcGVjLnNsaWRlc1RvU2Nyb2xsICogc3BlYy5zbGlkZUhlaWdodCAqIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuXG4gICAgaWYgKHNwZWMuc2xpZGVDb3VudCAlIHNwZWMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgIGlmIChzcGVjLnNsaWRlSW5kZXggKyBzcGVjLnNsaWRlc1RvU2Nyb2xsID4gc3BlYy5zbGlkZUNvdW50ICYmIHNwZWMuc2xpZGVDb3VudCA+IHNwZWMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgIHZhciBzbGlkZXNUb09mZnNldCA9IHNwZWMuc2xpZGVzVG9TaG93IC0gc3BlYy5zbGlkZUNvdW50ICUgc3BlYy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgc2xpZGVPZmZzZXQgPSBzbGlkZXNUb09mZnNldCAqIHNwZWMuc2xpZGVXaWR0aDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc3BlYy5jZW50ZXJNb2RlKSB7XG4gICAgaWYgKHNwZWMuaW5maW5pdGUpIHtcbiAgICAgIHNsaWRlT2Zmc2V0ICs9IHNwZWMuc2xpZGVXaWR0aCAqIE1hdGguZmxvb3Ioc3BlYy5zbGlkZXNUb1Nob3cgLyAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVPZmZzZXQgPSBzcGVjLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKHNwZWMuc2xpZGVzVG9TaG93IC8gMik7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzcGVjLnZlcnRpY2FsKSB7XG4gICAgdGFyZ2V0TGVmdCA9IHNwZWMuc2xpZGVJbmRleCAqIHNwZWMuc2xpZGVXaWR0aCAqIC0xICsgc2xpZGVPZmZzZXQ7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0TGVmdCA9IHNwZWMuc2xpZGVJbmRleCAqIHNwZWMuc2xpZGVIZWlnaHQgKiAtMSArIHZlcnRpY2FsT2Zmc2V0O1xuICB9XG5cbiAgaWYgKHNwZWMudmFyaWFibGVXaWR0aCA9PT0gdHJ1ZSkge1xuICAgIHZhciB0YXJnZXRTbGlkZUluZGV4O1xuICAgIGlmIChzcGVjLnNsaWRlQ291bnQgPD0gc3BlYy5zbGlkZXNUb1Nob3cgfHwgc3BlYy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgIHRhcmdldFNsaWRlID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHNwZWMudHJhY2tSZWYpLmNoaWxkTm9kZXNbc3BlYy5zbGlkZUluZGV4XTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0U2xpZGVJbmRleCA9IHNwZWMuc2xpZGVJbmRleCArIHNwZWMuc2xpZGVzVG9TaG93O1xuICAgICAgdGFyZ2V0U2xpZGUgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoc3BlYy50cmFja1JlZikuY2hpbGROb2Rlc1t0YXJnZXRTbGlkZUluZGV4XTtcbiAgICB9XG4gICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlID8gdGFyZ2V0U2xpZGUub2Zmc2V0TGVmdCAqIC0xIDogMDtcbiAgICBpZiAoc3BlYy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICBpZiAoc3BlYy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGFyZ2V0U2xpZGUgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoc3BlYy50cmFja1JlZikuY2hpbGRyZW5bc3BlYy5zbGlkZUluZGV4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFNsaWRlID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHNwZWMudHJhY2tSZWYpLmNoaWxkcmVuW3NwZWMuc2xpZGVJbmRleCArIHNwZWMuc2xpZGVzVG9TaG93ICsgMV07XG4gICAgICB9XG5cbiAgICAgIGlmICh0YXJnZXRTbGlkZSkge1xuICAgICAgICB0YXJnZXRMZWZ0ID0gdGFyZ2V0U2xpZGUub2Zmc2V0TGVmdCAqIC0xICsgKHNwZWMubGlzdFdpZHRoIC0gdGFyZ2V0U2xpZGUub2Zmc2V0V2lkdGgpIC8gMjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0TGVmdDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LXNsaWNrL2xpYi9taXhpbnMvdHJhY2tIZWxwZXIuanNcbi8vIG1vZHVsZSBpZCA9IDE0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtSb3V0ZSwgUm91dGVyLCBJbmRleFJvdXRlLCBicm93c2VySGlzdG9yeX0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmxldCB7Y29ubmVjdH0gPSByZXF1aXJlKCdyZWFjdC1yZWR1eCcpO1xubGV0IHN0b3JlID0gcmVxdWlyZSgnY29uZmlndXJlU3RvcmUnKS5jb25maWd1cmUoKTtcblxuaW1wb3J0IERvY3VtZW50TWV0YSBmcm9tICdyZWFjdC1kb2N1bWVudC1tZXRhJztcbmltcG9ydCBNYWluIGZyb20gJ01haW4nO1xuaW1wb3J0IEluZGV4IGZyb20gJ0luZGV4JztcbmltcG9ydCBQcm9kdWN0cyBmcm9tICdQcm9kdWN0cyc7XG5pbXBvcnQgUHJvZHVjdCBmcm9tICdQcm9kdWN0JztcbmltcG9ydCBDb2xsZWN0aW9ucyBmcm9tICdDb2xsZWN0aW9ucyc7XG5pbXBvcnQgQ29sbGVjdGlvbiBmcm9tICdDb2xsZWN0aW9uJztcbmltcG9ydCBVcGxvYWQgZnJvbSAnVXBsb2FkJztcbmltcG9ydCBPcmRlclN0YXR1cyBmcm9tICdPcmRlclN0YXR1cyc7XG5pbXBvcnQgTWFwIGZyb20gJ01hcCc7XG5pbXBvcnQgTG9naW4gZnJvbSAnTG9naW4nO1xuaW1wb3J0IEFib3V0IGZyb20gJ0Fib3V0JztcbmltcG9ydCBDb250YWN0IGZyb20gJ0NvbnRhY3QnO1xuXG5pbXBvcnQgUmVhY3RHQSBmcm9tICdyZWFjdC1nYSc7XG4vLyBSZWFjdEdBLmluaXRpYWxpemUoJ1VBLTYyNDE4MjUtOScpOyAvLyBpbml0aWFsaXplIEdvb2dsZSBBbmFseXRpY3NcblxuZnVuY3Rpb24gbG9nUGFnZVZpZXcobG9jYXRpb24pIHtcbiAgUmVhY3RHQS5zZXQoeyBwYWdlOiBsb2NhdGlvbi5wYXRobmFtZSB9KTtcbiAgUmVhY3RHQS5wYWdldmlldyhsb2NhdGlvbi5wYXRobmFtZSk7XG59XG5cbmJyb3dzZXJIaXN0b3J5Lmxpc3RlbigobG9jYXRpb24pID0+IHtcbiAgbG9nUGFnZVZpZXcobG9jYXRpb24pO1xuXG4gIC8vIHNjcm9sbCB0byB0b3Agd2hlbiBjaGFuZ2luZyBwYWdlXG4gIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCAoXG4gIDxSb3V0ZXIgaGlzdG9yeT17YnJvd3Nlckhpc3Rvcnl9PlxuICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGNvbXBvbmVudD17TWFpbn0+XG4gICAgICA8SW5kZXhSb3V0ZSBwYXRoPVwiL1wiIGNvbXBvbmVudD17SW5kZXh9IC8+XG4gICAgICA8Um91dGUgcGF0aD0nY29sbGVjdGlvbnMnIGNvbXBvbmVudD17Q29sbGVjdGlvbnN9IC8+XG4gICAgICA8Um91dGUgcGF0aD0nY29sbGVjdGlvbi86Y29sbGVjdGlvbklkJyBjb21wb25lbnQ9e0NvbGxlY3Rpb259IC8+XG4gICAgICA8Um91dGUgcGF0aD1cInByb2R1Y3RzXCIgY29tcG9uZW50PXtQcm9kdWN0c30gLz5cbiAgICAgIDxSb3V0ZSBwYXRoPVwicHJvZHVjdC86cHJvZHVjdElkXCIgY29tcG9uZW50PXtQcm9kdWN0fSAvPlxuICAgICAgPFJvdXRlIHBhdGg9XCJteS1jaXR5XCIgY29tcG9uZW50PXtQcm9kdWN0c30gLz5cbiAgICAgIDxSb3V0ZSBwYXRoPVwidXBsb2FkXCIgY29tcG9uZW50PXtVcGxvYWR9IC8+XG4gICAgICA8Um91dGUgcGF0aD1cIm9yZGVyLXN0YXR1c1wiIGNvbXBvbmVudD17T3JkZXJTdGF0dXN9IC8+XG4gICAgICA8Um91dGUgcGF0aD1cIm1hcFwiIGNvbXBvbmVudD17TWFwfSAvPlxuICAgICAgPFJvdXRlIHBhdGg9XCJsb2dpblwiIGNvbXBvbmVudD17TG9naW59IC8+XG4gICAgICA8Um91dGUgcGF0aD1cImFib3V0XCIgY29tcG9uZW50PXtBYm91dH0gLz5cbiAgICAgIDxSb3V0ZSBwYXRoPVwiY29udGFjdFwiIGNvbXBvbmVudD17Q29udGFjdH0gLz5cbiAgICA8L1JvdXRlPlxuICA8L1JvdXRlcj5cbik7XG5cblxuLy8gY29uc3QgY29tcG9uZW50Um91dGVzID0ge1xuLy8gICBjb21wb25lbnQ6ICdNYWluJyxcbi8vICAgcGF0aDogJy8nLFxuLy8gICBpbmRleFJvdXRlOiB7IGNvbXBvbmVudDogJ0luZGV4JyB9LFxuLy8gICBjaGlsZFJvdXRlczogW1xuLy8gICAgIHtcbi8vICAgICAgIHBhdGg6ICdjb2xsZWN0aW9ucycsXG4vLyAgICAgICBnZXRDb21wb25lbnQobG9jYXRpb24sIGNiKSB7XG4vLyAgICAgICAgIFN5c3RlbS5pbXBvcnQoJ0NvbGxlY3Rpb25zJylcbi8vICAgICAgICAgICAudGhlbihtb2R1bGUgPT4gY2IobnVsbCwgbW9kdWxlLmRlZmF1bHQpKTtcbi8vICAgICAgIH1cbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgIHBhdGg6ICdjb2xsZWN0aW9uLzpjb2xsZWN0aW9uSWQnLFxuLy8gICAgICAgZ2V0Q29tcG9uZW50KGxvY2F0aW9uLCBjYikge1xuLy8gICAgICAgICBTeXN0ZW0uaW1wb3J0KCdDb2xsZWN0aW9uJylcbi8vICAgICAgICAgICAudGhlbihtb2R1bGUgPT4gY2IobnVsbCwgbW9kdWxlLmRlZmF1bHQpKTtcbi8vICAgICAgIH1cbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgIHBhdGg6ICdwcm9kdWN0cycsXG4vLyAgICAgICBnZXRDb21wb25lbnQobG9jYXRpb24sIGNiKSB7XG4vLyAgICAgICAgIFN5c3RlbS5pbXBvcnQoJ1Byb2R1Y3RzJylcbi8vICAgICAgICAgICAudGhlbihtb2R1bGUgPT4gY2IobnVsbCwgbW9kdWxlLmRlZmF1bHQpKTtcbi8vICAgICAgIH1cbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgIHBhdGg6ICdwcm9kdWN0L3Byb2R1Y3RJZCcsXG4vLyAgICAgICBnZXRDb21wb25lbnQobG9jYXRpb24sIGNiKSB7XG4vLyAgICAgICAgIFN5c3RlbS5pbXBvcnQoJ1Byb2R1Y3QnKVxuLy8gICAgICAgICAgIC50aGVuKG1vZHVsZSA9PiBjYihudWxsLCBtb2R1bGUuZGVmYXVsdCkpO1xuLy8gICAgICAgfVxuLy8gICAgIH0sXG4vLyAgICAge1xuLy8gICAgICAgcGF0aDogJ215LWNpdHknLFxuLy8gICAgICAgZ2V0Q29tcG9uZW50KGxvY2F0aW9uLCBjYikge1xuLy8gICAgICAgICBTeXN0ZW0uaW1wb3J0KCdQcm9kdWN0cycpXG4vLyAgICAgICAgICAgLnRoZW4obW9kdWxlID0+IGNiKG51bGwsIG1vZHVsZS5kZWZhdWx0KSk7XG4vLyAgICAgICB9XG4vLyAgICAgfSxcbi8vICAgICB7XG4vLyAgICAgICBwYXRoOiAnYWJvdXQnLFxuLy8gICAgICAgZ2V0Q29tcG9uZW50KGxvY2F0aW9uLCBjYikge1xuLy8gICAgICAgICBTeXN0ZW0uaW1wb3J0KCdBYm91dCcpXG4vLyAgICAgICAgICAgLnRoZW4obW9kdWxlID0+IGNiKG51bGwsIG1vZHVsZS5kZWZhdWx0KSk7XG4vLyAgICAgICB9XG4vLyAgICAgfSxcbi8vICAgICB7XG4vLyAgICAgICBwYXRoOiAnY29udGFjdCcsXG4vLyAgICAgICBnZXRDb21wb25lbnQobG9jYXRpb24sIGNiKSB7XG4vLyAgICAgICAgIFN5c3RlbS5pbXBvcnQoJ0NvbnRhY3QnKVxuLy8gICAgICAgICAgIC50aGVuKG1vZHVsZSA9PiBjYihudWxsLCBtb2R1bGUuZGVmYXVsdCkpO1xuLy8gICAgICAgfVxuLy8gICAgIH0sXG4vLyAgICAge1xuLy8gICAgICAgcGF0aDogJ3VwbG9hZCcsXG4vLyAgICAgICBnZXRDb21wb25lbnQobG9jYXRpb24sIGNiKSB7XG4vLyAgICAgICAgIFN5c3RlbS5pbXBvcnQoJ1VwbG9hZCcpXG4vLyAgICAgICAgICAgLnRoZW4obW9kdWxlID0+IGNiKG51bGwsIG1vZHVsZS5kZWZhdWx0KSk7XG4vLyAgICAgICB9XG4vLyAgICAgfSxcbi8vICAgICB7XG4vLyAgICAgICBwYXRoOiAnbWFwJyxcbi8vICAgICAgIGdldENvbXBvbmVudChsb2NhdGlvbiwgY2IpIHtcbi8vICAgICAgICAgU3lzdGVtLmltcG9ydCgnTWFwJylcbi8vICAgICAgICAgICAudGhlbihtb2R1bGUgPT4gY2IobnVsbCwgbW9kdWxlLmRlZmF1bHQpKTtcbi8vICAgICAgIH1cbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgIHBhdGg6ICdsb2dpbicsXG4vLyAgICAgICBnZXRDb21wb25lbnQobG9jYXRpb24sIGNiKSB7XG4vLyAgICAgICAgIFN5c3RlbS5pbXBvcnQoJ0xvZ2luJylcbi8vICAgICAgICAgICAudGhlbihtb2R1bGUgPT4gY2IobnVsbCwgbW9kdWxlLmRlZmF1bHQpKTtcbi8vICAgICAgIH1cbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgIHBhdGg6ICdvcmRlci1zdGF0dXMnLFxuLy8gICAgICAgZ2V0Q29tcG9uZW50KGxvY2F0aW9uLCBjYikge1xuLy8gICAgICAgICBTeXN0ZW0uaW1wb3J0KCdPcmRlclN0YXR1cycpXG4vLyAgICAgICAgICAgLnRoZW4obW9kdWxlID0+IGNiKG51bGwsIG1vZHVsZS5kZWZhdWx0KSk7XG4vLyAgICAgICB9XG4vLyAgICAgfVxuLy8gICBdXG4vLyB9O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3JvdXRlci9yb3V0ZXIuanN4IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBGb3JtYXQgZnJvbSAnZm9ybWF0JztcbmxldCB7IGNvbm5lY3QgfSA9IHJlcXVpcmUoJ3JlYWN0LXJlZHV4Jyk7XG5sZXQgYWN0aW9ucyA9IHJlcXVpcmUoJ2NhcnRBY3Rpb25zJyk7XG5cbmNsYXNzIENhcnRJdGVtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCB7ZGlzcGF0Y2gsIGl0ZW0sIGluY3JlbWVudExpbmVJdGVtLCBxdWFudGl0eX0gPSB0aGlzLnByb3BzO1xuXG4gICAgbGV0IGNoYW5nZVF1YW50aXR5ID0gKHF1YW50aXR5KSA9PiB7XG4gICAgICAvLyBjb25zb2xlLmxvZygnY2FydCBJdGVtIG9iamVjdDogJywgaXRlbSk7XG4gICAgICBkaXNwYXRjaChhY3Rpb25zLnN0YXJ0QWRkb3JVcGRhdGVDYXJ0SXRlbShpdGVtLCBwYXJzZUludChxdWFudGl0eSkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJ0LWl0ZW1cIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJ0LWl0ZW1fX2ltZ1wiIHN0eWxlPXt7YmFja2dyb3VuZEltYWdlOiAndXJsKCcgKyBpdGVtLmltYWdlVmFyaWFudHNbMl0uc3JjICsgJyknfX0+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FydC1pdGVtX19jb250ZW50XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJ0LWl0ZW1fX2NvbnRlbnQtcm93XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcnQtaXRlbV9fdmFyaWFudC10aXRsZVwiPntpdGVtLnZhcmlhbnRfdGl0bGV9PC9kaXY+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJjYXJ0LWl0ZW1fX3RpdGxlXCI+e2l0ZW0udGl0bGV9PC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FydC1pdGVtX19jb250ZW50LXJvd1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJ0LWl0ZW1fX3F1YW50aXR5LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuLS1zZWFtbGVzcyBxdWFudGl0eS1kZWNyZW1lbnRcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtjaGFuZ2VRdWFudGl0eSgtMSl9fVxuICAgICAgICAgICAgICA+PHNwYW4+LTwvc3Bhbj48c3BhbiBjbGFzc05hbWU9XCJoaWRlXCI+RGVjcmVtZW50PC9zcGFuPjwvYnV0dG9uPlxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB2YWx1ZT17cXVhbnRpdHl9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2FydC1pdGVtX19xdWFudGl0eVwiXG4gICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICAgICAgbWluPVwiMFwiXG4gICAgICAgICAgICAgICAgcmVhZE9ubHlcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0bi0tc2VhbWxlc3MgcXVhbnRpdHktaW5jcmVtZW50XCJcbiAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7Y2hhbmdlUXVhbnRpdHkoMSl9fVxuICAgICAgICAgICAgICA+PHNwYW4+Kzwvc3Bhbj48c3BhbiBjbGFzc05hbWU9XCJoaWRlXCI+SW5jcmVtZW50PC9zcGFuPjwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJjYXJ0LWl0ZW1fX3ByaWNlXCI+e0Zvcm1hdC5hc01vbmV5KGl0ZW0ucHJpY2UqcXVhbnRpdHkpfTwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICAoc3RhdGUpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgY2FydDogc3RhdGUuY2FydFxuICAgIH1cbiAgfVxuKShDYXJ0SXRlbSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvY29udGFpbmVycy9DYXJ0LWl0ZW0uanN4IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7TGlua30gZnJvbSAncmVhY3Qtcm91dGVyJztcblxuY2xhc3MgQ29sbGVjdGlvbkl0ZW0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgbGV0IHt0aXRsZSwgaWR9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbGxlY3Rpb24taXRlbVwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbGxlY3Rpb24taXRlbS1pbm5lclwiPlxuICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPjxMaW5rIHRvPXtgL2NvbGxlY3Rpb24vJHtpZH1gfT57dGl0bGV9PC9MaW5rPjwvaDI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29sbGVjdGlvbkl0ZW07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvY29udGFpbmVycy9Db2xsZWN0aW9uSXRlbS5qc3giLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xubGV0IHsgY29ubmVjdCB9ID0gcmVxdWlyZSgncmVhY3QtcmVkdXgnKTtcbmxldCBhY3Rpb25zID0gcmVxdWlyZSgnY29sbGVjdGlvbkFjdGlvbnMnKTtcblxuaW1wb3J0IENvbGxlY3Rpb24gZnJvbSAnQ29sbGVjdGlvbic7XG5pbXBvcnQgQ29sbGVjdGlvbkl0ZW0gZnJvbSAnQ29sbGVjdGlvbkl0ZW0nO1xuXG5jbGFzcyBDb2xsZWN0aW9ucyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCl7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQge2NvbGxlY3Rpb25zfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoY29sbGVjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICB7Y29sbGVjdGlvbnMubWFwKGNvbGxlY3Rpb24gPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxDb2xsZWN0aW9uSXRlbSBrZXk9e2NvbGxlY3Rpb24uY29sbGVjdGlvbl9pZH0gaWQ9e2NvbGxlY3Rpb24uY29sbGVjdGlvbl9pZH0gdGl0bGU9e2NvbGxlY3Rpb24udGl0bGV9IC8+XG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKVxuICAgIH1lbHNle1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5Mb2FkaW5nIGNvbGxlY3Rpb25zLi4uPC9kaXY+XG4gICAgICApXG4gICAgfVxuICB9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgKHN0YXRlKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbGxlY3Rpb25zOiBzdGF0ZS5jb2xsZWN0aW9ucy5hbGxcbiAgICB9XG4gIH1cbikoQ29sbGVjdGlvbnMpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbnRhaW5lcnMvQ29sbGVjdGlvbnMuanN4IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7TGluaywgSW5kZXhMaW5rfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuXG5jbGFzcyBGb290ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxmb290ZXIgaWQ9XCJzaXRlLWZvb3RlclwiPlxuICAgICAgICA8bmF2IGNsYXNzTmFtZT1cImZvb3Rlci1uYXZcIj5cbiAgICAgICAgICA8bGk+XG4gICAgICAgICAgICA8TGluayB0bz1cIi9hYm91dFwiIGFjdGl2ZUNsYXNzTmFtZT1cImFjdGl2ZVwiPkFib3V0PC9MaW5rPlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPGxpPlxuICAgICAgICAgICAgPExpbmsgdG89XCIvcHJvZHVjdHNcIiBhY3RpdmVDbGFzc05hbWU9XCJhY3RpdmVcIj5TaG9wIEFsbDwvTGluaz5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgIDxMaW5rIHRvPVwiL2NvbnRhY3RcIiBhY3RpdmVDbGFzc05hbWU9XCJhY3RpdmVcIj5Db250YWN0PC9MaW5rPlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPGxpPlxuICAgICAgICAgICAgPExpbmsgdG89XCIvdXBsb2FkXCIgYWN0aXZlQ2xhc3NOYW1lPVwiYWN0aXZlXCI+VXBsb2FkIERlc2lnbjwvTGluaz5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L25hdj5cbiAgICAgICAgPHA+TG9yZW0gaXBzdW0gZG9sYXIgc2l0IGFtaXQuIFNlZCBkb25vIGF2ZWMuPC9wPlxuICAgICAgPC9mb290ZXI+XG4gICAgKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRm9vdGVyO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbnRhaW5lcnMvRm9vdGVyLmpzeCIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0xpbmssIEluZGV4TGlua30gZnJvbSAncmVhY3Qtcm91dGVyJztcbmxldCB7Y29ubmVjdH0gPSByZXF1aXJlKCdyZWFjdC1yZWR1eCcpO1xubGV0IGNhcnRBY3Rpb25zID0gcmVxdWlyZSgnY2FydEFjdGlvbnMnKTtcblxuY2xhc3MgSGVhZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCB7ZGlzcGF0Y2gsIGNhcnRJdGVtc30gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxoZWFkZXIgaWQ9XCJzaXRlLWhlYWRlclwiPlxuICAgICAgICA8dWwgY2xhc3NOYW1lPVwibWluaS1uYXZcIj5cbiAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibWluaS1uYXYtaXRlbVwiPjxMaW5rIHRvPVwiL2Fib3V0XCIgYWN0aXZlQ2xhc3NOYW1lPVwiYWN0aXZlXCI+QWJvdXQ8L0xpbms+PC9saT5cbiAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibWluaS1uYXYtaXRlbVwiPjxMaW5rIHRvPVwiL29yZGVyLXN0YXR1c1wiIGFjdGl2ZUNsYXNzTmFtZT1cImFjdGl2ZVwiPk9yZGVyIFN0YXR1czwvTGluaz48L2xpPlxuICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJtaW5pLW5hdi1pdGVtXCI+PExpbmsgdG89XCIvbWFwXCIgYWN0aXZlQ2xhc3NOYW1lPVwiYWN0aXZlXCI+TWFwPC9MaW5rPjwvbGk+XG4gICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm1pbmktbmF2LWl0ZW1cIj48TGluayB0bz1cIi9sb2dpblwiIGFjdGl2ZUNsYXNzTmFtZT1cImFjdGl2ZVwiPkxvZ2luPC9MaW5rPjwvbGk+XG4gICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm1pbmktbmF2LWl0ZW0gbWluaS1uYXYtaXRlbS1jYXJ0XCIgb25DbGljaz17KCk9PntcbiAgICAgICAgICAgIGRpc3BhdGNoKGNhcnRBY3Rpb25zLm9wZW5DYXJ0KCkpO1xuICAgICAgICAgIH19PjxpIGNsYXNzTmFtZT1cImZhIGZhLXNob3BwaW5nLWNhcnRcIj48L2k+IHtjYXJ0SXRlbXMgPiAwID8gJ1snICsgY2FydEl0ZW1zICsgJ10nIDogJyd9PC9saT5cbiAgICAgICAgPC91bD5cblxuICAgICAgICA8ZGl2IGlkPVwic2l0ZS1sb2dvXCI+XG4gICAgICAgICAgPEluZGV4TGluayB0bz1cIi9cIiBhY3RpdmVDbGFzc05hbWU9XCJhY3RpdmVcIiBhY3RpdmVTdHlsZT17e2ZvbnRXZWlnaHQ6ICdib2xkJ319PjxpbWcgc3JjPVwiL2ltYWdlcy9sb2dvLnBuZ1wiIC8+PC9JbmRleExpbms+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxuYXYgaWQ9XCJzaXRlLW5hdlwiPlxuICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJzaXRlLW5hdi1pdGVtXCI+PExpbmsgdG89XCIvcHJvZHVjdHNcIiBhY3RpdmVDbGFzc05hbWU9XCJhY3RpdmVcIj5TaG9wPC9MaW5rPjwvbGk+XG4gICAgICAgICAgPGxpIGNsYXNzTmFtZT1cInNpdGUtbmF2LWl0ZW1cIj48TGluayB0bz1cIi9teS1jaXR5XCIgYWN0aXZlQ2xhc3NOYW1lPVwiYWN0aXZlXCI+TXkgQ2l0eTwvTGluaz48L2xpPlxuICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJzaXRlLW5hdi1pdGVtXCI+PExpbmsgdG89XCIvY2F0ZWdvcmllc1wiIGFjdGl2ZUNsYXNzTmFtZT1cImFjdGl2ZVwiPkNhdGVnb3JpZXM8L0xpbms+PC9saT5cbiAgICAgICAgICA8ZGl2IGlkPVwic2l0ZS1uYXYtdXBsb2FkXCI+XG4gICAgICAgICAgICA8TGluayB0bz17YC91cGxvYWRgfT48aW1nIHNyYz1cIi9pbWFnZXMvdXBsb2FkLnBuZ1wiIC8+PC9MaW5rPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L25hdj5cbiAgICAgIDwvaGVhZGVyPlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICAoc3RhdGUpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgY2FydEl0ZW1zOiBzdGF0ZS5jYXJ0LmxpbmVJdGVtc0NvdW50XG4gICAgfVxuICB9XG4pKEhlYWRlcik7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvY29udGFpbmVycy9IZWFkZXIuanN4IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTbGlkZXIgZnJvbSAncmVhY3Qtc2xpY2snO1xuaW1wb3J0IHtMaW5rfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xubGV0IHtjb25uZWN0fSA9IHJlcXVpcmUoJ3JlYWN0LXJlZHV4Jyk7XG5sZXQgYWN0aW9ucyA9IHJlcXVpcmUoJ2NhcnRBY3Rpb25zJyk7XG5cbmltcG9ydCBMb2FkZXIgZnJvbSAnTG9hZGVyJztcbmltcG9ydCBQcm9kdWN0SXRlbSBmcm9tICdQcm9kdWN0SXRlbSc7XG5cbmNsYXNzIEluZGV4IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGhhbmRsZUFkZFRvQ2FydChwcm9kdWN0KSB7XG4gICAgbGV0IHtkaXNwYXRjaH0gPSB0aGlzLnByb3BzO1xuICAgIGRpc3BhdGNoKGFjdGlvbnMuc3RhcnRBZGRvclVwZGF0ZUNhcnRJdGVtKHByb2R1Y3Quc2VsZWN0ZWRWYXJpYW50LCAxKSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgbGV0IHtwcm9kdWN0c30gPSB0aGlzLnByb3BzO1xuICAgIHByb2R1Y3RzID0gcHJvZHVjdHMuc2xpY2UoMCwgMTIpO1xuXG4gICAgLy8gc2xpZGVyIHNldHRpbmdzXG4gICAgdmFyIHNldHRpbmdzID0ge1xuICAgICAgY2xhc3NOYW1lOiAnY2VudGVyIHByb2R1Y3RzLWNhcm91c2VsJyxcbiAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgY2VudGVyUGFkZGluZzogJzYwcHgnLFxuICAgICAgYXV0b3BsYXk6IHRydWUsXG4gICAgICBzbGlkZXNUb1Nob3c6IDQsXG4gICAgICBzcGVlZDogNTAwLFxuICAgICAgYXJyb3dzOiBmYWxzZSxcbiAgICAgIGxhenlMb2FkOiB0cnVlLFxuICAgICAgcmVzcG9uc2l2ZTogW3tcbiAgICAgICAgYnJlYWtwb2ludDogMTAyNCxcbiAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICBzbGlkZXNUb1Nob3c6IDMsXG4gICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDMsXG4gICAgICAgICAgaW5maW5pdGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBicmVha3BvaW50OiA2MDAsXG4gICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgc2xpZGVzVG9TaG93OiAyLFxuICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAyLFxuICAgICAgICAgIGluaXRpYWxTbGlkZTogMlxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGJyZWFrcG9pbnQ6IDQ4MCxcbiAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDFcbiAgICAgICAgfVxuICAgICAgfV1cbiAgICB9O1xuXG4gICAgaWYgKHByb2R1Y3RzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPFNsaWRlciB7Li4uc2V0dGluZ3N9PlxuICAgICAgICAgICAge3Byb2R1Y3RzLm1hcCgocHJvZHVjdCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2IGtleT17aW5kZXh9IGNsYXNzTmFtZT1cInByb2R1Y3RzLWNhcm91c2VsLWl0ZW1cIj5cbiAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPXtgL3Byb2R1Y3QvJHtwcm9kdWN0LmF0dHJzLnByb2R1Y3RfaWR9YH0+PGRpdiBjbGFzc05hbWU9XCJwcm9kdWN0LWl0ZW0taW1hZ2VcIiBzdHlsZT17e2JhY2tncm91bmRJbWFnZTogJ3VybCgnICsgcHJvZHVjdC5zZWxlY3RlZFZhcmlhbnQuaW1hZ2VWYXJpYW50c1s1XS5zcmMgKyAnKSd9fT48L2Rpdj48L0xpbms+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvU2xpZGVyPlxuXG4gICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwic2VjdGlvbi1jYWxsb3V0XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICA8aDQgY2xhc3NOYW1lPVwic2VjdGlvbi1oZWFkbGluZVwiPlNob3cgeW91ciBwcmlkZS4gRGlzcGxheSB5b3VyIHRhbGVudHMuIDxzcGFuIGNsYXNzTmFtZT1cImZvbnQtd2hpdGVcIj5SZXAgeW91ciBjaXR5Ljwvc3Bhbj48L2g0PlxuICAgICAgICAgICAgICA8cD5Mb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBOdWxsYW0gc2VtcGVyIG51bGxhIHZlbCBlbGl0IGdyYXZpZGEsIHZlbCBwbGFjZXJhdCB0dXJwaXMgY29udmFsbGlzLiBQcmFlc2VudCBldSBsb3JlbSBzdXNjaXBpdCwgZ3JhdmlkYSBsZW8gc2VkLCBsdWN0dXMgZXJhdC4gTnVsbGFtIGNvbnNlY3RldHVyLCB0b3J0b3IgYSBmYWNpbGlzaXMgbG9ib3J0aXMsIHZlbGl0IG1hc3NhIG1hdHRpcyByaXN1cywgZWdldCBpbXBlcmRpZXQgdmVsaXQgYXJjdSBub24gbWF1cmlzLiBNYXVyaXMgYmliZW5kdW0gYmliZW5kdW0gbGlndWxhLCBuZWMgbWF4aW11cyBzYXBpZW4gcG9ydGEgbm9uLjwvcD5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWN0aW9uLWNhbGxvdXRfX2N0YS1pdGVtc1wiPlxuICAgICAgICAgICAgICAgIDxMaW5rIHRvPXtgL3Byb2R1Y3RzYH0+PGltZyBzcmM9XCIvaW1hZ2VzL2J1dHRvbi1zaG9wLnBuZ1wiIGFsdD1cIlNob3Agbm93XCIgLz48L0xpbms+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWFyY2gtYm94XCI+XG4gICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1zZWFyY2hcIiAvPlxuICAgICAgICAgICAgICAgICAgPGlucHV0IHR5ZXA9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJLZXl3b3JkIFNlYXJjaFwiIC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPExpbmsgdG89e2AvdXBsb2FkYH0+PGltZyBzcmM9XCIvaW1hZ2VzL2J1dHRvbi11cGxvYWQucG5nXCIgYWx0PVwiU2hvcCBub3dcIiAvPjwvTGluaz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInByb2R1Y3RzLWdyaWQtdGl0bGVcIj5XaGF0J3MgaG90IC8gV2hhdCdzIG5ldzwvaDM+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2R1Y3RzLWdyaWRcIj5cbiAgICAgICAgICAgICAge3Byb2R1Y3RzLm1hcChwcm9kdWN0ID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gPFByb2R1Y3RJdGVtIGtleT17cHJvZHVjdC5rZXl9IGFkZFRvQ2FydD17KCkgPT4gdGhpcy5oYW5kbGVBZGRUb0NhcnQocHJvZHVjdCl9IGlkPXtwcm9kdWN0LmF0dHJzLnByb2R1Y3RfaWR9IHRpdGxlPXtwcm9kdWN0LmF0dHJzLnRpdGxlfSBpbWFnZT17cHJvZHVjdC5zZWxlY3RlZFZhcmlhbnQuaW1hZ2VWYXJpYW50c1s1XS5zcmN9IC8+XG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKVxuICAgIH1lbHNle1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPExvYWRlciAvPlxuICAgICAgKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICAoc3RhdGUpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJvZHVjdHM6IHN0YXRlLnByb2R1Y3RzLmFsbFxuICAgIH1cbiAgfVxuKShJbmRleCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvY29udGFpbmVycy9JbmRleC5qc3giLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEhlYWRlciBmcm9tICdIZWFkZXInO1xuaW1wb3J0IEZvb3RlciBmcm9tICdGb290ZXInO1xuaW1wb3J0IERvY3VtZW50TWV0YSBmcm9tICdyZWFjdC1kb2N1bWVudC1tZXRhJztcbmltcG9ydCBDYXJ0IGZyb20gJ2NhcnQnO1xuXG5jbGFzcyBNYWluIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50e1xuICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHRpdGxlOiAnJyxcbiAgICAgIGNvbnRlbnQ6ICcnXG4gICAgfTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgdGl0bGU6ICdSZXAgWW91ciBDaXR5JyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnUmVwIFlvdXIgQ2l0eSBkZXNjcmlwdGlvbicsXG4gICAgICBtZXRhOiB7XG4gICAgICAgIGNoYXJzZXQ6ICd1dGYtOCdcbiAgICAgIH0sXG4gICAgICBhdXRvOiB7XG4gICAgICAgIG9ncmFwaDogdHJ1ZVxuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgcGFnZU5hbWUgPSB0aGlzLnByb3BzLmxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cigxKS5zcGxpdCgnLycpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgaWQ9XCJtYWluXCIgY2xhc3NOYW1lPXtgcGFnZS0ke3BhZ2VOYW1lWzBdID8gcGFnZU5hbWVbMF0gKyAnIHN1YnBhZ2UnIDogJ2hvbWUnfWB9PlxuICAgICAgICA8RG9jdW1lbnRNZXRhIHsuLi5tZXRhfSAvPlxuICAgICAgICA8SGVhZGVyIC8+XG4gICAgICAgIDxkaXYgaWQ9XCJtYWluLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxDYXJ0IC8+XG4gICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8Rm9vdGVyIC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWFpbjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9jb250YWluZXJzL01haW4uanN4IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmxldCB7Y29ubmVjdH0gPSByZXF1aXJlKCdyZWFjdC1yZWR1eCcpO1xubGV0IGFjdGlvbnMgPSByZXF1aXJlKCdjYXJ0QWN0aW9ucycpO1xuXG5pbXBvcnQgTG9hZGVyIGZyb20gJ0xvYWRlcic7XG5cbmltcG9ydCBQcm9kdWN0IGZyb20gJ1Byb2R1Y3QnO1xuaW1wb3J0IFByb2R1Y3RJdGVtIGZyb20gJ1Byb2R1Y3RJdGVtJztcblxuY2xhc3MgUHJvZHVjdHMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgaGFuZGxlQWRkVG9DYXJ0KHByb2R1Y3QpIHtcbiAgICBsZXQge2Rpc3BhdGNofSA9IHRoaXMucHJvcHM7XG4gICAgZGlzcGF0Y2goYWN0aW9ucy5zdGFydEFkZG9yVXBkYXRlQ2FydEl0ZW0ocHJvZHVjdC5zZWxlY3RlZFZhcmlhbnQsIDEpKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQge3Byb2R1Y3RzfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAocHJvZHVjdHMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzbWFsbC0xMiBtZWRpdW0tMyBjb2x1bW5zXCI+XG4gICAgICAgICAgICAgIDxuYXYgY2xhc3NOYW1lPVwicHJvZHVjdHMtbmF2XCI+XG4gICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cInByb2R1Y3RzLW5hdl9faGVhZGxpbmVcIj5DYXRlZ29yaWVzPC9oND5cbiAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICA8bGk+Q2l0eSAvIHN0YXRlPC9saT5cbiAgICAgICAgICAgICAgICAgIDxsaT5TcG9ydHM8L2xpPlxuICAgICAgICAgICAgICAgICAgPGxpPkhvYmJpZXM8L2xpPlxuICAgICAgICAgICAgICAgICAgPGxpPk11c2ljPC9saT5cbiAgICAgICAgICAgICAgICAgIDxsaT5BbmltYWxzPC9saT5cbiAgICAgICAgICAgICAgICAgIDxsaT5TaG93IGFsbDwvbGk+XG4gICAgICAgICAgICAgICAgPC91bD5cblxuICAgICAgICAgICAgICAgIDxoNCBjbGFzc05hbWU9XCJwcm9kdWN0cy1uYXZfX2hlYWRsaW5lXCI+U3R5bGU8L2g0PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvZHVjdHMtbmF2X19zZWFyY2hcIj5cbiAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiU2VsZWN0IHN0eWxlXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzTmFtZT1cInByb2R1Y3RzLW5hdl9fc2VhcmNoLWJ1dHRvblwiPjxpIGNsYXNzTmFtZT1cImZhIGZhLXNlYXJjaFwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxoNCBjbGFzc05hbWU9XCJwcm9kdWN0cy1uYXZfX2hlYWRsaW5lXCI+U2VhcmNoPC9oND5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2R1Y3RzLW5hdl9fc2VhcmNoXCI+XG4gICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIkVudGVyIGtleXdvcmRzXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzTmFtZT1cInByb2R1Y3RzLW5hdl9fc2VhcmNoLWJ1dHRvblwiPjxpIGNsYXNzTmFtZT1cImZhIGZhLXNlYXJjaFwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICA8L25hdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzbWFsbC0xMiBtZWRpdW0tOSBjb2x1bW5cIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9kdWN0cy1ncmlkXCI+XG4gICAgICAgICAgICAgICAge3Byb2R1Y3RzLm1hcChwcm9kdWN0ID0+IHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiA8UHJvZHVjdEl0ZW0ga2V5PXtwcm9kdWN0LmtleX0gYWRkVG9DYXJ0PXsoKSA9PiB0aGlzLmhhbmRsZUFkZFRvQ2FydChwcm9kdWN0KX0gaWQ9e3Byb2R1Y3QuYXR0cnMucHJvZHVjdF9pZH0gdGl0bGU9e3Byb2R1Y3QuYXR0cnMudGl0bGV9IGltYWdlPXtwcm9kdWN0LnNlbGVjdGVkVmFyaWFudC5pbWFnZVZhcmlhbnRzWzRdLnNyY30gLz5cbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApXG4gICAgfWVsc2V7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8TG9hZGVyIC8+XG4gICAgICApXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIChzdGF0ZSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBwcm9kdWN0czogc3RhdGUucHJvZHVjdHMuYWxsXG4gICAgfVxuICB9XG4pKFByb2R1Y3RzKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9jb250YWluZXJzL1Byb2R1Y3RzLmpzeCIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0xpbmt9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5sZXQge2Nvbm5lY3R9ID0gcmVxdWlyZSgncmVhY3QtcmVkdXgnKTtcbmxldCBwcm9kdWN0QWN0aW9ucyA9IHJlcXVpcmUoJ3Byb2R1Y3RBY3Rpb25zJyk7XG5sZXQgY2FydEFjdGlvbnMgPSByZXF1aXJlKCdjYXJ0QWN0aW9ucycpO1xuaW1wb3J0IHticm93c2VySGlzdG9yeX0gZnJvbSAncmVhY3Qtcm91dGVyJztcblxuY2xhc3MgVXBsb2FkIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCB7ZGlzcGF0Y2h9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lciB0ZXh0LWNlbnRlclwiPlxuICAgICAgICA8aW1nIHNyYz1cIi9pbWFnZXMvdXBsb2FkLXBsYWNlaG9sZGVyLnBuZ1wiIC8+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgKHN0YXRlKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGl2ZVByb2R1Y3Q6IHN0YXRlLnByb2R1Y3RzLmFjdGl2ZVxuICAgIH1cbiAgfVxuKShVcGxvYWQpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbnRhaW5lcnMvVXBsb2FkLmpzeCIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5sZXQgeyBjb25uZWN0IH0gPSByZXF1aXJlKCdyZWFjdC1yZWR1eCcpO1xubGV0IGFjdGlvbnMgPSByZXF1aXJlKCdjYXJ0QWN0aW9ucycpO1xuXG5pbXBvcnQgc2hvcGlmeUFQSSBmcm9tICdzaG9waWZ5QVBJJztcbmltcG9ydCBDYXJ0SXRlbSBmcm9tICdDYXJ0LWl0ZW0nO1xuXG5pbXBvcnQgRm9ybWF0IGZyb20gJ2Zvcm1hdCc7XG5cbmNsYXNzIENhcnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKCk7XG5cbiAgICBsZXQgZGlzcGF0Y2g7XG4gICAgbGV0IGhhbmRsZUNoZWNrb3V0ID0gdGhpcy5oYW5kbGVDaGVja291dCgpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMuZGlzcGF0Y2ggPSB0aGlzLnByb3BzLmRpc3BhdGNoO1xuICB9XG5cbiAgaGFuZGxlQ2xvc2VDYXJ0KCkge1xuICAgIHRoaXMuZGlzcGF0Y2goYWN0aW9ucy5jbG9zZUNhcnQoKSk7XG4gIH1cblxuICBoYW5kbGVDaGVja291dCgpIHtcbiAgICB3aW5kb3cub3BlbihzaG9waWZ5QVBJLmNhcnQuY2hlY2tvdXRVcmwsICdfc2VsZicpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCB7aXNPcGVuLCBsaW5lSXRlbXMsIGxpbmVJdGVtQ291bnQsIHN1YnRvdGFsfSA9IHRoaXMucHJvcHMuY2FydDtcbiAgICBsZXQgcmVuZGVyTGluZUl0ZW1zID0gKCkgPT4ge1xuICAgICAgaWYgKGxpbmVJdGVtcy5sZW5ndGggPiAwKXtcbiAgICAgICAgcmV0dXJuIGxpbmVJdGVtcy5tYXAobGluZUl0ZW0gPT4ge1xuICAgICAgICAgIHJldHVybiA8Q2FydEl0ZW1cbiAgICAgICAgICAgIGtleT17bGluZUl0ZW0uaWR9XG4gICAgICAgICAgICBpdGVtPXtsaW5lSXRlbX1cbiAgICAgICAgICAgIHF1YW50aXR5PXtsaW5lSXRlbS5xdWFudGl0eX1cbiAgICAgICAgICAvPlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtcImNhcnQgXCIgKyAoaXNPcGVuID8gJ2pzLWFjdGl2ZScgOiAnJyApfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJ0LXNlY3Rpb24gY2FydC1zZWN0aW9uLS10b3BcIj5cbiAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwiY2FydC10aXRsZVwiPllvdXIgY2FydDoge2lzT3Blbn08L2gyPlxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuLS1jbG9zZVwiPlxuICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsb3NlQ2FydC5iaW5kKHRoaXMpfT7DlzwvZGl2PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaGlkZVwiPkNsb3NlPC9zcGFuPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcnQtZm9ybVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FydC1pdGVtLWNvbnRhaW5lciBjYXJ0LXNlY3Rpb25cIj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIHtyZW5kZXJMaW5lSXRlbXMoKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJ0LWJvdHRvbVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJ0LWluZm8gY2xlYXJmaXggY2FydC1zZWN0aW9uXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHlwZS0tY2FwcyBjYXJ0LWluZm9fX3RvdGFsIGNhcnQtaW5mb19fc21hbGxcIj5Ub3RhbDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcnQtaW5mb19fcHJpY2luZ1wiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImNhcnQtaW5mb19fc21hbGwgY2FydC1pbmZvX190b3RhbFwiPlVTRDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJwcmljaW5nIHByaWNpbmctLW5vLXBhZGRpbmdcIj57Rm9ybWF0LmFzTW9uZXkoc3VidG90YWwpfTwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FydC1hY3Rpb25zLWNvbnRhaW5lciBjYXJ0LXNlY3Rpb24gdHlwZS0tY2VudGVyXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FydC1kaXNjb3VudC1ub3RpY2UgY2FydC1pbmZvX19zbWFsbFwiPlNoaXBwaW5nIGFuZCBkaXNjb3VudCBjb2RlcyBhcmUgYWRkZWQgYXQgY2hlY2tvdXQuPC9kaXY+XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tLWNhcnQtY2hlY2tvdXRcIlxuICAgICAgICAgICAgICAgIGlkPVwiY2hlY2tvdXRcIlxuICAgICAgICAgICAgICAgIG5hbWU9XCJjaGVja291dFwiXG4gICAgICAgICAgICAgICAgdmFsdWU9XCJDaGVja291dFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVDaGVja291dH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICAoc3RhdGUpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgY2FydDogc3RhdGUuY2FydFxuICAgIH1cbiAgfVxuKShDYXJ0KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9jb250YWluZXJzL2NhcnQuanN4IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBEb2N1bWVudE1ldGEgZnJvbSAncmVhY3QtZG9jdW1lbnQtbWV0YSc7XG5cbmNsYXNzIEFib3V0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50e1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInNlY3Rpb25cIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICAgICAgICA8aDE+QWJvdXQgdXM8L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICApXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBYm91dDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9wcmVzZW50YXRpb25hbC9BYm91dC5qc3giLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IERvY3VtZW50TWV0YSBmcm9tICdyZWFjdC1kb2N1bWVudC1tZXRhJztcblxuY2xhc3MgQ29udGFjdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudHtcbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJzZWN0aW9uXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgPGgxPkNvbnRhY3Q8L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICApXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb250YWN0O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3ByZXNlbnRhdGlvbmFsL0NvbnRhY3QuanN4IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBEb2N1bWVudE1ldGEgZnJvbSAncmVhY3QtZG9jdW1lbnQtbWV0YSc7XG5cbmNsYXNzIExvZ2luIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50e1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInNlY3Rpb25cIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICAgICAgICA8aDE+TG9naW48L2gxPlxuICAgICAgICAgIDxmb3JtPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJFbWFpbFwiIC8+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgcGxhY2Vob2xkZXI9XCJQYXNzd29yZFwiIC8+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIGNsYXNzTmFtZT1cImJ1dHRvblwiIHZhbHVlPVwiTG9naW5cIiAvPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTG9naW47XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvcHJlc2VudGF0aW9uYWwvTG9naW4uanN4IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBEb2N1bWVudE1ldGEgZnJvbSAncmVhY3QtZG9jdW1lbnQtbWV0YSc7XG5cbmNsYXNzIE1hcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudHtcbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJzZWN0aW9uXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgPGgxPk1hcCBwYWdlPC9oMT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3ByZXNlbnRhdGlvbmFsL01hcC5qc3giLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IERvY3VtZW50TWV0YSBmcm9tICdyZWFjdC1kb2N1bWVudC1tZXRhJztcblxuY2xhc3MgT3JkZXJTdGF0dXMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnR7XG4gIGNvbnN0cnVjdG9yKCl7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwic2VjdGlvblwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgIDxoMT5PcmRlciBTdGF0dXMgcGFnZTwvaDE+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9zZWN0aW9uPlxuICAgIClcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9yZGVyU3RhdHVzO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3ByZXNlbnRhdGlvbmFsL09yZGVyU3RhdHVzLmpzeCIsImV4cG9ydCB2YXIgcHJvZHVjdHNSZWR1Y2VyID0gKHN0YXRlID0ge2FsbDogW10sIGFjdGl2ZTogbnVsbH0sIGFjdGlvbikgPT4ge1xuICBzd2l0Y2goYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlICdBRERfUFJPRFVDVFMnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGFsbDogYWN0aW9uLnByb2R1Y3RzXG4gICAgICB9O1xuICAgIGNhc2UgJ1NFVF9BQ1RJVkVfUFJPRFVDVCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgLi4uc3RhdGUuYWN0aXZlLFxuICAgICAgICAgIGZldGNoZWQ6IHRydWUsXG4gICAgICAgICAgb3B0aW9uczogYWN0aW9uLm9wdGlvbnNcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICBjYXNlICdDTEVBUl9BQ1RJVkVfUFJPRFVDVCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgYWN0aXZlOiBudWxsXG4gICAgICB9O1xuICAgIGNhc2UgJ1VQREFURV9BQ1RJVkVfUFJPRFVDVF9PUFRJT05TJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5hY3RpdmUsXG4gICAgICAgICAgb3B0aW9uczogYWN0aW9uLm9wdGlvbnNcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG5leHBvcnQgdmFyIGNvbGxlY3Rpb25zUmVkdWNlciA9IChzdGF0ZSA9IHthbGw6IFtdLCBhY3RpdmU6IG51bGx9LCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnQUREX0NPTExFQ1RJT05TJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBhbGw6IGFjdGlvbi5jb2xsZWN0aW9uc1xuICAgICAgfTtcbiAgICBjYXNlICdTRVRfQUNUSVZFX0NPTExFQ1RJT04nOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGFjdGl2ZTogYWN0aW9uLnBhcnNlZENvbGxlY3Rpb25cbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcblxuZXhwb3J0IHZhciBjYXJ0UmVkdWNlciA9IChzdGF0ZSA9IHtpc09wZW46IGZhbHNlLCBsaW5lSXRlbXM6IFtdfSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaChhY3Rpb24udHlwZSkge1xuICAgIC8vIGNhc2UgJ1JFU1RPUkVfUFJFVklPVVNfQ0FSVCc6XG4gICAgLy8gICByZXR1cm4gYWN0aW9uLnJlbW90ZUNhcnQ7XG4gICAgY2FzZSAnU0VUX0lOSVRJQUxfQ0FSVF9TVEFURSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5hY3Rpb24ubG9jYWxDYXJ0XG4gICAgICB9O1xuICAgIGNhc2UgJ1VQREFURV9DQVJUX0lURU1TJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBsaW5lSXRlbXM6IGFjdGlvbi51cGRhdGVkQ2FydEl0ZW1zXG4gICAgICB9O1xuICAgIGNhc2UgJ1VQREFURV9DQVJUX0lURU1TX0NPVU5UJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBsaW5lSXRlbXNDb3VudDogYWN0aW9uLnVwZGF0ZWRDYXJ0SXRlbXNDb3VudFxuICAgICAgfTtcbiAgICBjYXNlICdVUERBVEVfQ0FSVF9TVUJUT1RBTCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgc3VidG90YWw6IGFjdGlvbi5uZXdTdWJ0b3RhbFxuICAgICAgfTtcbiAgICBjYXNlICdPUEVOX0NBUlQnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGlzT3BlbjogdHJ1ZVxuICAgICAgfTtcbiAgICBjYXNlICdDTE9TRV9DQVJUJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBpc09wZW46IGZhbHNlXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cbmV4cG9ydCB2YXIgbmF2UmVkdWNlciA9IChzdGF0ZSA9IHtzaG93Q2xvc2U6IGZhbHNlLCBzaG93TmF2OiBmYWxzZX0sIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnVE9HR0xFX05BVl9JQ09OJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBzaG93Q2xvc2U6ICFzdGF0ZS5zaG93Q2xvc2UsXG4gICAgICAgIHNob3dOYXY6IHN0YXRlLnNob3dOYXZcbiAgICAgIH07XG4gICAgY2FzZSAnVE9HR0xFX05BVic6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgc2hvd0Nsb3NlOiAhc3RhdGUuc2hvd0Nsb3NlLFxuICAgICAgICBzaG93TmF2OiAhc3RhdGUuc2hvd05hdlxuICAgICAgfTtcbiAgICBjYXNlICdDTE9TRV9OQVYnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHNob3dDbG9zZTogZmFsc2UsXG4gICAgICAgIHNob3dOYXY6IGZhbHNlXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvcmVkdWNlcnMvcmVkdWNlcnMuanN4IiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gcGxhY2VIb2xkZXJzQ291bnQgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycylcbiAgLy8gaWYgdGhlcmUgYXJlIHR3byBwbGFjZWhvbGRlcnMsIHRoYW4gdGhlIHR3byBjaGFyYWN0ZXJzIGJlZm9yZSBpdFxuICAvLyByZXByZXNlbnQgb25lIGJ5dGVcbiAgLy8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzXG4gIC8vIHRoaXMgaXMganVzdCBhIGNoZWFwIGhhY2sgdG8gbm90IGRvIGluZGV4T2YgdHdpY2VcbiAgcmV0dXJuIGI2NFtsZW4gLSAyXSA9PT0gJz0nID8gMiA6IGI2NFtsZW4gLSAxXSA9PT0gJz0nID8gMSA6IDBcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuICByZXR1cm4gYjY0Lmxlbmd0aCAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzQ291bnQoYjY0KVxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciBpLCBqLCBsLCB0bXAsIHBsYWNlSG9sZGVycywgYXJyXG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG4gIHBsYWNlSG9sZGVycyA9IHBsYWNlSG9sZGVyc0NvdW50KGI2NClcblxuICBhcnIgPSBuZXcgQXJyKGxlbiAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzKVxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgbCA9IHBsYWNlSG9sZGVycyA+IDAgPyBsZW4gLSA0IDogbGVuXG5cbiAgdmFyIEwgPSAwXG5cbiAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBsOyBpICs9IDQsIGogKz0gMykge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltMKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW0wrK10gPSB0bXAgJiAweEZGXG4gIH0gZWxzZSBpZiAocGxhY2VIb2xkZXJzID09PSAxKSB7XG4gICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICsgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICsgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gKyBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgb3V0cHV0ID0gJydcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIG91dHB1dCArPSBsb29rdXBbdG1wID4+IDJdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gJz09J1xuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyAodWludDhbbGVuIC0gMV0pXG4gICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMTBdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXVxuICAgIG91dHB1dCArPSAnPSdcbiAgfVxuXG4gIHBhcnRzLnB1c2gob3V0cHV0KVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2Jhc2U2NC1qcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMSIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9idWZmZXIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9idWZmZXIvfi9pc2FycmF5L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNzFcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwidmFyIGNhblVzZURPTSA9ICEhKFxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICB3aW5kb3cuZG9jdW1lbnQgJiZcbiAgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcbik7XG5cbm1vZHVsZS5leHBvcnRzID0gY2FuVXNlRE9NO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jYW4tdXNlLWRvbS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTcyXG4vLyBtb2R1bGUgY2h1bmtzID0gMSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0cykge1xuICByZXR1cm4gbmV3IEVsZW1lbnRDbGFzcyhvcHRzKVxufVxuXG5mdW5jdGlvbiBpbmRleE9mKGFyciwgcHJvcCkge1xuICBpZiAoYXJyLmluZGV4T2YpIHJldHVybiBhcnIuaW5kZXhPZihwcm9wKVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKVxuICAgIGlmIChhcnJbaV0gPT09IHByb3ApIHJldHVybiBpXG4gIHJldHVybiAtMVxufVxuXG5mdW5jdGlvbiBFbGVtZW50Q2xhc3Mob3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRWxlbWVudENsYXNzKSkgcmV0dXJuIG5ldyBFbGVtZW50Q2xhc3Mob3B0cylcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmICghb3B0cykgb3B0cyA9IHt9XG5cbiAgLy8gc2ltaWxhciBkb2luZyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IGJ1dCB3b3JrcyBpbiBJRThcbiAgaWYgKG9wdHMubm9kZVR5cGUpIG9wdHMgPSB7ZWw6IG9wdHN9XG5cbiAgdGhpcy5vcHRzID0gb3B0c1xuICB0aGlzLmVsID0gb3B0cy5lbCB8fCBkb2N1bWVudC5ib2R5XG4gIGlmICh0eXBlb2YgdGhpcy5lbCAhPT0gJ29iamVjdCcpIHRoaXMuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuZWwpXG59XG5cbkVsZW1lbnRDbGFzcy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gIHZhciBlbCA9IHRoaXMuZWxcbiAgaWYgKCFlbCkgcmV0dXJuXG4gIGlmIChlbC5jbGFzc05hbWUgPT09IFwiXCIpIHJldHVybiBlbC5jbGFzc05hbWUgPSBjbGFzc05hbWVcbiAgdmFyIGNsYXNzZXMgPSBlbC5jbGFzc05hbWUuc3BsaXQoJyAnKVxuICBpZiAoaW5kZXhPZihjbGFzc2VzLCBjbGFzc05hbWUpID4gLTEpIHJldHVybiBjbGFzc2VzXG4gIGNsYXNzZXMucHVzaChjbGFzc05hbWUpXG4gIGVsLmNsYXNzTmFtZSA9IGNsYXNzZXMuam9pbignICcpXG4gIHJldHVybiBjbGFzc2VzXG59XG5cbkVsZW1lbnRDbGFzcy5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gIHZhciBlbCA9IHRoaXMuZWxcbiAgaWYgKCFlbCkgcmV0dXJuXG4gIGlmIChlbC5jbGFzc05hbWUgPT09IFwiXCIpIHJldHVyblxuICB2YXIgY2xhc3NlcyA9IGVsLmNsYXNzTmFtZS5zcGxpdCgnICcpXG4gIHZhciBpZHggPSBpbmRleE9mKGNsYXNzZXMsIGNsYXNzTmFtZSlcbiAgaWYgKGlkeCA+IC0xKSBjbGFzc2VzLnNwbGljZShpZHgsIDEpXG4gIGVsLmNsYXNzTmFtZSA9IGNsYXNzZXMuam9pbignICcpXG4gIHJldHVybiBjbGFzc2VzXG59XG5cbkVsZW1lbnRDbGFzcy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gIHZhciBlbCA9IHRoaXMuZWxcbiAgaWYgKCFlbCkgcmV0dXJuXG4gIHZhciBjbGFzc2VzID0gZWwuY2xhc3NOYW1lLnNwbGl0KCcgJylcbiAgcmV0dXJuIGluZGV4T2YoY2xhc3NlcywgY2xhc3NOYW1lKSA+IC0xXG59XG5cbkVsZW1lbnRDbGFzcy5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gIHZhciBlbCA9IHRoaXMuZWxcbiAgaWYgKCFlbCkgcmV0dXJuXG4gIGlmICh0aGlzLmhhcyhjbGFzc05hbWUpKSB0aGlzLnJlbW92ZShjbGFzc05hbWUpXG4gIGVsc2UgdGhpcy5hZGQoY2xhc3NOYW1lKVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VsZW1lbnQtY2xhc3MvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCIvKiFcbiAqIGVucXVpcmUuanMgdjIuMS4xIC0gQXdlc29tZSBNZWRpYSBRdWVyaWVzIGluIEphdmFTY3JpcHRcbiAqIENvcHlyaWdodCAoYykgMjAxNCBOaWNrIFdpbGxpYW1zIC0gaHR0cDovL3dpY2t5Lm5pbGxpYS5tcy9lbnF1aXJlLmpzXG4gKiBMaWNlbnNlOiBNSVQgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuICovXG5cbjsoZnVuY3Rpb24gKG5hbWUsIGNvbnRleHQsIGZhY3RvcnkpIHtcblx0dmFyIG1hdGNoTWVkaWEgPSB3aW5kb3cubWF0Y2hNZWRpYTtcblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkobWF0Y2hNZWRpYSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0ZGVmaW5lKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIChjb250ZXh0W25hbWVdID0gZmFjdG9yeShtYXRjaE1lZGlhKSk7XG5cdFx0fSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Y29udGV4dFtuYW1lXSA9IGZhY3RvcnkobWF0Y2hNZWRpYSk7XG5cdH1cbn0oJ2VucXVpcmUnLCB0aGlzLCBmdW5jdGlvbiAobWF0Y2hNZWRpYSkge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuICAgIC8qanNoaW50IHVudXNlZDpmYWxzZSAqL1xuICAgIC8qKlxuICAgICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgaXRlcmF0aW5nIG92ZXIgYSBjb2xsZWN0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sbGVjdGlvblxuICAgICAqIEBwYXJhbSBmblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVhY2goY29sbGVjdGlvbiwgZm4pIHtcbiAgICAgICAgdmFyIGkgICAgICA9IDAsXG4gICAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgICAgIGNvbnQ7XG5cbiAgICAgICAgZm9yKGk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29udCA9IGZuKGNvbGxlY3Rpb25baV0sIGkpO1xuICAgICAgICAgICAgaWYoY29udCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBicmVhazsgLy9hbGxvdyBlYXJseSBleGl0XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGRldGVybWluaW5nIHdoZXRoZXIgdGFyZ2V0IG9iamVjdCBpcyBhbiBhcnJheVxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldCB0aGUgb2JqZWN0IHVuZGVyIHRlc3RcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGFycmF5LCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5KHRhcmdldCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseSh0YXJnZXQpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgZGV0ZXJtaW5pbmcgd2hldGhlciB0YXJnZXQgb2JqZWN0IGlzIGEgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YXJnZXQgdGhlIG9iamVjdCB1bmRlciB0ZXN0XG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBmdW5jdGlvbiwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbic7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZWdhdGUgdG8gaGFuZGxlIGEgbWVkaWEgcXVlcnkgYmVpbmcgbWF0Y2hlZCBhbmQgdW5tYXRjaGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcHRpb25zLm1hdGNoIGNhbGxiYWNrIGZvciB3aGVuIHRoZSBtZWRpYSBxdWVyeSBpcyBtYXRjaGVkXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMudW5tYXRjaF0gY2FsbGJhY2sgZm9yIHdoZW4gdGhlIG1lZGlhIHF1ZXJ5IGlzIHVubWF0Y2hlZFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLnNldHVwXSBvbmUtdGltZSBjYWxsYmFjayB0cmlnZ2VyZWQgdGhlIGZpcnN0IHRpbWUgYSBxdWVyeSBpcyBtYXRjaGVkXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5kZWZlclNldHVwPWZhbHNlXSBzaG91bGQgdGhlIHNldHVwIGNhbGxiYWNrIGJlIHJ1biBpbW1lZGlhdGVseSwgcmF0aGVyIHRoYW4gZmlyc3QgdGltZSBxdWVyeSBpcyBtYXRjaGVkP1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFF1ZXJ5SGFuZGxlcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgICFvcHRpb25zLmRlZmVyU2V0dXAgJiYgdGhpcy5zZXR1cCgpO1xuICAgIH1cbiAgICBRdWVyeUhhbmRsZXIucHJvdG90eXBlID0ge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb29yZGluYXRlcyBzZXR1cCBvZiB0aGUgaGFuZGxlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIHNldHVwIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuc2V0dXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2V0dXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGlzZWQgPSB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb29yZGluYXRlcyBzZXR1cCBhbmQgdHJpZ2dlcmluZyBvZiB0aGUgaGFuZGxlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIG9uIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAhdGhpcy5pbml0aWFsaXNlZCAmJiB0aGlzLnNldHVwKCk7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMubWF0Y2ggJiYgdGhpcy5vcHRpb25zLm1hdGNoKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvb3JkaW5hdGVzIHRoZSB1bm1hdGNoIGV2ZW50IGZvciB0aGUgaGFuZGxlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIG9mZiA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnVubWF0Y2ggJiYgdGhpcy5vcHRpb25zLnVubWF0Y2goKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdoZW4gYSBoYW5kbGVyIGlzIHRvIGJlIGRlc3Ryb3llZC5cbiAgICAgICAgICogZGVsZWdhdGVzIHRvIHRoZSBkZXN0cm95IG9yIHVubWF0Y2ggY2FsbGJhY2tzLCBkZXBlbmRpbmcgb24gYXZhaWxhYmlsaXR5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIGRlc3Ryb3kgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5kZXN0cm95ID8gdGhpcy5vcHRpb25zLmRlc3Ryb3koKSA6IHRoaXMub2ZmKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRldGVybWluZXMgZXF1YWxpdHkgYnkgcmVmZXJlbmNlLlxuICAgICAgICAgKiBpZiBvYmplY3QgaXMgc3VwcGxpZWQgY29tcGFyZSBvcHRpb25zLCBpZiBmdW5jdGlvbiwgY29tcGFyZSBtYXRjaCBjYWxsYmFja1xuICAgICAgICAgKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtvYmplY3QgfHwgZnVuY3Rpb259IFt0YXJnZXRdIHRoZSB0YXJnZXQgZm9yIGNvbXBhcmlzb25cbiAgICAgICAgICovXG4gICAgICAgIGVxdWFscyA6IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucyA9PT0gdGFyZ2V0IHx8IHRoaXMub3B0aW9ucy5tYXRjaCA9PT0gdGFyZ2V0O1xuICAgICAgICB9XG5cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSBzaW5nbGUgbWVkaWEgcXVlcnksIG1hbmFnZXMgaXQncyBzdGF0ZSBhbmQgcmVnaXN0ZXJlZCBoYW5kbGVycyBmb3IgdGhpcyBxdWVyeVxuICAgICAqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IHRoZSBtZWRpYSBxdWVyeSBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1VuY29uZGl0aW9uYWw9ZmFsc2VdIHdoZXRoZXIgdGhlIG1lZGlhIHF1ZXJ5IHNob3VsZCBydW4gcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZSBjb25kaXRpb25zIGFyZSBtZXQuIFByaW1hcmlseSBmb3IgaGVscGluZyBvbGRlciBicm93c2VycyBkZWFsIHdpdGggbW9iaWxlLWZpcnN0IGRlc2lnblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE1lZGlhUXVlcnkocXVlcnksIGlzVW5jb25kaXRpb25hbCkge1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgICAgIHRoaXMuaXNVbmNvbmRpdGlvbmFsID0gaXNVbmNvbmRpdGlvbmFsO1xuICAgICAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gICAgICAgIHRoaXMubXFsID0gbWF0Y2hNZWRpYShxdWVyeSk7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLmxpc3RlbmVyID0gZnVuY3Rpb24obXFsKSB7XG4gICAgICAgICAgICBzZWxmLm1xbCA9IG1xbDtcbiAgICAgICAgICAgIHNlbGYuYXNzZXNzKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubXFsLmFkZExpc3RlbmVyKHRoaXMubGlzdGVuZXIpO1xuICAgIH1cbiAgICBNZWRpYVF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogYWRkIGEgaGFuZGxlciBmb3IgdGhpcyBxdWVyeSwgdHJpZ2dlcmluZyBpZiBhbHJlYWR5IGFjdGl2ZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gaGFuZGxlclxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBoYW5kbGVyLm1hdGNoIGNhbGxiYWNrIGZvciB3aGVuIHF1ZXJ5IGlzIGFjdGl2YXRlZFxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbaGFuZGxlci51bm1hdGNoXSBjYWxsYmFjayBmb3Igd2hlbiBxdWVyeSBpcyBkZWFjdGl2YXRlZFxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbaGFuZGxlci5zZXR1cF0gY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSBleGVjdXRpb24gd2hlbiBhIHF1ZXJ5IGhhbmRsZXIgaXMgcmVnaXN0ZXJlZFxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtoYW5kbGVyLmRlZmVyU2V0dXA9ZmFsc2VdIHNob3VsZCB0aGUgc2V0dXAgY2FsbGJhY2sgYmUgZGVmZXJyZWQgdW50aWwgdGhlIGZpcnN0IHRpbWUgdGhlIGhhbmRsZXIgaXMgbWF0Y2hlZD9cbiAgICAgICAgICovXG4gICAgICAgIGFkZEhhbmRsZXIgOiBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgICAgICAgICB2YXIgcWggPSBuZXcgUXVlcnlIYW5kbGVyKGhhbmRsZXIpO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVycy5wdXNoKHFoKTtcblxuICAgICAgICAgICAgdGhpcy5tYXRjaGVzKCkgJiYgcWgub24oKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogcmVtb3ZlcyB0aGUgZ2l2ZW4gaGFuZGxlciBmcm9tIHRoZSBjb2xsZWN0aW9uLCBhbmQgY2FsbHMgaXQncyBkZXN0cm95IG1ldGhvZHNcbiAgICAgICAgICogXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0IHx8IGZ1bmN0aW9ufSBoYW5kbGVyIHRoZSBoYW5kbGVyIHRvIHJlbW92ZVxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlSGFuZGxlciA6IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnM7XG4gICAgICAgICAgICBlYWNoKGhhbmRsZXJzLCBmdW5jdGlvbihoLCBpKSB7XG4gICAgICAgICAgICAgICAgaWYoaC5lcXVhbHMoaGFuZGxlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgaC5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhaGFuZGxlcnMuc3BsaWNlKGksMSk7IC8vcmVtb3ZlIGZyb20gYXJyYXkgYW5kIGV4aXQgZWFjaCBlYXJseVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgbWVkaWEgcXVlcnkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBtYXRjaFxuICAgICAgICAgKiBcbiAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBtZWRpYSBxdWVyeSBjYW4gYmUgY29uc2lkZXJlZCBhIG1hdGNoLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgICAgICovXG4gICAgICAgIG1hdGNoZXMgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1xbC5tYXRjaGVzIHx8IHRoaXMuaXNVbmNvbmRpdGlvbmFsO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDbGVhcnMgYWxsIGhhbmRsZXJzIGFuZCB1bmJpbmRzIGV2ZW50c1xuICAgICAgICAgKi9cbiAgICAgICAgY2xlYXIgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1xbC5yZW1vdmVMaXN0ZW5lcih0aGlzLmxpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlcnMubGVuZ3RoID0gMDsgLy9jbGVhciBhcnJheVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIEFzc2Vzc2VzIHRoZSBxdWVyeSwgdHVybmluZyBvbiBhbGwgaGFuZGxlcnMgaWYgaXQgbWF0Y2hlcywgdHVybmluZyB0aGVtIG9mZiBpZiBpdCBkb2Vzbid0IG1hdGNoXG4gICAgICAgICAqL1xuICAgICAgICBhc3Nlc3MgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhY3Rpb24gPSB0aGlzLm1hdGNoZXMoKSA/ICdvbicgOiAnb2ZmJztcblxuICAgICAgICAgICAgZWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlclthY3Rpb25dKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQWxsb3dzIGZvciByZWdpc3RyYXRpb24gb2YgcXVlcnkgaGFuZGxlcnMuXG4gICAgICogTWFuYWdlcyB0aGUgcXVlcnkgaGFuZGxlcidzIHN0YXRlIGFuZCBpcyByZXNwb25zaWJsZSBmb3Igd2lyaW5nIHVwIGJyb3dzZXIgZXZlbnRzXG4gICAgICpcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNZWRpYVF1ZXJ5RGlzcGF0Y2ggKCkge1xuICAgICAgICBpZighbWF0Y2hNZWRpYSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXRjaE1lZGlhIG5vdCBwcmVzZW50LCBsZWdhY3kgYnJvd3NlcnMgcmVxdWlyZSBhIHBvbHlmaWxsJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnF1ZXJpZXMgPSB7fTtcbiAgICAgICAgdGhpcy5icm93c2VySXNJbmNhcGFibGUgPSAhbWF0Y2hNZWRpYSgnb25seSBhbGwnKS5tYXRjaGVzO1xuICAgIH1cblxuICAgIE1lZGlhUXVlcnlEaXNwYXRjaC5wcm90b3R5cGUgPSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlZ2lzdGVycyBhIGhhbmRsZXIgZm9yIHRoZSBnaXZlbiBtZWRpYSBxdWVyeVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcSB0aGUgbWVkaWEgcXVlcnlcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3QgfHwgQXJyYXkgfHwgRnVuY3Rpb259IG9wdGlvbnMgZWl0aGVyIGEgc2luZ2xlIHF1ZXJ5IGhhbmRsZXIgb2JqZWN0LCBhIGZ1bmN0aW9uLCBvciBhbiBhcnJheSBvZiBxdWVyeSBoYW5kbGVyc1xuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcHRpb25zLm1hdGNoIGZpcmVkIHdoZW4gcXVlcnkgbWF0Y2hlZFxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy51bm1hdGNoXSBmaXJlZCB3aGVuIGEgcXVlcnkgaXMgbm8gbG9uZ2VyIG1hdGNoZWRcbiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMuc2V0dXBdIGZpcmVkIHdoZW4gaGFuZGxlciBmaXJzdCB0cmlnZ2VyZWRcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5kZWZlclNldHVwPWZhbHNlXSB3aGV0aGVyIHNldHVwIHNob3VsZCBiZSBydW4gaW1tZWRpYXRlbHkgb3IgZGVmZXJyZWQgdW50aWwgcXVlcnkgaXMgZmlyc3QgbWF0Y2hlZFxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaG91bGREZWdyYWRlPWZhbHNlXSB3aGV0aGVyIHRoaXMgcGFydGljdWxhciBtZWRpYSBxdWVyeSBzaG91bGQgYWx3YXlzIHJ1biBvbiBpbmNhcGFibGUgYnJvd3NlcnNcbiAgICAgICAgICovXG4gICAgICAgIHJlZ2lzdGVyIDogZnVuY3Rpb24ocSwgb3B0aW9ucywgc2hvdWxkRGVncmFkZSkge1xuICAgICAgICAgICAgdmFyIHF1ZXJpZXMgICAgICAgICA9IHRoaXMucXVlcmllcyxcbiAgICAgICAgICAgICAgICBpc1VuY29uZGl0aW9uYWwgPSBzaG91bGREZWdyYWRlICYmIHRoaXMuYnJvd3NlcklzSW5jYXBhYmxlO1xuXG4gICAgICAgICAgICBpZighcXVlcmllc1txXSkge1xuICAgICAgICAgICAgICAgIHF1ZXJpZXNbcV0gPSBuZXcgTWVkaWFRdWVyeShxLCBpc1VuY29uZGl0aW9uYWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL25vcm1hbGlzZSB0byBvYmplY3QgaW4gYW4gYXJyYXlcbiAgICAgICAgICAgIGlmKGlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0geyBtYXRjaCA6IG9wdGlvbnMgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCFpc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IFtvcHRpb25zXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVhY2gob3B0aW9ucywgZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHF1ZXJpZXNbcV0uYWRkSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdW5yZWdpc3RlcnMgYSBxdWVyeSBhbmQgYWxsIGl0J3MgaGFuZGxlcnMsIG9yIGEgc3BlY2lmaWMgaGFuZGxlciBmb3IgYSBxdWVyeVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcSB0aGUgbWVkaWEgcXVlcnkgdG8gdGFyZ2V0XG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0IHx8IGZ1bmN0aW9ufSBbaGFuZGxlcl0gc3BlY2lmaWMgaGFuZGxlciB0byB1bnJlZ2lzdGVyXG4gICAgICAgICAqL1xuICAgICAgICB1bnJlZ2lzdGVyIDogZnVuY3Rpb24ocSwgaGFuZGxlcikge1xuICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzW3FdO1xuXG4gICAgICAgICAgICBpZihxdWVyeSkge1xuICAgICAgICAgICAgICAgIGlmKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnkucmVtb3ZlSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5LmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnF1ZXJpZXNbcV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH07XG5cblx0cmV0dXJuIG5ldyBNZWRpYVF1ZXJ5RGlzcGF0Y2goKTtcblxufSkpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lbnF1aXJlLmpzL2Rpc3QvZW5xdWlyZS5qc1xuLy8gbW9kdWxlIGlkID0gMTc0XG4vLyBtb2R1bGUgY2h1bmtzID0gMSIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTUgSmVkIFdhdHNvbi5cbiAgQmFzZWQgb24gY29kZSB0aGF0IGlzIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGNhblVzZURPTSA9ICEhKFxuXHRcdHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG5cdFx0d2luZG93LmRvY3VtZW50ICYmXG5cdFx0d2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcblx0KTtcblxuXHR2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cblx0XHRjYW5Vc2VET006IGNhblVzZURPTSxcblxuXHRcdGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG5cdFx0Y2FuVXNlRXZlbnRMaXN0ZW5lcnM6XG5cdFx0XHRjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuXHRcdGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuXG5cblx0fTtcblxuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdGRlZmluZShmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gRXhlY3V0aW9uRW52aXJvbm1lbnQ7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5FeGVjdXRpb25FbnZpcm9ubWVudCA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXHR9XG5cbn0oKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXhlbnYvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pZWVlNzU0L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxOTRcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwidmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBORVdUQUIgPSAnX2JsYW5rJztcblxudmFyIE91dGJvdW5kTGluayA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdPdXRib3VuZExpbmsnLFxuICBwcm9wVHlwZXM6IHtcbiAgICBldmVudExhYmVsOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWRcbiAgfSxcbiAgc3RhdGljczoge1xuICAgIHRyYWNrTGluazogZnVuY3Rpb24gKCkge1xuICAgICAgY29uc29sZS53YXJuKCdnYSB0cmFja2luZyBub3QgZW5hYmxlZCcpO1xuICAgIH1cbiAgfSxcbiAgaGFuZGxlQ2xpY2s6IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGV2ZW50TWV0YSA9IHsgbGFiZWw6IHByb3BzLmV2ZW50TGFiZWwgfTtcbiAgICBPdXRib3VuZExpbmsudHJhY2tMaW5rKGV2ZW50TWV0YSwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb3BzLnRhcmdldCA9PT0gTkVXVEFCKSB7XG4gICAgICAgIHdpbmRvdy5vcGVuKHByb3BzLnRvLCBORVdUQUIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBwcm9wcy50bztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChwcm9wcy5vbkNsaWNrKSB7XG4gICAgICBwcm9wcy5vbkNsaWNrKGUpO1xuICAgIH1cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIHRoaXMucHJvcHMsIHtcbiAgICAgIGhyZWY6IHRoaXMucHJvcHMudG8sXG4gICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrXG4gICAgfSk7XG4gICAgZGVsZXRlIHByb3BzLmV2ZW50TGFiZWw7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2EnLCBwcm9wcyk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE91dGJvdW5kTGluaztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1nYS9zcmMvY29tcG9uZW50cy9PdXRib3VuZExpbmsuanNcbi8vIG1vZHVsZSBpZCA9IDI3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCIvKipcbiAqIFJlYWN0IEdvb2dsZSBBbmFseXRpY3MgTW9kdWxlXG4gKlxuICogQHBhY2thZ2UgcmVhY3QtZ2FcbiAqIEBhdXRob3IgIEFkYW0gTG9mdGluZyA8YWRhbUBtb3ppbGxhZm91bmRhdGlvbi5vcmc+XG4gKiAgICAgICAgICBBdHVsIFZhcm1hIDxhdHVsQG1vemlsbGFmb3VuZGF0aW9uLm9yZz5cbiAqL1xuXG4vKipcbiAqIFV0aWxpdGllc1xuICovXG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnLi91dGlscy9mb3JtYXQnKTtcbnZhciByZW1vdmVMZWFkaW5nU2xhc2ggPSByZXF1aXJlKCcuL3V0aWxzL3JlbW92ZUxlYWRpbmdTbGFzaCcpO1xudmFyIHRyaW0gPSByZXF1aXJlKCcuL3V0aWxzL3RyaW0nKTtcblxudmFyIHdhcm4gPSByZXF1aXJlKCcuL3V0aWxzL2NvbnNvbGUvd2FybicpO1xudmFyIGxvZyA9IHJlcXVpcmUoJy4vdXRpbHMvY29uc29sZS9sb2cnKTtcblxudmFyIF9kZWJ1ZyA9IGZhbHNlO1xudmFyIF90aXRsZUNhc2UgPSB0cnVlO1xuXG52YXIgX2Zvcm1hdCA9IGZ1bmN0aW9uIChzKSB7XG4gIHJldHVybiBmb3JtYXQocywgX3RpdGxlQ2FzZSk7XG59O1xuXG52YXIgUmVhY3RHQSA9IHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKGdhVHJhY2tpbmdJRCwgb3B0aW9ucykge1xuICAgIGlmICghZ2FUcmFja2luZ0lEKSB7XG4gICAgICB3YXJuKCdnYVRyYWNraW5nSUQgaXMgcmVxdWlyZWQgaW4gaW5pdGlhbGl6ZSgpJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zLmRlYnVnICYmIG9wdGlvbnMuZGVidWcgPT09IHRydWUpIHtcbiAgICAgICAgX2RlYnVnID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMudGl0bGVDYXNlID09PSBmYWxzZSkge1xuICAgICAgICBfdGl0bGVDYXNlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5hbHl0aWNzL2Rldmd1aWRlcy9jb2xsZWN0aW9uL2FuYWx5dGljc2pzL1xuICAgIC8vIGpzY3M6ZGlzYWJsZVxuICAgIChmdW5jdGlvbiAoaSwgcywgbywgZywgciwgYSwgbSkge1xuICAgICAgaVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByO1xuICAgICAgaVtyXSA9IGlbcl0gfHwgZnVuY3Rpb24gKCkge1xuICAgICAgICAoaVtyXS5xID0gaVtyXS5xIHx8IFtdKS5wdXNoKGFyZ3VtZW50cyk7XG4gICAgICB9LCBpW3JdLmwgPSAxICogbmV3IERhdGUoKTtcbiAgICAgIGEgPSBzLmNyZWF0ZUVsZW1lbnQobyksXG4gICAgICAgICAgbSA9IHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobylbMF07XG4gICAgICBhLmFzeW5jID0gMTtcbiAgICAgIGEuc3JjID0gZztcbiAgICAgIG0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSwgbSk7XG4gICAgfSkod2luZG93LCBkb2N1bWVudCwgJ3NjcmlwdCcsICdodHRwczovL3d3dy5nb29nbGUtYW5hbHl0aWNzLmNvbS9hbmFseXRpY3MuanMnLCAnZ2EnKTtcbiAgICAvLyBqc2NzOmVuYWJsZVxuXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5nYU9wdGlvbnMpIHtcbiAgICAgIGdhKCdjcmVhdGUnLCBnYVRyYWNraW5nSUQsIG9wdGlvbnMuZ2FPcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2EoJ2NyZWF0ZScsIGdhVHJhY2tpbmdJRCwgJ2F1dG8nKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIGdhOlxuICAgKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBHQSBvYmplY3QuXG4gICAqL1xuICBnYTogZnVuY3Rpb24gKCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgZ2EuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgbG9nKCdjYWxsZWQgZ2EoXFwnYXJndW1lbnRzXFwnKTsnKTtcbiAgICAgICAgbG9nKCd3aXRoIGFyZ3VtZW50czogJyArIEpTT04uc3RyaW5naWZ5KFtdLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBnYTtcbiAgfSxcblxuICAvKipcbiAgICogc2V0OlxuICAgKiBHQSB0cmFja2VyIHNldCBtZXRob2RcbiAgICogQHBhcmFtIHtPYmplY3R9IGZpZWxkc09iamVjdCAtIGEgZmllbGQvdmFsdWUgcGFpciBvciBhIGdyb3VwIG9mIGZpZWxkL3ZhbHVlIHBhaXJzIG9uIHRoZSB0cmFja2VyXG4gICAqL1xuICBzZXQ6IGZ1bmN0aW9uIChmaWVsZHNPYmplY3QpIHtcbiAgICBpZiAodHlwZW9mIGdhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoIWZpZWxkc09iamVjdCkge1xuICAgICAgICB3YXJuKCdgZmllbGRzT2JqZWN0YCBpcyByZXF1aXJlZCBpbiAuc2V0KCknKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGZpZWxkc09iamVjdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgd2FybignRXhwZWN0ZWQgYGZpZWxkc09iamVjdGAgYXJnIHRvIGJlIGFuIE9iamVjdCcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyhmaWVsZHNPYmplY3QpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB3YXJuKCdlbXB0eSBgZmllbGRzT2JqZWN0YCBnaXZlbiB0byAuc2V0KCknKTtcbiAgICAgIH1cblxuICAgICAgZ2EoJ3NldCcsIGZpZWxkc09iamVjdCk7XG5cbiAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgbG9nKCdjYWxsZWQgZ2EoXFwnc2V0XFwnLCBmaWVsZHNPYmplY3QpOycpO1xuICAgICAgICBsb2coJ3dpdGggZmllbGRzT2JqZWN0OiAnICsgSlNPTi5zdHJpbmdpZnkoZmllbGRzT2JqZWN0KSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBzZW5kOlxuICAgKiBDbG9uZSBvZiB0aGUgbG93IGxldmVsIGBnYS5zZW5kYCBtZXRob2RcbiAgICogV0FSTklORzogTm8gdmFsaWRhdGlvbnMgd2lsbCBiZSBhcHBsaWVkIHRvIHRoaXNcbiAgICogQHBhcmFtICB7T2JqZWN0fSBmaWVsZE9iamVjdCAtIGZpZWxkIG9iamVjdCBmb3IgdHJhY2tpbmcgZGlmZmVyZW50IGFuYWx5dGljc1xuICAgKi9cbiAgc2VuZDogZnVuY3Rpb24gKGZpZWxkT2JqZWN0KSB7XG4gICAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZ2EoJ3NlbmQnLCBmaWVsZE9iamVjdCk7XG5cbiAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgbG9nKCdjYWxsZWQgZ2EoXFwnc2VuZFxcJywgZmllbGRPYmplY3QpOycpO1xuICAgICAgICBsb2coJ3dpdGggZmllbGRPYmplY3Q6ICcgKyBKU09OLnN0cmluZ2lmeShmaWVsZE9iamVjdCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogcGFnZXZpZXc6XG4gICAqIEJhc2ljIEdBIHBhZ2V2aWV3IHRyYWNraW5nXG4gICAqIEBwYXJhbSAge1N0cmluZ30gcGF0aCAtIHRoZSBjdXJyZW50IHBhZ2UgcGFnZSBlLmcuICcvYWJvdXQnXG4gICAqL1xuICBwYWdldmlldzogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICBpZiAoIXBhdGgpIHtcbiAgICAgIHdhcm4oJ3BhdGggaXMgcmVxdWlyZWQgaW4gLnBhZ2V2aWV3KCknKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwYXRoID0gdHJpbShwYXRoKTtcbiAgICBpZiAocGF0aCA9PT0gJycpIHtcbiAgICAgIHdhcm4oJ3BhdGggY2Fubm90IGJlIGFuIGVtcHR5IHN0cmluZyBpbiAucGFnZXZpZXcoKScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZ2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGdhKCdzZW5kJywgJ3BhZ2V2aWV3JywgcGF0aCk7XG5cbiAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgbG9nKCdjYWxsZWQgZ2EoXFwnc2VuZFxcJywgXFwncGFnZXZpZXdcXCcsIHBhdGgpOycpO1xuICAgICAgICBsb2coJ3dpdGggcGF0aDogJyArIHBhdGgpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogbW9kYWx2aWV3OlxuICAgKiBhIHByb3h5IHRvIGJhc2ljIEdBIHBhZ2V2aWV3IHRyYWNraW5nIHRvIGNvbnNpc3RlbnRseSB0cmFja1xuICAgKiBtb2RhbCB2aWV3cyB0aGF0IGFyZSBhbiBlcXVpdmFsZW50IFVYIHRvIGEgdHJhZGl0aW9uYWwgcGFnZXZpZXdcbiAgICogQHBhcmFtICB7U3RyaW5nfSBtb2RhbE5hbWUgZS5nLiAnYWRkLW9yLWVkaXQtY2x1YidcbiAgICovXG4gIG1vZGFsdmlldzogZnVuY3Rpb24gKG1vZGFsTmFtZSkge1xuICAgIGlmICghbW9kYWxOYW1lKSB7XG4gICAgICB3YXJuKCdtb2RhbE5hbWUgaXMgcmVxdWlyZWQgaW4gLm1vZGFsdmlldyhtb2RhbE5hbWUpJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbW9kYWxOYW1lID0gdHJpbShtb2RhbE5hbWUpO1xuICAgIG1vZGFsTmFtZSA9IHJlbW92ZUxlYWRpbmdTbGFzaChtb2RhbE5hbWUpO1xuXG4gICAgaWYgKG1vZGFsTmFtZSA9PT0gJycpIHtcbiAgICAgIHdhcm4oJ21vZGFsTmFtZSBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nIG9yIGEgc2luZ2xlIC8gaW4gLm1vZGFsdmlldygpJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbW9kYWxOYW1lID0gdHJpbShtb2RhbE5hbWUpO1xuICAgICAgdmFyIHBhdGggPSAnL21vZGFsLycgKyBtb2RhbE5hbWU7XG4gICAgICBnYSgnc2VuZCcsICdwYWdldmlldycsIHBhdGgpO1xuXG4gICAgICBpZiAoX2RlYnVnKSB7XG4gICAgICAgIGxvZygnY2FsbGVkIGdhKFxcJ3NlbmRcXCcsIFxcJ3BhZ2V2aWV3XFwnLCBwYXRoKTsnKTtcbiAgICAgICAgbG9nKCd3aXRoIHBhdGg6ICcgKyBwYXRoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIHRpbWluZzpcbiAgICogR0EgdGltaW5nXG4gICAqIEBwYXJhbSBhcmdzLmNhdGVnb3J5IHtTdHJpbmd9IHJlcXVpcmVkXG4gICAqIEBwYXJhbSBhcmdzLnZhcmlhYmxlIHtTdHJpbmd9IHJlcXVpcmVkXG4gICAqIEBwYXJhbSBhcmdzLnZhbHVlICB7SW50fSAgcmVxdWlyZWRcbiAgICogQHBhcmFtIGFyZ3MubGFiZWwgIHtTdHJpbmd9IHJlcXVpcmVkXG4gICAqL1xuICB0aW1pbmc6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKCFhcmdzIHx8ICFhcmdzLmNhdGVnb3J5IHx8ICFhcmdzLnZhcmlhYmxlXG4gICAgICAgICAgfHwgIWFyZ3MudmFsdWUgfHwgdHlwZW9mIGFyZ3MudmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHdhcm4oJ2FyZ3MuY2F0ZWdvcnksIGFyZ3MudmFyaWFibGUgJyArXG4gICAgICAgICAgICAgICdBTkQgYXJncy52YWx1ZSBhcmUgcmVxdWlyZWQgaW4gdGltaW5nKCkgJyArXG4gICAgICAgICAgICAgICdBTkQgYXJncy52YWx1ZSBoYXMgdG8gYmUgYSBudW1iZXInKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvL1JlcXVpcmVkIEZpZWxkc1xuICAgICAgdmFyIGZpZWxkT2JqZWN0ID0ge1xuICAgICAgICBoaXRUeXBlOiAndGltaW5nJyxcbiAgICAgICAgdGltaW5nQ2F0ZWdvcnk6IF9mb3JtYXQoYXJncy5jYXRlZ29yeSksXG4gICAgICAgIHRpbWluZ1ZhcjogX2Zvcm1hdChhcmdzLnZhcmlhYmxlKSxcbiAgICAgICAgdGltaW5nVmFsdWU6IGFyZ3MudmFsdWVcbiAgICAgIH07XG5cbiAgICAgIGlmIChhcmdzLmxhYmVsKSB7XG4gICAgICAgIGZpZWxkT2JqZWN0LnRpbWluZ0xhYmVsID0gX2Zvcm1hdChhcmdzLmxhYmVsKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZW5kKGZpZWxkT2JqZWN0KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIGV2ZW50OlxuICAgKiBHQSBldmVudCB0cmFja2luZ1xuICAgKiBAcGFyYW0gYXJncy5jYXRlZ29yeSB7U3RyaW5nfSByZXF1aXJlZFxuICAgKiBAcGFyYW0gYXJncy5hY3Rpb24ge1N0cmluZ30gcmVxdWlyZWRcbiAgICogQHBhcmFtIGFyZ3MubGFiZWwge1N0cmluZ30gb3B0aW9uYWxcbiAgICogQHBhcmFtIGFyZ3MudmFsdWUge0ludH0gb3B0aW9uYWxcbiAgICogQHBhcmFtIGFyZ3Mubm9uSW50ZXJhY3Rpb24ge2Jvb2xlYW59IG9wdGlvbmFsXG4gICAqL1xuICBldmVudDogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIGdhID09PSAnZnVuY3Rpb24nKSB7XG5cbiAgICAgIC8vIFNpbXBsZSBWYWxpZGF0aW9uXG4gICAgICBpZiAoIWFyZ3MgfHwgIWFyZ3MuY2F0ZWdvcnkgfHwgIWFyZ3MuYWN0aW9uKSB7XG4gICAgICAgIHdhcm4oJ2FyZ3MuY2F0ZWdvcnkgQU5EIGFyZ3MuYWN0aW9uIGFyZSByZXF1aXJlZCBpbiBldmVudCgpJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUmVxdWlyZWQgRmllbGRzXG4gICAgICB2YXIgZmllbGRPYmplY3QgPSB7XG4gICAgICAgIGhpdFR5cGU6ICdldmVudCcsXG4gICAgICAgIGV2ZW50Q2F0ZWdvcnk6IF9mb3JtYXQoYXJncy5jYXRlZ29yeSksXG4gICAgICAgIGV2ZW50QWN0aW9uOiBfZm9ybWF0KGFyZ3MuYWN0aW9uKVxuICAgICAgfTtcblxuICAgICAgLy8gT3B0aW9uYWwgRmllbGRzXG4gICAgICBpZiAoYXJncy5sYWJlbCkge1xuICAgICAgICBmaWVsZE9iamVjdC5ldmVudExhYmVsID0gX2Zvcm1hdChhcmdzLmxhYmVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFyZ3MudmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmdzLnZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgIHdhcm4oJ0V4cGVjdGVkIGBhcmdzLnZhbHVlYCBhcmcgdG8gYmUgYSBOdW1iZXIuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmllbGRPYmplY3QuZXZlbnRWYWx1ZSA9IGFyZ3MudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFyZ3Mubm9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmdzLm5vbkludGVyYWN0aW9uICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICB3YXJuKCdgYXJncy5ub25JbnRlcmFjdGlvbmAgbXVzdCBiZSBhIGJvb2xlYW4uJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmllbGRPYmplY3Qubm9uSW50ZXJhY3Rpb24gPSBhcmdzLm5vbkludGVyYWN0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhcmdzLnRyYW5zcG9ydCkge1xuICAgICAgICBpZiAodHlwZW9mIGFyZ3MudHJhbnNwb3J0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHdhcm4oJ2BhcmdzLnRyYW5zcG9ydGAgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoWydiZWFjb24nLCAneGhyJywgJ2ltYWdlJ10uaW5kZXhPZihhcmdzLnRyYW5zcG9ydCkgPT09IC0xKSB7XG4gICAgICAgICAgICB3YXJuKCdgYXJncy50cmFuc3BvcnRgIG11c3QgYmUgZWl0aGVyIG9uZSBvZiB0aGVzZSB2YWx1ZXM6IGBiZWFjb25gLCBgeGhyYCBvciBgaW1hZ2VgJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmllbGRPYmplY3QudHJhbnNwb3J0ID0gYXJncy50cmFuc3BvcnQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gU2VuZCB0byBHQVxuICAgICAgdGhpcy5zZW5kKGZpZWxkT2JqZWN0KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIGV4Y2VwdGlvbjpcbiAgICogR0EgZXhjZXB0aW9uIHRyYWNraW5nXG4gICAqIEBwYXJhbSBhcmdzLmRlc2NyaXB0aW9uIHtTdHJpbmd9IG9wdGlvbmFsXG4gICAqIEBwYXJhbSBhcmdzLmZhdGFsIHtib29sZWFufSBvcHRpb25hbFxuICAgKi9cbiAgZXhjZXB0aW9uOiBmdW5jdGlvbiAoYXJncykge1xuICAgIGlmICh0eXBlb2YgZ2EgPT09ICdmdW5jdGlvbicpIHtcblxuICAgICAgLy8gUmVxdWlyZWQgRmllbGRzXG4gICAgICB2YXIgZmllbGRPYmplY3QgPSB7XG4gICAgICAgIGhpdFR5cGU6ICdleGNlcHRpb24nXG4gICAgICB9O1xuXG4gICAgICAvLyBPcHRpb25hbCBGaWVsZHNcbiAgICAgIGlmIChhcmdzLmRlc2NyaXB0aW9uKSB7XG4gICAgICAgIGZpZWxkT2JqZWN0LmV4RGVzY3JpcHRpb24gPSBfZm9ybWF0KGFyZ3MuZGVzY3JpcHRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGFyZ3MuZmF0YWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJncy5mYXRhbCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgd2FybignYGFyZ3MuZmF0YWxgIG11c3QgYmUgYSBib29sZWFuLicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpZWxkT2JqZWN0LmV4RmF0YWwgPSBhcmdzLmZhdGFsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFNlbmQgdG8gR0FcbiAgICAgIHRoaXMuc2VuZChmaWVsZE9iamVjdCk7XG4gICAgfVxuICB9LFxuXG4gIHBsdWdpbjoge1xuICAgIC8qKlxuICAgICAqIHJlcXVpcmU6XG4gICAgICogR0EgcmVxdWlyZXMgYSBwbHVnaW5cbiAgICAgKiBAcGFyYW0gbmFtZSB7U3RyaW5nfSBlLmcuICdlY29tbWVyY2UnIG9yICdteXBsdWdpbidcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB7T2JqZWN0fSBvcHRpb25hbCBlLmcge3BhdGg6ICcvbG9nJywgZGVidWc6IHRydWV9XG4gICAgICovXG4gICAgcmVxdWlyZTogZnVuY3Rpb24gKG5hbWUsIG9wdGlvbnMpIHtcbiAgICAgIGlmICh0eXBlb2YgZ2EgPT09ICdmdW5jdGlvbicpIHtcblxuICAgICAgICAvLyBSZXF1aXJlZCBGaWVsZHNcbiAgICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgICAgd2FybignYG5hbWVgIGlzIHJlcXVpcmVkIGluIC5yZXF1aXJlKCknKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBuYW1lID0gdHJpbShuYW1lKTtcbiAgICAgICAgaWYgKG5hbWUgPT09ICcnKSB7XG4gICAgICAgICAgd2FybignYG5hbWVgIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcgaW4gLnJlcXVpcmUoKScpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9wdGlvbmFsIEZpZWxkc1xuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHdhcm4oJ0V4cGVjdGVkIGBvcHRpb25zYCBhcmcgdG8gYmUgYW4gT2JqZWN0Jyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKE9iamVjdC5rZXlzKG9wdGlvbnMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgd2FybignRW1wdHkgYG9wdGlvbnNgIGdpdmVuIHRvIC5yZXF1aXJlKCknKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBnYSgncmVxdWlyZScsIG5hbWUsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgaWYgKF9kZWJ1Zykge1xuICAgICAgICAgICAgbG9nKCdjYWxsZWQgZ2EoXFwncmVxdWlyZVxcJywgXFwnJyArIG5hbWUgKyAnXFwnLCAnICsgSlNPTi5zdHJpbmdpZnkob3B0aW9ucykgKyAnKTsnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2EoJ3JlcXVpcmUnLCBuYW1lKTtcblxuICAgICAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgICAgIGxvZygnY2FsbGVkIGdhKFxcJ3JlcXVpcmVcXCcsIFxcJycgKyBuYW1lICsgJ1xcJyk7Jyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGV4ZWN1dGU6XG4gICAgICogR0EgZXhlY3V0ZSBhY3Rpb24gZm9yIHBsdWdpblxuICAgICAqIFRha2VzIHZhcmlhYmxlIG51bWJlciBvZiBhcmd1bWVudHNcbiAgICAgKiBAcGFyYW0gcGx1Z2luTmFtZSB7U3RyaW5nfSBlLmcuICdlY29tbWVyY2UnIG9yICdteXBsdWdpbidcbiAgICAgKiBAcGFyYW0gYWN0aW9uIHtTdHJpbmd9IGUuZy4gJ2FkZEl0ZW0nIG9yICdteUN1c3RvbUFjdGlvbidcbiAgICAgKiBAcGFyYW0gYWN0aW9uVHlwZSB7U3RyaW5nfSBvcHRpb25hbCBlLmcuICdkZXRhaWwnXG4gICAgICogQHBhcmFtIHBheWxvYWQge09iamVjdH0gb3B0aW9uYWwgZS5nIHsgaWQ6ICcxeDVlJywgbmFtZSA6ICdNeSBwcm9kdWN0IHRvIHRyYWNrJyB9XG4gICAgICovXG4gICAgZXhlY3V0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgcGx1Z2luTmFtZSA9IGFyZ3NbMF07XG4gICAgICB2YXIgYWN0aW9uID0gYXJnc1sxXTtcbiAgICAgIHZhciBwYXlsb2FkO1xuICAgICAgdmFyIGFjdGlvblR5cGU7XG5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICBwYXlsb2FkID0gYXJnc1syXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGlvblR5cGUgPSBhcmdzWzJdO1xuICAgICAgICBwYXlsb2FkID0gYXJnc1szXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAodHlwZW9mIHBsdWdpbk5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgd2FybignRXhwZWN0ZWQgYHBsdWdpbk5hbWVgIGFyZyB0byBiZSBhIFN0cmluZy4nKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYWN0aW9uICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHdhcm4oJ0V4cGVjdGVkIGBhY3Rpb25gIGFyZyB0byBiZSBhIFN0cmluZy4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY29tbWFuZCA9IHBsdWdpbk5hbWUgKyAnOicgKyBhY3Rpb247XG4gICAgICAgICAgcGF5bG9hZCA9IHBheWxvYWQgfHwgbnVsbDtcbiAgICAgICAgICBpZiAoYWN0aW9uVHlwZSAmJiBwYXlsb2FkKSB7XG4gICAgICAgICAgICBnYShjb21tYW5kLCBhY3Rpb25UeXBlLCBwYXlsb2FkKTtcbiAgICAgICAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgICAgICAgbG9nKCdjYWxsZWQgZ2EoXFwnJyArIGNvbW1hbmQgKyAnXFwnKTsnKTtcbiAgICAgICAgICAgICAgbG9nKCdhY3Rpb25UeXBlOiBcIicgKyBhY3Rpb25UeXBlICsgJ1wiIHdpdGggcGF5bG9hZDogJyArIEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHBheWxvYWQpIHtcbiAgICAgICAgICAgIGdhKGNvbW1hbmQsIHBheWxvYWQpO1xuICAgICAgICAgICAgaWYgKF9kZWJ1Zykge1xuICAgICAgICAgICAgICBsb2coJ2NhbGxlZCBnYShcXCcnICsgY29tbWFuZCArICdcXCcpOycpO1xuICAgICAgICAgICAgICBsb2coJ3dpdGggcGF5bG9hZDogJyArIEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2EoY29tbWFuZCk7XG4gICAgICAgICAgICBpZiAoX2RlYnVnKSB7XG4gICAgICAgICAgICAgIGxvZygnY2FsbGVkIGdhKFxcJycgKyBjb21tYW5kICsgJ1xcJyk7Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIG91dGJvdW5kTGluazpcbiAgICogR0Egb3V0Ym91bmRMaW5rIHRyYWNraW5nXG4gICAqIEBwYXJhbSBhcmdzLmxhYmVsIHtTdHJpbmd9IGUuZy4gdXJsLCBvciAnQ3JlYXRlIGFuIEFjY291bnQnXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGhpdENhbGxiYWNrIC0gQ2FsbGVkIGFmdGVyIHByb2Nlc3NpbmcgYSBoaXQuXG4gICAqL1xuICBvdXRib3VuZExpbms6IGZ1bmN0aW9uIChhcmdzLCBoaXRDYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2YgaGl0Q2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHdhcm4oJ2hpdENhbGxiYWNrIGZ1bmN0aW9uIGlzIHJlcXVpcmVkJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAvLyBTaW1wbGUgVmFsaWRhdGlvblxuICAgICAgaWYgKCFhcmdzIHx8ICFhcmdzLmxhYmVsKSB7XG4gICAgICAgIHdhcm4oJ2FyZ3MubGFiZWwgaXMgcmVxdWlyZWQgaW4gb3V0Ym91bmRMaW5rKCknKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXF1aXJlZCBGaWVsZHNcbiAgICAgIHZhciBmaWVsZE9iamVjdCA9IHtcbiAgICAgICAgaGl0VHlwZTogJ2V2ZW50JyxcbiAgICAgICAgZXZlbnRDYXRlZ29yeTogJ091dGJvdW5kJyxcbiAgICAgICAgZXZlbnRBY3Rpb246ICdDbGljaycsXG4gICAgICAgIGV2ZW50TGFiZWw6IF9mb3JtYXQoYXJncy5sYWJlbClcbiAgICAgIH07XG5cbiAgICAgIHZhciBzYWZldHlDYWxsYmFja0NhbGxlZCA9IGZhbHNlO1xuICAgICAgdmFyIHNhZmV0eUNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIC8vIFRoaXMgcHJldmVudHMgYSBkZWxheWVkIHJlc3BvbnNlIGZyb20gR0FcbiAgICAgICAgLy8gY2F1c2luZyBoaXRDYWxsYmFjayBmcm9tIGJlaW5nIGZpcmVkIHR3aWNlXG4gICAgICAgIHNhZmV0eUNhbGxiYWNrQ2FsbGVkID0gdHJ1ZTtcblxuICAgICAgICBoaXRDYWxsYmFjaygpO1xuICAgICAgfTtcblxuICAgICAgLy8gVXNpbmcgYSB0aW1lb3V0IHRvIGVuc3VyZSB0aGUgZXhlY3V0aW9uIG9mIGNyaXRpY2FsIGFwcGxpY2F0aW9uIGNvZGVcbiAgICAgIC8vIGluIHRoZSBjYXNlIHdoZW4gdGhlIEdBIHNlcnZlciBtaWdodCBiZSBkb3duXG4gICAgICAvLyBvciBhbiBhZCBibG9ja2VyIHByZXZlbnRzIHNlbmRpbmcgdGhlIGRhdGFcblxuICAgICAgLy8gcmVnaXN0ZXIgc2FmZXR5IG5ldCB0aW1lb3V0OlxuICAgICAgdmFyIHQgPSBzZXRUaW1lb3V0KHNhZmV0eUNhbGxiYWNrLCAyNTApO1xuXG4gICAgICB2YXIgY2xlYXJhYmxlQ2FsbGJhY2tGb3JHQSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHQpO1xuICAgICAgICBpZiAoIXNhZmV0eUNhbGxiYWNrQ2FsbGVkKSB7XG4gICAgICAgICAgaGl0Q2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZmllbGRPYmplY3QuaGl0Q2FsbGJhY2sgPSBjbGVhcmFibGVDYWxsYmFja0ZvckdBO1xuXG4gICAgICAvLyBTZW5kIHRvIEdBXG4gICAgICB0aGlzLnNlbmQoZmllbGRPYmplY3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBnYSBpcyBub3QgZGVmaW5lZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBzbyB0aGUgYXBwbGljYXRpb25cbiAgICAgIC8vIGNvbnRpbnVlcyB0byB3b3JrIGFzIGV4cGVjdGVkXG4gICAgICBzZXRUaW1lb3V0KGhpdENhbGxiYWNrLCAwKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBPdXRib3VuZExpbmsgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvT3V0Ym91bmRMaW5rJyk7XG5PdXRib3VuZExpbmsub3JpZ1RyYWNrTGluayA9IE91dGJvdW5kTGluay50cmFja0xpbms7XG5PdXRib3VuZExpbmsudHJhY2tMaW5rID0gUmVhY3RHQS5vdXRib3VuZExpbmsuYmluZChSZWFjdEdBKTtcblJlYWN0R0EuT3V0Ym91bmRMaW5rID0gT3V0Ym91bmRMaW5rO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0R0E7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZ2Evc3JjL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyNzJcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiZnVuY3Rpb24gbG9nKHMpIHtcbiAgY29uc29sZS5pbmZvKCdbcmVhY3QtZ2FdJywgcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbG9nO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWdhL3NyYy91dGlscy9jb25zb2xlL2xvZy5qc1xuLy8gbW9kdWxlIGlkID0gMjczXG4vLyBtb2R1bGUgY2h1bmtzID0gMSIsInZhciBtaWdodEJlRW1haWwgPSByZXF1aXJlKCcuL21pZ2h0QmVFbWFpbCcpO1xudmFyIHRvVGl0bGVDYXNlID0gcmVxdWlyZSgnLi90b1RpdGxlQ2FzZScpO1xudmFyIHdhcm4gPSByZXF1aXJlKCcuL2NvbnNvbGUvd2FybicpO1xuXG52YXIgX3JlZGFjdGVkID0gJ1JFREFDVEVEIChQb3RlbnRpYWwgRW1haWwgQWRkcmVzcyknO1xuXG5mdW5jdGlvbiBmb3JtYXQocywgdGl0bGVDYXNlKSB7XG4gIGlmIChtaWdodEJlRW1haWwocykpIHtcbiAgICB3YXJuKCdUaGlzIGFyZyBsb29rcyBsaWtlIGFuIGVtYWlsIGFkZHJlc3MsIHJlZGFjdGluZy4nKTtcbiAgICByZXR1cm4gX3JlZGFjdGVkO1xuICB9XG5cbiAgaWYgKHRpdGxlQ2FzZSkge1xuICAgIHJldHVybiB0b1RpdGxlQ2FzZShzKTtcbiAgfVxuXG4gIHJldHVybiBzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvcm1hdDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1nYS9zcmMvdXRpbHMvZm9ybWF0LmpzXG4vLyBtb2R1bGUgaWQgPSAyNzRcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiLy8gU2VlIGlmIHMgY291bGQgYmUgYW4gZW1haWwgYWRkcmVzcy4gV2UgZG9uJ3Qgd2FudCB0byBzZW5kIHBlcnNvbmFsIGRhdGEgbGlrZSBlbWFpbC5cbi8vIGh0dHBzOi8vc3VwcG9ydC5nb29nbGUuY29tL2FuYWx5dGljcy9hbnN3ZXIvMjc5NTk4Mz9obD1lblxuZnVuY3Rpb24gbWlnaHRCZUVtYWlsKHMpIHtcbiAgLy8gVGhlcmUncyBubyBwb2ludCB0cnlpbmcgdG8gdmFsaWRhdGUgcmZjODIyIGZ1bGx5LCBqdXN0IGxvb2sgZm9yIC4uLkAuLi5cbiAgcmV0dXJuICgvW15AXStAW15AXSsvKS50ZXN0KHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1pZ2h0QmVFbWFpbDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1nYS9zcmMvdXRpbHMvbWlnaHRCZUVtYWlsLmpzXG4vLyBtb2R1bGUgaWQgPSAyNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiZnVuY3Rpb24gcmVtb3ZlTGVhZGluZ1NsYXNoKHMpIHtcbiAgaWYgKHMuc3Vic3RyaW5nKDAsIDEpID09PSAnLycpIHtcbiAgICBzID0gcy5zdWJzdHJpbmcoMSk7XG4gIH1cblxuICByZXR1cm4gcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZW1vdmVMZWFkaW5nU2xhc2g7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZ2Evc3JjL3V0aWxzL3JlbW92ZUxlYWRpbmdTbGFzaC5qc1xuLy8gbW9kdWxlIGlkID0gMjc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMSIsIi8qKlxuICogVG8gVGl0bGUgQ2FzZSAyLjEgLSBodHRwOi8vaW5kaXZpZGVkLmNvbS9jb2RlL3RvLXRpdGxlLWNhc2UvXG4gKiBDb3B5cmlnaHQgMjAwOC0yMDEzIERhdmlkIEdvdWNoLiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ291Y2gvdG8tdGl0bGUtY2FzZVxuICovXG5cbnZhciB0cmltID0gcmVxdWlyZSgnLi90cmltJyk7XG5cbmZ1bmN0aW9uIHRvVGl0bGVDYXNlKHMpIHtcbiAgdmFyIHNtYWxsV29yZHMgPSAvXihhfGFufGFuZHxhc3xhdHxidXR8Ynl8ZW58Zm9yfGlmfGlufG5vcnxvZnxvbnxvcnxwZXJ8dGhlfHRvfHZzP1xcLj98dmlhKSQvaTtcbiAgcyA9IHRyaW0ocyk7XG5cbiAgcmV0dXJuIHMucmVwbGFjZSgvW0EtWmEtejAtOVxcdTAwQzAtXFx1MDBGRl0rW15cXHMtXSovZywgZnVuY3Rpb24gKG1hdGNoLCBpbmRleCwgdGl0bGUpIHtcbiAgICBpZiAoaW5kZXggPiAwICYmXG4gICAgICAgIGluZGV4ICsgbWF0Y2gubGVuZ3RoICE9PSB0aXRsZS5sZW5ndGggJiZcbiAgICAgICAgbWF0Y2guc2VhcmNoKHNtYWxsV29yZHMpID4gLTEgJiZcbiAgICAgICAgdGl0bGUuY2hhckF0KGluZGV4IC0gMikgIT09ICc6JyAmJlxuICAgICAgICAodGl0bGUuY2hhckF0KGluZGV4ICsgbWF0Y2gubGVuZ3RoKSAhPT0gJy0nIHx8IHRpdGxlLmNoYXJBdChpbmRleCAtIDEpID09PSAnLScpICYmXG4gICAgICAgIHRpdGxlLmNoYXJBdChpbmRleCAtIDEpLnNlYXJjaCgvW15cXHMtXS8pIDwgMCkge1xuICAgICAgcmV0dXJuIG1hdGNoLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoLnN1YnN0cigxKS5zZWFyY2goL1tBLVpdfFxcLi4vKSA+IC0xKSB7XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbWF0Y2guc3Vic3RyKDEpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1RpdGxlQ2FzZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1nYS9zcmMvdXRpbHMvdG9UaXRsZUNhc2UuanNcbi8vIG1vZHVsZSBpZCA9IDI3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCJ2YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFJlYWN0RE9NID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdleGVudicpO1xudmFyIE1vZGFsUG9ydGFsID0gUmVhY3QuY3JlYXRlRmFjdG9yeShyZXF1aXJlKCcuL01vZGFsUG9ydGFsJykpO1xudmFyIGFyaWFBcHBIaWRlciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYXJpYUFwcEhpZGVyJyk7XG52YXIgZWxlbWVudENsYXNzID0gcmVxdWlyZSgnZWxlbWVudC1jbGFzcycpO1xudmFyIHJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyID0gcmVxdWlyZShcInJlYWN0LWRvbVwiKS51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjtcbnZhciBBc3NpZ24gPSByZXF1aXJlKCdsb2Rhc2guYXNzaWduJyk7XG5cbnZhciBTYWZlSFRNTEVsZW1lbnQgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyB3aW5kb3cuSFRNTEVsZW1lbnQgOiB7fTtcbnZhciBBcHBFbGVtZW50ID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuYm9keSA6IHthcHBlbmRDaGlsZDogZnVuY3Rpb24oKSB7fX07XG5cbmZ1bmN0aW9uIGdldFBhcmVudEVsZW1lbnQocGFyZW50U2VsZWN0b3IpIHtcbiAgcmV0dXJuIHBhcmVudFNlbGVjdG9yKCk7XG59XG5cbnZhciBNb2RhbCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblxuICBkaXNwbGF5TmFtZTogJ01vZGFsJyxcbiAgc3RhdGljczoge1xuICAgIHNldEFwcEVsZW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgQXBwRWxlbWVudCA9IGFyaWFBcHBIaWRlci5zZXRFbGVtZW50KGVsZW1lbnQpO1xuICAgIH0sXG4gICAgaW5qZWN0Q1NTOiBmdW5jdGlvbigpIHtcbiAgICAgIFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVlxuICAgICAgICAmJiBjb25zb2xlLndhcm4oJ1JlYWN0LU1vZGFsOiBpbmplY3RDU1MgaGFzIGJlZW4gZGVwcmVjYXRlZCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdhbmQgbm8gbG9uZ2VyIGhhcyBhbnkgZWZmZWN0LiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBsYXRlciB2ZXJzaW9uJyk7XG4gICAgfVxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGlzT3BlbjogUmVhY3QuUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBzdHlsZTogUmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGNvbnRlbnQ6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgICBvdmVybGF5OiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gICAgfSksXG4gICAgcG9ydGFsQ2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFwcEVsZW1lbnQ6IFJlYWN0LlByb3BUeXBlcy5pbnN0YW5jZU9mKFNhZmVIVE1MRWxlbWVudCksXG4gICAgb25BZnRlck9wZW46IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uUmVxdWVzdENsb3NlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBjbG9zZVRpbWVvdXRNUzogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBhcmlhSGlkZUFwcDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvdWxkQ2xvc2VPbk92ZXJsYXlDbGljazogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgcGFyZW50U2VsZWN0b3I6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIHJvbGU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGVudExhYmVsOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWRcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNPcGVuOiBmYWxzZSxcbiAgICAgIHBvcnRhbENsYXNzTmFtZTogJ1JlYWN0TW9kYWxQb3J0YWwnLFxuICAgICAgYXJpYUhpZGVBcHA6IHRydWUsXG4gICAgICBjbG9zZVRpbWVvdXRNUzogMCxcbiAgICAgIHNob3VsZENsb3NlT25PdmVybGF5Q2xpY2s6IHRydWUsXG4gICAgICBwYXJlbnRTZWxlY3RvcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQuYm9keTsgfVxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMubm9kZS5jbGFzc05hbWUgPSB0aGlzLnByb3BzLnBvcnRhbENsYXNzTmFtZTtcblxuICAgIHZhciBwYXJlbnQgPSBnZXRQYXJlbnRFbGVtZW50KHRoaXMucHJvcHMucGFyZW50U2VsZWN0b3IpO1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLm5vZGUpO1xuICAgIHRoaXMucmVuZGVyUG9ydGFsKHRoaXMucHJvcHMpO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uKG5ld1Byb3BzKSB7XG4gICAgdmFyIGN1cnJlbnRQYXJlbnQgPSBnZXRQYXJlbnRFbGVtZW50KHRoaXMucHJvcHMucGFyZW50U2VsZWN0b3IpO1xuICAgIHZhciBuZXdQYXJlbnQgPSBnZXRQYXJlbnRFbGVtZW50KG5ld1Byb3BzLnBhcmVudFNlbGVjdG9yKTtcblxuICAgIGlmKG5ld1BhcmVudCAhPT0gY3VycmVudFBhcmVudCkge1xuICAgICAgY3VycmVudFBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLm5vZGUpO1xuICAgICAgbmV3UGFyZW50LmFwcGVuZENoaWxkKHRoaXMubm9kZSk7XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJQb3J0YWwobmV3UHJvcHMpO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5hcmlhSGlkZUFwcCkge1xuICAgICAgYXJpYUFwcEhpZGVyLnNob3codGhpcy5wcm9wcy5hcHBFbGVtZW50KTtcbiAgICB9XG5cbiAgICBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKHRoaXMubm9kZSk7XG4gICAgdmFyIHBhcmVudCA9IGdldFBhcmVudEVsZW1lbnQodGhpcy5wcm9wcy5wYXJlbnRTZWxlY3Rvcik7XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMubm9kZSk7XG4gICAgZWxlbWVudENsYXNzKGRvY3VtZW50LmJvZHkpLnJlbW92ZSgnUmVhY3RNb2RhbF9fQm9keS0tb3BlbicpO1xuICB9LFxuXG4gIHJlbmRlclBvcnRhbDogZnVuY3Rpb24ocHJvcHMpIHtcbiAgICBpZiAocHJvcHMuaXNPcGVuKSB7XG4gICAgICBlbGVtZW50Q2xhc3MoZG9jdW1lbnQuYm9keSkuYWRkKCdSZWFjdE1vZGFsX19Cb2R5LS1vcGVuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnRDbGFzcyhkb2N1bWVudC5ib2R5KS5yZW1vdmUoJ1JlYWN0TW9kYWxfX0JvZHktLW9wZW4nKTtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuYXJpYUhpZGVBcHApIHtcbiAgICAgIGFyaWFBcHBIaWRlci50b2dnbGUocHJvcHMuaXNPcGVuLCBwcm9wcy5hcHBFbGVtZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLnBvcnRhbCA9IHJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKHRoaXMsIE1vZGFsUG9ydGFsKEFzc2lnbih7fSwgcHJvcHMsIHtkZWZhdWx0U3R5bGVzOiBNb2RhbC5kZWZhdWx0U3R5bGVzfSkpLCB0aGlzLm5vZGUpO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBSZWFjdC5ET00ubm9zY3JpcHQoKTtcbiAgfVxufSk7XG5cbk1vZGFsLmRlZmF1bHRTdHlsZXMgPSB7XG4gIG92ZXJsYXk6IHtcbiAgICBwb3NpdGlvbiAgICAgICAgOiAnZml4ZWQnLFxuICAgIHRvcCAgICAgICAgICAgICA6IDAsXG4gICAgbGVmdCAgICAgICAgICAgIDogMCxcbiAgICByaWdodCAgICAgICAgICAgOiAwLFxuICAgIGJvdHRvbSAgICAgICAgICA6IDAsXG4gICAgYmFja2dyb3VuZENvbG9yIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43NSknXG4gIH0sXG4gIGNvbnRlbnQ6IHtcbiAgICBwb3NpdGlvbiAgICAgICAgICAgICAgICA6ICdhYnNvbHV0ZScsXG4gICAgdG9wICAgICAgICAgICAgICAgICAgICAgOiAnNDBweCcsXG4gICAgbGVmdCAgICAgICAgICAgICAgICAgICAgOiAnNDBweCcsXG4gICAgcmlnaHQgICAgICAgICAgICAgICAgICAgOiAnNDBweCcsXG4gICAgYm90dG9tICAgICAgICAgICAgICAgICAgOiAnNDBweCcsXG4gICAgYm9yZGVyICAgICAgICAgICAgICAgICAgOiAnMXB4IHNvbGlkICNjY2MnLFxuICAgIGJhY2tncm91bmQgICAgICAgICAgICAgIDogJyNmZmYnLFxuICAgIG92ZXJmbG93ICAgICAgICAgICAgICAgIDogJ2F1dG8nLFxuICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIDogJ3RvdWNoJyxcbiAgICBib3JkZXJSYWRpdXMgICAgICAgICAgICA6ICc0cHgnLFxuICAgIG91dGxpbmUgICAgICAgICAgICAgICAgIDogJ25vbmUnLFxuICAgIHBhZGRpbmcgICAgICAgICAgICAgICAgIDogJzIwcHgnXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNb2RhbFxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LW1vZGFsL2xpYi9jb21wb25lbnRzL01vZGFsLmpzXG4vLyBtb2R1bGUgaWQgPSAyNzhcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwidmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBkaXYgPSBSZWFjdC5ET00uZGl2O1xudmFyIGZvY3VzTWFuYWdlciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvZm9jdXNNYW5hZ2VyJyk7XG52YXIgc2NvcGVUYWIgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3Njb3BlVGFiJyk7XG52YXIgQXNzaWduID0gcmVxdWlyZSgnbG9kYXNoLmFzc2lnbicpO1xuXG4vLyBzbyB0aGF0IG91ciBDU1MgaXMgc3RhdGljYWxseSBhbmFseXphYmxlXG52YXIgQ0xBU1NfTkFNRVMgPSB7XG4gIG92ZXJsYXk6IHtcbiAgICBiYXNlOiAnUmVhY3RNb2RhbF9fT3ZlcmxheScsXG4gICAgYWZ0ZXJPcGVuOiAnUmVhY3RNb2RhbF9fT3ZlcmxheS0tYWZ0ZXItb3BlbicsXG4gICAgYmVmb3JlQ2xvc2U6ICdSZWFjdE1vZGFsX19PdmVybGF5LS1iZWZvcmUtY2xvc2UnXG4gIH0sXG4gIGNvbnRlbnQ6IHtcbiAgICBiYXNlOiAnUmVhY3RNb2RhbF9fQ29udGVudCcsXG4gICAgYWZ0ZXJPcGVuOiAnUmVhY3RNb2RhbF9fQ29udGVudC0tYWZ0ZXItb3BlbicsXG4gICAgYmVmb3JlQ2xvc2U6ICdSZWFjdE1vZGFsX19Db250ZW50LS1iZWZvcmUtY2xvc2UnXG4gIH1cbn07XG5cbnZhciBNb2RhbFBvcnRhbCA9IG1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG4gIGRpc3BsYXlOYW1lOiAnTW9kYWxQb3J0YWwnLFxuICBzaG91bGRDbG9zZTogbnVsbCxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdHlsZToge1xuICAgICAgICBvdmVybGF5OiB7fSxcbiAgICAgICAgY29udGVudDoge31cbiAgICAgIH1cbiAgICB9O1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFmdGVyT3BlbjogZmFsc2UsXG4gICAgICBiZWZvcmVDbG9zZTogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAvLyBGb2N1cyBuZWVkcyB0byBiZSBzZXQgd2hlbiBtb3VudGluZyBhbmQgYWxyZWFkeSBvcGVuXG4gICAgaWYgKHRoaXMucHJvcHMuaXNPcGVuKSB7XG4gICAgICB0aGlzLnNldEZvY3VzQWZ0ZXJSZW5kZXIodHJ1ZSk7XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmNsb3NlVGltZXIpO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uKG5ld1Byb3BzKSB7XG4gICAgLy8gRm9jdXMgb25seSBuZWVkcyB0byBiZSBzZXQgb25jZSB3aGVuIHRoZSBtb2RhbCBpcyBiZWluZyBvcGVuZWRcbiAgICBpZiAoIXRoaXMucHJvcHMuaXNPcGVuICYmIG5ld1Byb3BzLmlzT3Blbikge1xuICAgICAgdGhpcy5zZXRGb2N1c0FmdGVyUmVuZGVyKHRydWUpO1xuICAgICAgdGhpcy5vcGVuKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmlzT3BlbiAmJiAhbmV3UHJvcHMuaXNPcGVuKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmZvY3VzQWZ0ZXJSZW5kZXIpIHtcbiAgICAgIHRoaXMuZm9jdXNDb250ZW50KCk7XG4gICAgICB0aGlzLnNldEZvY3VzQWZ0ZXJSZW5kZXIoZmFsc2UpO1xuICAgIH1cbiAgfSxcblxuICBzZXRGb2N1c0FmdGVyUmVuZGVyOiBmdW5jdGlvbiAoZm9jdXMpIHtcbiAgICB0aGlzLmZvY3VzQWZ0ZXJSZW5kZXIgPSBmb2N1cztcbiAgfSxcblxuICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5hZnRlck9wZW4gJiYgdGhpcy5zdGF0ZS5iZWZvcmVDbG9zZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY2xvc2VUaW1lcik7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgYmVmb3JlQ2xvc2U6IGZhbHNlIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb2N1c01hbmFnZXIuc2V0dXBTY29wZWRGb2N1cyh0aGlzLm5vZGUpO1xuICAgICAgZm9jdXNNYW5hZ2VyLm1hcmtGb3JGb2N1c0xhdGVyKCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHtpc09wZW46IHRydWV9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7YWZ0ZXJPcGVuOiB0cnVlfSk7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaXNPcGVuICYmIHRoaXMucHJvcHMub25BZnRlck9wZW4pIHtcbiAgICAgICAgICB0aGlzLnByb3BzLm9uQWZ0ZXJPcGVuKCk7XG4gICAgICAgIH1cbiAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuICB9LFxuXG4gIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5jbG9zZVRpbWVvdXRNUyA+IDApXG4gICAgICB0aGlzLmNsb3NlV2l0aFRpbWVvdXQoKTtcbiAgICBlbHNlXG4gICAgICB0aGlzLmNsb3NlV2l0aG91dFRpbWVvdXQoKTtcbiAgfSxcblxuICBmb2N1c0NvbnRlbnQ6IGZ1bmN0aW9uKCkge1xuICAgIC8vIERvbid0IHN0ZWFsIGZvY3VzIGZyb20gaW5uZXIgZWxlbWVudHNcbiAgICBpZiAoIXRoaXMuY29udGVudEhhc0ZvY3VzKCkpIHtcbiAgICAgIHRoaXMucmVmcy5jb250ZW50LmZvY3VzKCk7XG4gICAgfVxuICB9LFxuXG4gIGNsb3NlV2l0aFRpbWVvdXQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe2JlZm9yZUNsb3NlOiB0cnVlfSwgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmNsb3NlVGltZXIgPSBzZXRUaW1lb3V0KHRoaXMuY2xvc2VXaXRob3V0VGltZW91dCwgdGhpcy5wcm9wcy5jbG9zZVRpbWVvdXRNUyk7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfSxcblxuICBjbG9zZVdpdGhvdXRUaW1lb3V0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGJlZm9yZUNsb3NlOiBmYWxzZSxcbiAgICAgIGlzT3BlbjogZmFsc2UsXG4gICAgICBhZnRlck9wZW46IGZhbHNlLFxuICAgIH0sIHRoaXMuYWZ0ZXJDbG9zZSk7XG4gIH0sXG5cbiAgYWZ0ZXJDbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgZm9jdXNNYW5hZ2VyLnJldHVybkZvY3VzKCk7XG4gICAgZm9jdXNNYW5hZ2VyLnRlYXJkb3duU2NvcGVkRm9jdXMoKTtcbiAgfSxcblxuICBoYW5kbGVLZXlEb3duOiBmdW5jdGlvbihldmVudCkge1xuICAgIGlmIChldmVudC5rZXlDb2RlID09IDkgLyp0YWIqLykgc2NvcGVUYWIodGhpcy5yZWZzLmNvbnRlbnQsIGV2ZW50KTtcbiAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSAyNyAvKmVzYyovKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5yZXF1ZXN0Q2xvc2UoZXZlbnQpO1xuICAgIH1cbiAgfSxcblxuICBoYW5kbGVPdmVybGF5TW91c2VEb3duOiBmdW5jdGlvbihldmVudCkge1xuICAgIGlmICh0aGlzLnNob3VsZENsb3NlID09PSBudWxsKSB7XG4gICAgICB0aGlzLnNob3VsZENsb3NlID0gdHJ1ZTtcbiAgICB9XG4gIH0sXG5cbiAgaGFuZGxlT3ZlcmxheU1vdXNlVXA6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuc2hvdWxkQ2xvc2UgJiYgdGhpcy5wcm9wcy5zaG91bGRDbG9zZU9uT3ZlcmxheUNsaWNrKSB7XG4gICAgICBpZiAodGhpcy5vd25lckhhbmRsZXNDbG9zZSgpKVxuICAgICAgICB0aGlzLnJlcXVlc3RDbG9zZShldmVudCk7XG4gICAgICBlbHNlXG4gICAgICAgIHRoaXMuZm9jdXNDb250ZW50KCk7XG4gICAgfVxuICAgIHRoaXMuc2hvdWxkQ2xvc2UgPSBudWxsO1xuICB9LFxuXG4gIGhhbmRsZUNvbnRlbnRNb3VzZURvd246IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdGhpcy5zaG91bGRDbG9zZSA9IGZhbHNlO1xuICB9LFxuXG4gIGhhbmRsZUNvbnRlbnRNb3VzZVVwOiBmdW5jdGlvbihldmVudCkge1xuICAgIHRoaXMuc2hvdWxkQ2xvc2UgPSBmYWxzZTtcbiAgfSxcblxuICByZXF1ZXN0Q2xvc2U6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMub3duZXJIYW5kbGVzQ2xvc2UoKSlcbiAgICAgIHRoaXMucHJvcHMub25SZXF1ZXN0Q2xvc2UoZXZlbnQpO1xuICB9LFxuXG4gIG93bmVySGFuZGxlc0Nsb3NlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5vblJlcXVlc3RDbG9zZTtcbiAgfSxcblxuICBzaG91bGRCZUNsb3NlZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICF0aGlzLnByb3BzLmlzT3BlbiAmJiAhdGhpcy5zdGF0ZS5iZWZvcmVDbG9zZTtcbiAgfSxcblxuICBjb250ZW50SGFzRm9jdXM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSB0aGlzLnJlZnMuY29udGVudCB8fCB0aGlzLnJlZnMuY29udGVudC5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcbiAgfSxcblxuICBidWlsZENsYXNzTmFtZTogZnVuY3Rpb24od2hpY2gsIGFkZGl0aW9uYWwpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gQ0xBU1NfTkFNRVNbd2hpY2hdLmJhc2U7XG4gICAgaWYgKHRoaXMuc3RhdGUuYWZ0ZXJPcGVuKVxuICAgICAgY2xhc3NOYW1lICs9ICcgJytDTEFTU19OQU1FU1t3aGljaF0uYWZ0ZXJPcGVuO1xuICAgIGlmICh0aGlzLnN0YXRlLmJlZm9yZUNsb3NlKVxuICAgICAgY2xhc3NOYW1lICs9ICcgJytDTEFTU19OQU1FU1t3aGljaF0uYmVmb3JlQ2xvc2U7XG4gICAgcmV0dXJuIGFkZGl0aW9uYWwgPyBjbGFzc05hbWUgKyAnICcgKyBhZGRpdGlvbmFsIDogY2xhc3NOYW1lO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvbnRlbnRTdHlsZXMgPSAodGhpcy5wcm9wcy5jbGFzc05hbWUpID8ge30gOiB0aGlzLnByb3BzLmRlZmF1bHRTdHlsZXMuY29udGVudDtcbiAgICB2YXIgb3ZlcmxheVN0eWxlcyA9ICh0aGlzLnByb3BzLm92ZXJsYXlDbGFzc05hbWUpID8ge30gOiB0aGlzLnByb3BzLmRlZmF1bHRTdHlsZXMub3ZlcmxheTtcblxuICAgIHJldHVybiB0aGlzLnNob3VsZEJlQ2xvc2VkKCkgPyBkaXYoKSA6IChcbiAgICAgIGRpdih7XG4gICAgICAgIHJlZjogXCJvdmVybGF5XCIsXG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5idWlsZENsYXNzTmFtZSgnb3ZlcmxheScsIHRoaXMucHJvcHMub3ZlcmxheUNsYXNzTmFtZSksXG4gICAgICAgIHN0eWxlOiBBc3NpZ24oe30sIG92ZXJsYXlTdHlsZXMsIHRoaXMucHJvcHMuc3R5bGUub3ZlcmxheSB8fCB7fSksXG4gICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU92ZXJsYXlNb3VzZURvd24sXG4gICAgICAgIG9uTW91c2VVcDogdGhpcy5oYW5kbGVPdmVybGF5TW91c2VVcFxuICAgICAgfSxcbiAgICAgICAgZGl2KHtcbiAgICAgICAgICByZWY6IFwiY29udGVudFwiLFxuICAgICAgICAgIHN0eWxlOiBBc3NpZ24oe30sIGNvbnRlbnRTdHlsZXMsIHRoaXMucHJvcHMuc3R5bGUuY29udGVudCB8fCB7fSksXG4gICAgICAgICAgY2xhc3NOYW1lOiB0aGlzLmJ1aWxkQ2xhc3NOYW1lKCdjb250ZW50JywgdGhpcy5wcm9wcy5jbGFzc05hbWUpLFxuICAgICAgICAgIHRhYkluZGV4OiBcIi0xXCIsXG4gICAgICAgICAgb25LZXlEb3duOiB0aGlzLmhhbmRsZUtleURvd24sXG4gICAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlQ29udGVudE1vdXNlRG93bixcbiAgICAgICAgICBvbk1vdXNlVXA6IHRoaXMuaGFuZGxlQ29udGVudE1vdXNlVXAsXG4gICAgICAgICAgcm9sZTogdGhpcy5wcm9wcy5yb2xlLFxuICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiB0aGlzLnByb3BzLmNvbnRlbnRMYWJlbFxuICAgICAgICB9LFxuICAgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LW1vZGFsL2xpYi9jb21wb25lbnRzL01vZGFsUG9ydGFsLmpzXG4vLyBtb2R1bGUgaWQgPSAyNzlcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwidmFyIF9lbGVtZW50ID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50LmJvZHkgOiBudWxsO1xuXG5mdW5jdGlvbiBzZXRFbGVtZW50KGVsZW1lbnQpIHtcbiAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbWVudCk7XG4gICAgZWxlbWVudCA9ICdsZW5ndGgnIGluIGVsID8gZWxbMF0gOiBlbDtcbiAgfVxuICBfZWxlbWVudCA9IGVsZW1lbnQgfHwgX2VsZW1lbnQ7XG4gIHJldHVybiBfZWxlbWVudDtcbn1cblxuZnVuY3Rpb24gaGlkZShhcHBFbGVtZW50KSB7XG4gIHZhbGlkYXRlRWxlbWVudChhcHBFbGVtZW50KTtcbiAgKGFwcEVsZW1lbnQgfHwgX2VsZW1lbnQpLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xufVxuXG5mdW5jdGlvbiBzaG93KGFwcEVsZW1lbnQpIHtcbiAgdmFsaWRhdGVFbGVtZW50KGFwcEVsZW1lbnQpO1xuICAoYXBwRWxlbWVudCB8fCBfZWxlbWVudCkucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xufVxuXG5mdW5jdGlvbiB0b2dnbGUoc2hvdWxkSGlkZSwgYXBwRWxlbWVudCkge1xuICBpZiAoc2hvdWxkSGlkZSlcbiAgICBoaWRlKGFwcEVsZW1lbnQpO1xuICBlbHNlXG4gICAgc2hvdyhhcHBFbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVFbGVtZW50KGFwcEVsZW1lbnQpIHtcbiAgaWYgKCFhcHBFbGVtZW50ICYmICFfZWxlbWVudClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlYWN0LW1vZGFsOiBZb3UgbXVzdCBzZXQgYW4gZWxlbWVudCB3aXRoIGBNb2RhbC5zZXRBcHBFbGVtZW50KGVsKWAgdG8gbWFrZSB0aGlzIGFjY2Vzc2libGUnKTtcbn1cblxuZnVuY3Rpb24gcmVzZXRGb3JUZXN0aW5nKCkge1xuICBfZWxlbWVudCA9IGRvY3VtZW50LmJvZHk7XG59XG5cbmV4cG9ydHMudG9nZ2xlID0gdG9nZ2xlO1xuZXhwb3J0cy5zZXRFbGVtZW50ID0gc2V0RWxlbWVudDtcbmV4cG9ydHMuc2hvdyA9IHNob3c7XG5leHBvcnRzLmhpZGUgPSBoaWRlO1xuZXhwb3J0cy5yZXNldEZvclRlc3RpbmcgPSByZXNldEZvclRlc3Rpbmc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtbW9kYWwvbGliL2hlbHBlcnMvYXJpYUFwcEhpZGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAyODBcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwidmFyIGZpbmRUYWJiYWJsZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdGFiYmFibGUnKTtcbnZhciBtb2RhbEVsZW1lbnQgPSBudWxsO1xudmFyIGZvY3VzTGF0ZXJFbGVtZW50ID0gbnVsbDtcbnZhciBuZWVkVG9Gb2N1cyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBoYW5kbGVCbHVyKGV2ZW50KSB7XG4gIG5lZWRUb0ZvY3VzID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRm9jdXMoZXZlbnQpIHtcbiAgaWYgKG5lZWRUb0ZvY3VzKSB7XG4gICAgbmVlZFRvRm9jdXMgPSBmYWxzZTtcbiAgICBpZiAoIW1vZGFsRWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBuZWVkIHRvIHNlZSBob3cgalF1ZXJ5IHNoaW1zIGRvY3VtZW50Lm9uKCdmb2N1c2luJykgc28gd2UgZG9uJ3QgbmVlZCB0aGVcbiAgICAvLyBzZXRUaW1lb3V0LCBmaXJlZm94IGRvZXNuJ3Qgc3VwcG9ydCBmb2N1c2luLCBpZiBpdCBkaWQsIHdlIGNvdWxkIGZvY3VzXG4gICAgLy8gdGhlIGVsZW1lbnQgb3V0c2lkZSBvZiBhIHNldFRpbWVvdXQuIFNpZGUtZWZmZWN0IG9mIHRoaXMgaW1wbGVtZW50YXRpb24gXG4gICAgLy8gaXMgdGhhdCB0aGUgZG9jdW1lbnQuYm9keSBnZXRzIGZvY3VzLCBhbmQgdGhlbiB3ZSBmb2N1cyBvdXIgZWxlbWVudCByaWdodCBcbiAgICAvLyBhZnRlciwgc2VlbXMgZmluZS5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKG1vZGFsRWxlbWVudC5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdmFyIGVsID0gKGZpbmRUYWJiYWJsZShtb2RhbEVsZW1lbnQpWzBdIHx8IG1vZGFsRWxlbWVudCk7XG4gICAgICBlbC5mb2N1cygpO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmV4cG9ydHMubWFya0ZvckZvY3VzTGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgZm9jdXNMYXRlckVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xufTtcblxuZXhwb3J0cy5yZXR1cm5Gb2N1cyA9IGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIGZvY3VzTGF0ZXJFbGVtZW50LmZvY3VzKCk7XG4gIH1cbiAgY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLndhcm4oJ1lvdSB0cmllZCB0byByZXR1cm4gZm9jdXMgdG8gJytmb2N1c0xhdGVyRWxlbWVudCsnIGJ1dCBpdCBpcyBub3QgaW4gdGhlIERPTSBhbnltb3JlJyk7XG4gIH1cbiAgZm9jdXNMYXRlckVsZW1lbnQgPSBudWxsO1xufTtcblxuZXhwb3J0cy5zZXR1cFNjb3BlZEZvY3VzID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICBtb2RhbEVsZW1lbnQgPSBlbGVtZW50O1xuXG4gIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgaGFuZGxlQmx1ciwgZmFsc2UpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgaGFuZGxlRm9jdXMsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5hdHRhY2hFdmVudCgnb25CbHVyJywgaGFuZGxlQmx1cik7XG4gICAgZG9jdW1lbnQuYXR0YWNoRXZlbnQoJ29uRm9jdXMnLCBoYW5kbGVGb2N1cyk7XG4gIH1cbn07XG5cbmV4cG9ydHMudGVhcmRvd25TY29wZWRGb2N1cyA9IGZ1bmN0aW9uKCkge1xuICBtb2RhbEVsZW1lbnQgPSBudWxsO1xuXG4gIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgaGFuZGxlQmx1cik7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBoYW5kbGVGb2N1cyk7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93LmRldGFjaEV2ZW50KCdvbkJsdXInLCBoYW5kbGVCbHVyKTtcbiAgICBkb2N1bWVudC5kZXRhY2hFdmVudCgnb25Gb2N1cycsIGhhbmRsZUZvY3VzKTtcbiAgfVxufTtcblxuXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtbW9kYWwvbGliL2hlbHBlcnMvZm9jdXNNYW5hZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAyODFcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwidmFyIGZpbmRUYWJiYWJsZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdGFiYmFibGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihub2RlLCBldmVudCkge1xuICB2YXIgdGFiYmFibGUgPSBmaW5kVGFiYmFibGUobm9kZSk7XG4gIGlmICghdGFiYmFibGUubGVuZ3RoKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuO1xuICB9XG4gIHZhciBmaW5hbFRhYmJhYmxlID0gdGFiYmFibGVbZXZlbnQuc2hpZnRLZXkgPyAwIDogdGFiYmFibGUubGVuZ3RoIC0gMV07XG4gIHZhciBsZWF2aW5nRmluYWxUYWJiYWJsZSA9IChcbiAgICBmaW5hbFRhYmJhYmxlID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHx8XG4gICAgLy8gaGFuZGxlIGltbWVkaWF0ZSBzaGlmdCt0YWIgYWZ0ZXIgb3BlbmluZyB3aXRoIG1vdXNlXG4gICAgbm9kZSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudFxuICApO1xuICBpZiAoIWxlYXZpbmdGaW5hbFRhYmJhYmxlKSByZXR1cm47XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIHZhciB0YXJnZXQgPSB0YWJiYWJsZVtldmVudC5zaGlmdEtleSA/IHRhYmJhYmxlLmxlbmd0aCAtIDEgOiAwXTtcbiAgdGFyZ2V0LmZvY3VzKCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LW1vZGFsL2xpYi9oZWxwZXJzL3Njb3BlVGFiLmpzXG4vLyBtb2R1bGUgaWQgPSAyODJcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvTW9kYWwnKTtcblxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LW1vZGFsL2xpYi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMSIsInZhciBjYW5Vc2VET00gPSByZXF1aXJlKCdjYW4tdXNlLWRvbScpO1xudmFyIGVucXVpcmUgPSBjYW5Vc2VET00gJiYgcmVxdWlyZSgnZW5xdWlyZS5qcycpO1xudmFyIGpzb24ybXEgPSByZXF1aXJlKCdqc29uMm1xJyk7XG5cbnZhciBSZXNwb25zaXZlTWl4aW4gPSB7XG4gIG1lZGlhOiBmdW5jdGlvbiAocXVlcnksIGhhbmRsZXIpIHtcbiAgICBxdWVyeSA9IGpzb24ybXEocXVlcnkpO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaGFuZGxlciA9IHtcbiAgICAgICAgbWF0Y2g6IGhhbmRsZXJcbiAgICAgIH07XG4gICAgfVxuICAgIGNhblVzZURPTSAmJiBlbnF1aXJlLnJlZ2lzdGVyKHF1ZXJ5LCBoYW5kbGVyKTtcblxuICAgIC8vIFF1ZXVlIHRoZSBoYW5kbGVycyB0byB1bnJlZ2lzdGVyIHRoZW0gYXQgdW5tb3VudCAgXG4gICAgaWYgKCEgdGhpcy5fcmVzcG9uc2l2ZU1lZGlhSGFuZGxlcnMpIHtcbiAgICAgIHRoaXMuX3Jlc3BvbnNpdmVNZWRpYUhhbmRsZXJzID0gW107XG4gICAgfVxuICAgIHRoaXMuX3Jlc3BvbnNpdmVNZWRpYUhhbmRsZXJzLnB1c2goe3F1ZXJ5OiBxdWVyeSwgaGFuZGxlcjogaGFuZGxlcn0pO1xuICB9LFxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZXNwb25zaXZlTWVkaWFIYW5kbGVycykge1xuICAgICAgdGhpcy5fcmVzcG9uc2l2ZU1lZGlhSGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbihvYmopIHtcbiAgICAgICAgY2FuVXNlRE9NICYmIGVucXVpcmUudW5yZWdpc3RlcihvYmoucXVlcnksIG9iai5oYW5kbGVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZXNwb25zaXZlTWl4aW47XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtcmVzcG9uc2l2ZS1taXhpbi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjkyXG4vLyBtb2R1bGUgY2h1bmtzID0gMSIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuTmV4dEFycm93ID0gZXhwb3J0cy5QcmV2QXJyb3cgPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9jbGFzc25hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoJy4vbWl4aW5zL2hlbHBlcnMnKTtcblxudmFyIF9oZWxwZXJzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgUHJldkFycm93ID0gZXhwb3J0cy5QcmV2QXJyb3cgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1ByZXZBcnJvdycsXG5cblxuICBjbGlja0hhbmRsZXI6IGZ1bmN0aW9uIGNsaWNrSGFuZGxlcihvcHRpb25zLCBlKSB7XG4gICAgaWYgKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5jbGlja0hhbmRsZXIob3B0aW9ucywgZSk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBwcmV2Q2xhc3NlcyA9IHsgJ3NsaWNrLWFycm93JzogdHJ1ZSwgJ3NsaWNrLXByZXYnOiB0cnVlIH07XG4gICAgdmFyIHByZXZIYW5kbGVyID0gdGhpcy5jbGlja0hhbmRsZXIuYmluZCh0aGlzLCB7IG1lc3NhZ2U6ICdwcmV2aW91cycgfSk7XG5cbiAgICBpZiAoIXRoaXMucHJvcHMuaW5maW5pdGUgJiYgKHRoaXMucHJvcHMuY3VycmVudFNsaWRlID09PSAwIHx8IHRoaXMucHJvcHMuc2xpZGVDb3VudCA8PSB0aGlzLnByb3BzLnNsaWRlc1RvU2hvdykpIHtcbiAgICAgIHByZXZDbGFzc2VzWydzbGljay1kaXNhYmxlZCddID0gdHJ1ZTtcbiAgICAgIHByZXZIYW5kbGVyID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcHJldkFycm93UHJvcHMgPSB7XG4gICAgICBrZXk6ICcwJyxcbiAgICAgICdkYXRhLXJvbGUnOiAnbm9uZScsXG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkocHJldkNsYXNzZXMpLFxuICAgICAgY3VycmVudFNsaWRlOiB0aGlzLnByb3BzLmN1cnJlbnRTbGlkZSxcbiAgICAgIHNsaWRlQ291bnQ6IHRoaXMucHJvcHMuc2xpZGVDb3VudCxcbiAgICAgIHN0eWxlOiB7IGRpc3BsYXk6ICdibG9jaycgfSxcbiAgICAgIG9uQ2xpY2s6IHByZXZIYW5kbGVyXG4gICAgfTtcbiAgICB2YXIgcHJldkFycm93O1xuXG4gICAgaWYgKHRoaXMucHJvcHMucHJldkFycm93KSB7XG4gICAgICBwcmV2QXJyb3cgPSBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KHRoaXMucHJvcHMucHJldkFycm93LCBwcmV2QXJyb3dQcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXZBcnJvdyA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnYnV0dG9uJyxcbiAgICAgICAgX2V4dGVuZHMoeyBrZXk6ICcwJywgdHlwZTogJ2J1dHRvbicgfSwgcHJldkFycm93UHJvcHMpLFxuICAgICAgICAnIFByZXZpb3VzJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJldkFycm93O1xuICB9XG59KTtcblxudmFyIE5leHRBcnJvdyA9IGV4cG9ydHMuTmV4dEFycm93ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdOZXh0QXJyb3cnLFxuXG4gIGNsaWNrSGFuZGxlcjogZnVuY3Rpb24gY2xpY2tIYW5kbGVyKG9wdGlvbnMsIGUpIHtcbiAgICBpZiAoZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICB0aGlzLnByb3BzLmNsaWNrSGFuZGxlcihvcHRpb25zLCBlKTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIG5leHRDbGFzc2VzID0geyAnc2xpY2stYXJyb3cnOiB0cnVlLCAnc2xpY2stbmV4dCc6IHRydWUgfTtcbiAgICB2YXIgbmV4dEhhbmRsZXIgPSB0aGlzLmNsaWNrSGFuZGxlci5iaW5kKHRoaXMsIHsgbWVzc2FnZTogJ25leHQnIH0pO1xuXG4gICAgaWYgKCFfaGVscGVyczIuZGVmYXVsdC5jYW5Hb05leHQodGhpcy5wcm9wcykpIHtcbiAgICAgIG5leHRDbGFzc2VzWydzbGljay1kaXNhYmxlZCddID0gdHJ1ZTtcbiAgICAgIG5leHRIYW5kbGVyID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEFycm93UHJvcHMgPSB7XG4gICAgICBrZXk6ICcxJyxcbiAgICAgICdkYXRhLXJvbGUnOiAnbm9uZScsXG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkobmV4dENsYXNzZXMpLFxuICAgICAgY3VycmVudFNsaWRlOiB0aGlzLnByb3BzLmN1cnJlbnRTbGlkZSxcbiAgICAgIHNsaWRlQ291bnQ6IHRoaXMucHJvcHMuc2xpZGVDb3VudCxcbiAgICAgIHN0eWxlOiB7IGRpc3BsYXk6ICdibG9jaycgfSxcbiAgICAgIG9uQ2xpY2s6IG5leHRIYW5kbGVyXG4gICAgfTtcblxuICAgIHZhciBuZXh0QXJyb3c7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5uZXh0QXJyb3cpIHtcbiAgICAgIG5leHRBcnJvdyA9IF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQodGhpcy5wcm9wcy5uZXh0QXJyb3csIG5leHRBcnJvd1Byb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dEFycm93ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdidXR0b24nLFxuICAgICAgICBfZXh0ZW5kcyh7IGtleTogJzEnLCB0eXBlOiAnYnV0dG9uJyB9LCBuZXh0QXJyb3dQcm9wcyksXG4gICAgICAgICcgTmV4dCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHRBcnJvdztcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LXNsaWNrL2xpYi9hcnJvd3MuanNcbi8vIG1vZHVsZSBpZCA9IDMxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLkRvdHMgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9jbGFzc25hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBnZXREb3RDb3VudCA9IGZ1bmN0aW9uIGdldERvdENvdW50KHNwZWMpIHtcbiAgdmFyIGRvdHM7XG4gIGRvdHMgPSBNYXRoLmNlaWwoc3BlYy5zbGlkZUNvdW50IC8gc3BlYy5zbGlkZXNUb1Njcm9sbCk7XG4gIHJldHVybiBkb3RzO1xufTtcblxudmFyIERvdHMgPSBleHBvcnRzLkRvdHMgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0RvdHMnLFxuXG5cbiAgY2xpY2tIYW5kbGVyOiBmdW5jdGlvbiBjbGlja0hhbmRsZXIob3B0aW9ucywgZSkge1xuICAgIC8vIEluIEF1dG9wbGF5IHRoZSBmb2N1cyBzdGF5cyBvbiBjbGlja2VkIGJ1dHRvbiBldmVuIGFmdGVyIHRyYW5zaXRpb25cbiAgICAvLyB0byBuZXh0IHNsaWRlLiBUaGF0IG9ubHkgZ29lcyBhd2F5IGJ5IGNsaWNrIHNvbWV3aGVyZSBvdXRzaWRlXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMucHJvcHMuY2xpY2tIYW5kbGVyKG9wdGlvbnMpO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGRvdENvdW50ID0gZ2V0RG90Q291bnQoe1xuICAgICAgc2xpZGVDb3VudDogdGhpcy5wcm9wcy5zbGlkZUNvdW50LFxuICAgICAgc2xpZGVzVG9TY3JvbGw6IHRoaXMucHJvcHMuc2xpZGVzVG9TY3JvbGxcbiAgICB9KTtcblxuICAgIC8vIEFwcGx5IGpvaW4gJiBzcGxpdCB0byBBcnJheSB0byBwcmUtZmlsbCBpdCBmb3IgSUU4XG4gICAgLy9cbiAgICAvLyBDcmVkaXQ6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEzNzM1NDI1LzE4NDk0NThcbiAgICB2YXIgZG90cyA9IEFycmF5LmFwcGx5KG51bGwsIEFycmF5KGRvdENvdW50ICsgMSkuam9pbignMCcpLnNwbGl0KCcnKSkubWFwKGZ1bmN0aW9uICh4LCBpKSB7XG5cbiAgICAgIHZhciBsZWZ0Qm91bmQgPSBpICogX3RoaXMucHJvcHMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICB2YXIgcmlnaHRCb3VuZCA9IGkgKiBfdGhpcy5wcm9wcy5zbGlkZXNUb1Njcm9sbCArIChfdGhpcy5wcm9wcy5zbGlkZXNUb1Njcm9sbCAtIDEpO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkoe1xuICAgICAgICAnc2xpY2stYWN0aXZlJzogX3RoaXMucHJvcHMuY3VycmVudFNsaWRlID49IGxlZnRCb3VuZCAmJiBfdGhpcy5wcm9wcy5jdXJyZW50U2xpZGUgPD0gcmlnaHRCb3VuZFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBkb3RPcHRpb25zID0ge1xuICAgICAgICBtZXNzYWdlOiAnZG90cycsXG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgICBzbGlkZXNUb1Njcm9sbDogX3RoaXMucHJvcHMuc2xpZGVzVG9TY3JvbGwsXG4gICAgICAgIGN1cnJlbnRTbGlkZTogX3RoaXMucHJvcHMuY3VycmVudFNsaWRlXG4gICAgICB9O1xuXG4gICAgICB2YXIgb25DbGljayA9IF90aGlzLmNsaWNrSGFuZGxlci5iaW5kKF90aGlzLCBkb3RPcHRpb25zKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnbGknLFxuICAgICAgICB7IGtleTogaSwgY2xhc3NOYW1lOiBjbGFzc05hbWUgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChfdGhpcy5wcm9wcy5jdXN0b21QYWdpbmcoaSksIHsgb25DbGljazogb25DbGljayB9KVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICd1bCcsXG4gICAgICB7IGNsYXNzTmFtZTogdGhpcy5wcm9wcy5kb3RzQ2xhc3MsIHN0eWxlOiB7IGRpc3BsYXk6ICdibG9jaycgfSB9LFxuICAgICAgZG90c1xuICAgICk7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1zbGljay9saWIvZG90cy5qc1xuLy8gbW9kdWxlIGlkID0gMzEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMSIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NsaWRlcicpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1zbGljay9saWIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDMxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGluaXRpYWxTdGF0ZSA9IHtcbiAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICBhdXRvUGxheVRpbWVyOiBudWxsLFxuICAgIGN1cnJlbnREaXJlY3Rpb246IDAsXG4gICAgY3VycmVudExlZnQ6IG51bGwsXG4gICAgY3VycmVudFNsaWRlOiAwLFxuICAgIGRpcmVjdGlvbjogMSxcbiAgICBsaXN0V2lkdGg6IG51bGwsXG4gICAgbGlzdEhlaWdodDogbnVsbCxcbiAgICAvLyBsb2FkSW5kZXg6IDAsXG4gICAgc2xpZGVDb3VudDogbnVsbCxcbiAgICBzbGlkZVdpZHRoOiBudWxsLFxuICAgIHNsaWRlSGVpZ2h0OiBudWxsLFxuICAgIC8vIHNsaWRpbmc6IGZhbHNlLFxuICAgIC8vIHNsaWRlT2Zmc2V0OiAwLFxuICAgIHN3aXBlTGVmdDogbnVsbCxcbiAgICB0b3VjaE9iamVjdDoge1xuICAgICAgICBzdGFydFg6IDAsXG4gICAgICAgIHN0YXJ0WTogMCxcbiAgICAgICAgY3VyWDogMCxcbiAgICAgICAgY3VyWTogMFxuICAgIH0sXG5cbiAgICBsYXp5TG9hZGVkTGlzdDogW10sXG5cbiAgICAvLyBhZGRlZCBmb3IgcmVhY3RcbiAgICBpbml0aWFsaXplZDogZmFsc2UsXG4gICAgZWRnZURyYWdnZWQ6IGZhbHNlLFxuICAgIHN3aXBlZDogZmFsc2UsIC8vIHVzZWQgYnkgc3dpcGVFdmVudC4gZGlmZmVyZW50aXRlcyBiZXR3ZWVuIHRvdWNoIGFuZCBzd2lwZS5cbiAgICB0cmFja1N0eWxlOiB7fSxcbiAgICB0cmFja1dpZHRoOiAwXG5cbiAgICAvLyBSZW1vdmVkXG4gICAgLy8gdHJhbnNmb3Jtc0VuYWJsZWQ6IGZhbHNlLFxuICAgIC8vICRuZXh0QXJyb3c6IG51bGwsXG4gICAgLy8gJHByZXZBcnJvdzogbnVsbCxcbiAgICAvLyAkZG90czogbnVsbCxcbiAgICAvLyAkbGlzdDogbnVsbCxcbiAgICAvLyAkc2xpZGVUcmFjazogbnVsbCxcbiAgICAvLyAkc2xpZGVzOiBudWxsLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbml0aWFsU3RhdGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LXNsaWNrL2xpYi9pbml0aWFsLXN0YXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAzMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5Jbm5lclNsaWRlciA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2V2ZW50SGFuZGxlcnMgPSByZXF1aXJlKCcuL21peGlucy9ldmVudC1oYW5kbGVycycpO1xuXG52YXIgX2V2ZW50SGFuZGxlcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXZlbnRIYW5kbGVycyk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoJy4vbWl4aW5zL2hlbHBlcnMnKTtcblxudmFyIF9oZWxwZXJzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnMpO1xuXG52YXIgX2luaXRpYWxTdGF0ZSA9IHJlcXVpcmUoJy4vaW5pdGlhbC1zdGF0ZScpO1xuXG52YXIgX2luaXRpYWxTdGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbml0aWFsU3RhdGUpO1xuXG52YXIgX2RlZmF1bHRQcm9wcyA9IHJlcXVpcmUoJy4vZGVmYXVsdC1wcm9wcycpO1xuXG52YXIgX2RlZmF1bHRQcm9wczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZhdWx0UHJvcHMpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJyk7XG5cbnZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblxudmFyIF9vYmplY3RBc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBfb2JqZWN0QXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdEFzc2lnbik7XG5cbnZhciBfdHJhY2sgPSByZXF1aXJlKCcuL3RyYWNrJyk7XG5cbnZhciBfZG90cyA9IHJlcXVpcmUoJy4vZG90cycpO1xuXG52YXIgX2Fycm93cyA9IHJlcXVpcmUoJy4vYXJyb3dzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBJbm5lclNsaWRlciA9IGV4cG9ydHMuSW5uZXJTbGlkZXIgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0lubmVyU2xpZGVyJyxcblxuICBtaXhpbnM6IFtfaGVscGVyczIuZGVmYXVsdCwgX2V2ZW50SGFuZGxlcnMyLmRlZmF1bHRdLFxuICBsaXN0OiBudWxsLFxuICB0cmFjazogbnVsbCxcbiAgbGlzdFJlZkhhbmRsZXI6IGZ1bmN0aW9uIGxpc3RSZWZIYW5kbGVyKHJlZikge1xuICAgIHRoaXMubGlzdCA9IHJlZjtcbiAgfSxcbiAgdHJhY2tSZWZIYW5kbGVyOiBmdW5jdGlvbiB0cmFja1JlZkhhbmRsZXIocmVmKSB7XG4gICAgdGhpcy50cmFjayA9IHJlZjtcbiAgfSxcbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBfaW5pdGlhbFN0YXRlMi5kZWZhdWx0LCB7XG4gICAgICBjdXJyZW50U2xpZGU6IHRoaXMucHJvcHMuaW5pdGlhbFNsaWRlXG4gICAgfSk7XG4gIH0sXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiBfZGVmYXVsdFByb3BzMi5kZWZhdWx0O1xuICB9LFxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5pbml0KSB7XG4gICAgICB0aGlzLnByb3BzLmluaXQoKTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBtb3VudGVkOiB0cnVlXG4gICAgfSk7XG4gICAgdmFyIGxhenlMb2FkZWRMaXN0ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4uY291bnQodGhpcy5wcm9wcy5jaGlsZHJlbik7IGkrKykge1xuICAgICAgaWYgKGkgPj0gdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUgJiYgaSA8IHRoaXMuc3RhdGUuY3VycmVudFNsaWRlICsgdGhpcy5wcm9wcy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgbGF6eUxvYWRlZExpc3QucHVzaChpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5sYXp5TG9hZCAmJiB0aGlzLnN0YXRlLmxhenlMb2FkZWRMaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxhenlMb2FkZWRMaXN0OiBsYXp5TG9hZGVkTGlzdFxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gSGFjayBmb3IgYXV0b3BsYXkgLS0gSW5zcGVjdCBMYXRlclxuICAgIHRoaXMuaW5pdGlhbGl6ZSh0aGlzLnByb3BzKTtcbiAgICB0aGlzLmFkYXB0SGVpZ2h0KCk7XG5cbiAgICAvLyBUbyBzdXBwb3J0IHNlcnZlci1zaWRlIHJlbmRlcmluZ1xuICAgIGlmICghd2luZG93KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LmF0dGFjaEV2ZW50KCdvbnJlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemVkKTtcbiAgICB9XG4gIH0sXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5hbmltYXRpb25FbmRDYWxsYmFjaykge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuYW5pbWF0aW9uRW5kQ2FsbGJhY2spO1xuICAgIH1cbiAgICBpZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uV2luZG93UmVzaXplZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5kZXRhY2hFdmVudCgnb25yZXNpemUnLCB0aGlzLm9uV2luZG93UmVzaXplZCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLmF1dG9QbGF5VGltZXIpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5zdGF0ZS5hdXRvUGxheVRpbWVyKTtcbiAgICB9XG4gIH0sXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2xpY2tHb1RvICE9IG5leHRQcm9wcy5zbGlja0dvVG8pIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbnNvbGUud2FybigncmVhY3Qtc2xpY2sgZGVwcmVjYXRpb24gd2FybmluZzogc2xpY2tHb1RvIHByb3AgaXMgZGVwcmVjYXRlZCBhbmQgaXQgd2lsbCBiZSByZW1vdmVkIGluIG5leHQgcmVsZWFzZS4gVXNlIHNsaWNrR29UbyBtZXRob2QgaW5zdGVhZCcpO1xuICAgICAgfVxuICAgICAgdGhpcy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXG4gICAgICAgIGluZGV4OiBuZXh0UHJvcHMuc2xpY2tHb1RvLFxuICAgICAgICBjdXJyZW50U2xpZGU6IHRoaXMuc3RhdGUuY3VycmVudFNsaWRlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuY3VycmVudFNsaWRlID49IG5leHRQcm9wcy5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHRoaXMudXBkYXRlKG5leHRQcm9wcyk7XG4gICAgICB0aGlzLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgbWVzc2FnZTogJ2luZGV4JyxcbiAgICAgICAgaW5kZXg6IG5leHRQcm9wcy5jaGlsZHJlbi5sZW5ndGggLSBuZXh0UHJvcHMuc2xpZGVzVG9TaG93LFxuICAgICAgICBjdXJyZW50U2xpZGU6IHRoaXMuc3RhdGUuY3VycmVudFNsaWRlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cGRhdGUobmV4dFByb3BzKTtcbiAgICB9XG4gIH0sXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMuYWRhcHRIZWlnaHQoKTtcbiAgfSxcbiAgb25XaW5kb3dSZXNpemVkOiBmdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZWQoKSB7XG4gICAgdGhpcy51cGRhdGUodGhpcy5wcm9wcyk7XG4gICAgLy8gYW5pbWF0aW5nIHN0YXRlIHNob3VsZCBiZSBjbGVhcmVkIHdoaWxlIHJlc2l6aW5nLCBvdGhlcndpc2UgYXV0b3BsYXkgc3RvcHMgd29ya2luZ1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgYW5pbWF0aW5nOiBmYWxzZVxuICAgIH0pO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmFuaW1hdGlvbkVuZENhbGxiYWNrKTtcbiAgICBkZWxldGUgdGhpcy5hbmltYXRpb25FbmRDYWxsYmFjaztcbiAgfSxcbiAgc2xpY2tQcmV2OiBmdW5jdGlvbiBzbGlja1ByZXYoKSB7XG4gICAgdGhpcy5jaGFuZ2VTbGlkZSh7IG1lc3NhZ2U6ICdwcmV2aW91cycgfSk7XG4gIH0sXG4gIHNsaWNrTmV4dDogZnVuY3Rpb24gc2xpY2tOZXh0KCkge1xuICAgIHRoaXMuY2hhbmdlU2xpZGUoeyBtZXNzYWdlOiAnbmV4dCcgfSk7XG4gIH0sXG4gIHNsaWNrR29UbzogZnVuY3Rpb24gc2xpY2tHb1RvKHNsaWRlKSB7XG4gICAgdHlwZW9mIHNsaWRlID09PSAnbnVtYmVyJyAmJiB0aGlzLmNoYW5nZVNsaWRlKHtcbiAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXG4gICAgICBpbmRleDogc2xpZGUsXG4gICAgICBjdXJyZW50U2xpZGU6IHRoaXMuc3RhdGUuY3VycmVudFNsaWRlXG4gICAgfSk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMyLmRlZmF1bHQpKCdzbGljay1pbml0aWFsaXplZCcsICdzbGljay1zbGlkZXInLCB0aGlzLnByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgJ3NsaWNrLXZlcnRpY2FsJzogdGhpcy5wcm9wcy52ZXJ0aWNhbFxuICAgIH0pO1xuXG4gICAgdmFyIHRyYWNrUHJvcHMgPSB7XG4gICAgICBmYWRlOiB0aGlzLnByb3BzLmZhZGUsXG4gICAgICBjc3NFYXNlOiB0aGlzLnByb3BzLmNzc0Vhc2UsXG4gICAgICBzcGVlZDogdGhpcy5wcm9wcy5zcGVlZCxcbiAgICAgIGluZmluaXRlOiB0aGlzLnByb3BzLmluZmluaXRlLFxuICAgICAgY2VudGVyTW9kZTogdGhpcy5wcm9wcy5jZW50ZXJNb2RlLFxuICAgICAgZm9jdXNPblNlbGVjdDogdGhpcy5wcm9wcy5mb2N1c09uU2VsZWN0ID8gdGhpcy5zZWxlY3RIYW5kbGVyIDogbnVsbCxcbiAgICAgIGN1cnJlbnRTbGlkZTogdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUsXG4gICAgICBsYXp5TG9hZDogdGhpcy5wcm9wcy5sYXp5TG9hZCxcbiAgICAgIGxhenlMb2FkZWRMaXN0OiB0aGlzLnN0YXRlLmxhenlMb2FkZWRMaXN0LFxuICAgICAgcnRsOiB0aGlzLnByb3BzLnJ0bCxcbiAgICAgIHNsaWRlV2lkdGg6IHRoaXMuc3RhdGUuc2xpZGVXaWR0aCxcbiAgICAgIHNsaWRlc1RvU2hvdzogdGhpcy5wcm9wcy5zbGlkZXNUb1Nob3csXG4gICAgICBzbGlkZXNUb1Njcm9sbDogdGhpcy5wcm9wcy5zbGlkZXNUb1Njcm9sbCxcbiAgICAgIHNsaWRlQ291bnQ6IHRoaXMuc3RhdGUuc2xpZGVDb3VudCxcbiAgICAgIHRyYWNrU3R5bGU6IHRoaXMuc3RhdGUudHJhY2tTdHlsZSxcbiAgICAgIHZhcmlhYmxlV2lkdGg6IHRoaXMucHJvcHMudmFyaWFibGVXaWR0aFxuICAgIH07XG5cbiAgICB2YXIgZG90cztcblxuICAgIGlmICh0aGlzLnByb3BzLmRvdHMgPT09IHRydWUgJiYgdGhpcy5zdGF0ZS5zbGlkZUNvdW50ID49IHRoaXMucHJvcHMuc2xpZGVzVG9TaG93KSB7XG4gICAgICB2YXIgZG90UHJvcHMgPSB7XG4gICAgICAgIGRvdHNDbGFzczogdGhpcy5wcm9wcy5kb3RzQ2xhc3MsXG4gICAgICAgIHNsaWRlQ291bnQ6IHRoaXMuc3RhdGUuc2xpZGVDb3VudCxcbiAgICAgICAgc2xpZGVzVG9TaG93OiB0aGlzLnByb3BzLnNsaWRlc1RvU2hvdyxcbiAgICAgICAgY3VycmVudFNsaWRlOiB0aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSxcbiAgICAgICAgc2xpZGVzVG9TY3JvbGw6IHRoaXMucHJvcHMuc2xpZGVzVG9TY3JvbGwsXG4gICAgICAgIGNsaWNrSGFuZGxlcjogdGhpcy5jaGFuZ2VTbGlkZSxcbiAgICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGN1c3RvbVBhZ2luZzogdGhpcy5wcm9wcy5jdXN0b21QYWdpbmdcbiAgICAgIH07XG5cbiAgICAgIGRvdHMgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZG90cy5Eb3RzLCBkb3RQcm9wcyk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZBcnJvdywgbmV4dEFycm93O1xuXG4gICAgdmFyIGFycm93UHJvcHMgPSB7XG4gICAgICBpbmZpbml0ZTogdGhpcy5wcm9wcy5pbmZpbml0ZSxcbiAgICAgIGNlbnRlck1vZGU6IHRoaXMucHJvcHMuY2VudGVyTW9kZSxcbiAgICAgIGN1cnJlbnRTbGlkZTogdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUsXG4gICAgICBzbGlkZUNvdW50OiB0aGlzLnN0YXRlLnNsaWRlQ291bnQsXG4gICAgICBzbGlkZXNUb1Nob3c6IHRoaXMucHJvcHMuc2xpZGVzVG9TaG93LFxuICAgICAgcHJldkFycm93OiB0aGlzLnByb3BzLnByZXZBcnJvdyxcbiAgICAgIG5leHRBcnJvdzogdGhpcy5wcm9wcy5uZXh0QXJyb3csXG4gICAgICBjbGlja0hhbmRsZXI6IHRoaXMuY2hhbmdlU2xpZGVcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMucHJvcHMuYXJyb3dzKSB7XG4gICAgICBwcmV2QXJyb3cgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfYXJyb3dzLlByZXZBcnJvdywgYXJyb3dQcm9wcyk7XG4gICAgICBuZXh0QXJyb3cgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfYXJyb3dzLk5leHRBcnJvdywgYXJyb3dQcm9wcyk7XG4gICAgfVxuXG4gICAgdmFyIHZlcnRpY2FsSGVpZ2h0U3R5bGUgPSBudWxsO1xuXG4gICAgaWYgKHRoaXMucHJvcHMudmVydGljYWwpIHtcbiAgICAgIHZlcnRpY2FsSGVpZ2h0U3R5bGUgPSB7XG4gICAgICAgIGhlaWdodDogdGhpcy5zdGF0ZS5saXN0SGVpZ2h0XG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBjZW50ZXJQYWRkaW5nU3R5bGUgPSBudWxsO1xuXG4gICAgaWYgKHRoaXMucHJvcHMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgIGNlbnRlclBhZGRpbmdTdHlsZSA9IHtcbiAgICAgICAgICBwYWRkaW5nOiAnMHB4ICcgKyB0aGlzLnByb3BzLmNlbnRlclBhZGRpbmdcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMucHJvcHMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICBjZW50ZXJQYWRkaW5nU3R5bGUgPSB7XG4gICAgICAgICAgcGFkZGluZzogdGhpcy5wcm9wcy5jZW50ZXJQYWRkaW5nICsgJyAwcHgnXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxpc3RTdHlsZSA9ICgwLCBfb2JqZWN0QXNzaWduMi5kZWZhdWx0KSh7fSwgdmVydGljYWxIZWlnaHRTdHlsZSwgY2VudGVyUGFkZGluZ1N0eWxlKTtcblxuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLm9uSW5uZXJTbGlkZXJFbnRlcixcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLm9uSW5uZXJTbGlkZXJMZWF2ZSxcbiAgICAgICAgb25Nb3VzZU92ZXI6IHRoaXMub25Jbm5lclNsaWRlck92ZXJcbiAgICAgIH0sXG4gICAgICBwcmV2QXJyb3csXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICByZWY6IHRoaXMubGlzdFJlZkhhbmRsZXIsXG4gICAgICAgICAgY2xhc3NOYW1lOiAnc2xpY2stbGlzdCcsXG4gICAgICAgICAgc3R5bGU6IGxpc3RTdHlsZSxcbiAgICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5zd2lwZVN0YXJ0LFxuICAgICAgICAgIG9uTW91c2VNb3ZlOiB0aGlzLnN0YXRlLmRyYWdnaW5nID8gdGhpcy5zd2lwZU1vdmUgOiBudWxsLFxuICAgICAgICAgIG9uTW91c2VVcDogdGhpcy5zd2lwZUVuZCxcbiAgICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuc3RhdGUuZHJhZ2dpbmcgPyB0aGlzLnN3aXBlRW5kIDogbnVsbCxcbiAgICAgICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuc3dpcGVTdGFydCxcbiAgICAgICAgICBvblRvdWNoTW92ZTogdGhpcy5zdGF0ZS5kcmFnZ2luZyA/IHRoaXMuc3dpcGVNb3ZlIDogbnVsbCxcbiAgICAgICAgICBvblRvdWNoRW5kOiB0aGlzLnN3aXBlRW5kLFxuICAgICAgICAgIG9uVG91Y2hDYW5jZWw6IHRoaXMuc3RhdGUuZHJhZ2dpbmcgPyB0aGlzLnN3aXBlRW5kIDogbnVsbCxcbiAgICAgICAgICBvbktleURvd246IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eSA/IHRoaXMua2V5SGFuZGxlciA6IG51bGwgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgX3RyYWNrLlRyYWNrLFxuICAgICAgICAgIF9leHRlbmRzKHsgcmVmOiB0aGlzLnRyYWNrUmVmSGFuZGxlciB9LCB0cmFja1Byb3BzKSxcbiAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgICAgIClcbiAgICAgICksXG4gICAgICBuZXh0QXJyb3csXG4gICAgICBkb3RzXG4gICAgKTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LXNsaWNrL2xpYi9pbm5lci1zbGlkZXIuanNcbi8vIG1vZHVsZSBpZCA9IDMxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHJhY2tIZWxwZXIgPSByZXF1aXJlKCcuL3RyYWNrSGVscGVyJyk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuXG52YXIgX2hlbHBlcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVycyk7XG5cbnZhciBfb2JqZWN0QXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgX29iamVjdEFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RBc3NpZ24pO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgRXZlbnRIYW5kbGVycyA9IHtcbiAgLy8gRXZlbnQgaGFuZGxlciBmb3IgcHJldmlvdXMgYW5kIG5leHRcbiAgY2hhbmdlU2xpZGU6IGZ1bmN0aW9uIGNoYW5nZVNsaWRlKG9wdGlvbnMpIHtcbiAgICB2YXIgaW5kZXhPZmZzZXQsIHByZXZpb3VzSW50LCBzbGlkZU9mZnNldCwgdW5ldmVuT2Zmc2V0LCB0YXJnZXRTbGlkZTtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgc2xpZGVzVG9TY3JvbGwgPSBfcHJvcHMuc2xpZGVzVG9TY3JvbGw7XG4gICAgdmFyIHNsaWRlc1RvU2hvdyA9IF9wcm9wcy5zbGlkZXNUb1Nob3c7XG4gICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgdmFyIHNsaWRlQ291bnQgPSBfc3RhdGUuc2xpZGVDb3VudDtcbiAgICB2YXIgY3VycmVudFNsaWRlID0gX3N0YXRlLmN1cnJlbnRTbGlkZTtcblxuICAgIHVuZXZlbk9mZnNldCA9IHNsaWRlQ291bnQgJSBzbGlkZXNUb1Njcm9sbCAhPT0gMDtcbiAgICBpbmRleE9mZnNldCA9IHVuZXZlbk9mZnNldCA/IDAgOiAoc2xpZGVDb3VudCAtIGN1cnJlbnRTbGlkZSkgJSBzbGlkZXNUb1Njcm9sbDtcblxuICAgIGlmIChvcHRpb25zLm1lc3NhZ2UgPT09ICdwcmV2aW91cycpIHtcbiAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBzbGlkZXNUb1Njcm9sbCA6IHNsaWRlc1RvU2hvdyAtIGluZGV4T2Zmc2V0O1xuICAgICAgdGFyZ2V0U2xpZGUgPSBjdXJyZW50U2xpZGUgLSBzbGlkZU9mZnNldDtcbiAgICAgIGlmICh0aGlzLnByb3BzLmxhenlMb2FkKSB7XG4gICAgICAgIHByZXZpb3VzSW50ID0gY3VycmVudFNsaWRlIC0gc2xpZGVPZmZzZXQ7XG4gICAgICAgIHRhcmdldFNsaWRlID0gcHJldmlvdXNJbnQgPT09IC0xID8gc2xpZGVDb3VudCAtIDEgOiBwcmV2aW91c0ludDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMubWVzc2FnZSA9PT0gJ25leHQnKSB7XG4gICAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gc2xpZGVzVG9TY3JvbGwgOiBpbmRleE9mZnNldDtcbiAgICAgIHRhcmdldFNsaWRlID0gY3VycmVudFNsaWRlICsgc2xpZGVPZmZzZXQ7XG4gICAgICBpZiAodGhpcy5wcm9wcy5sYXp5TG9hZCkge1xuICAgICAgICB0YXJnZXRTbGlkZSA9IChjdXJyZW50U2xpZGUgKyBzbGlkZXNUb1Njcm9sbCkgJSBzbGlkZUNvdW50ICsgaW5kZXhPZmZzZXQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLm1lc3NhZ2UgPT09ICdkb3RzJyB8fCBvcHRpb25zLm1lc3NhZ2UgPT09ICdjaGlsZHJlbicpIHtcbiAgICAgIC8vIENsaWNrIG9uIGRvdHNcbiAgICAgIHRhcmdldFNsaWRlID0gb3B0aW9ucy5pbmRleCAqIG9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICBpZiAodGFyZ2V0U2xpZGUgPT09IG9wdGlvbnMuY3VycmVudFNsaWRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMubWVzc2FnZSA9PT0gJ2luZGV4Jykge1xuICAgICAgdGFyZ2V0U2xpZGUgPSBwYXJzZUludChvcHRpb25zLmluZGV4KTtcbiAgICAgIGlmICh0YXJnZXRTbGlkZSA9PT0gb3B0aW9ucy5jdXJyZW50U2xpZGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2xpZGVIYW5kbGVyKHRhcmdldFNsaWRlKTtcbiAgfSxcblxuICAvLyBBY2Nlc3NpYmxpdHkgaGFuZGxlciBmb3IgcHJldmlvdXMgYW5kIG5leHRcbiAga2V5SGFuZGxlcjogZnVuY3Rpb24ga2V5SGFuZGxlcihlKSB7XG4gICAgLy9Eb250IHNsaWRlIGlmIHRoZSBjdXJzb3IgaXMgaW5zaWRlIHRoZSBmb3JtIGZpZWxkcyBhbmQgYXJyb3cga2V5cyBhcmUgcHJlc3NlZFxuICAgIGlmICghZS50YXJnZXQudGFnTmFtZS5tYXRjaCgnVEVYVEFSRUF8SU5QVVR8U0VMRUNUJykpIHtcbiAgICAgIGlmIChlLmtleUNvZGUgPT09IDM3ICYmIHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICBtZXNzYWdlOiB0aGlzLnByb3BzLnJ0bCA9PT0gdHJ1ZSA/ICduZXh0JyA6ICdwcmV2aW91cydcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMzkgJiYgdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlU2xpZGUoe1xuICAgICAgICAgIG1lc3NhZ2U6IHRoaXMucHJvcHMucnRsID09PSB0cnVlID8gJ3ByZXZpb3VzJyA6ICduZXh0J1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIC8vIEZvY3VzIG9uIHNlbGVjdGluZyBhIHNsaWRlIChjbGljayBoYW5kbGVyIG9uIHRyYWNrKVxuICBzZWxlY3RIYW5kbGVyOiBmdW5jdGlvbiBzZWxlY3RIYW5kbGVyKG9wdGlvbnMpIHtcbiAgICB0aGlzLmNoYW5nZVNsaWRlKG9wdGlvbnMpO1xuICB9LFxuICBzd2lwZVN0YXJ0OiBmdW5jdGlvbiBzd2lwZVN0YXJ0KGUpIHtcbiAgICB2YXIgdG91Y2hlcywgcG9zWCwgcG9zWTtcblxuICAgIGlmICh0aGlzLnByb3BzLnN3aXBlID09PSBmYWxzZSB8fCAnb250b3VjaGVuZCcgaW4gZG9jdW1lbnQgJiYgdGhpcy5wcm9wcy5zd2lwZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuZHJhZ2dhYmxlID09PSBmYWxzZSAmJiBlLnR5cGUuaW5kZXhPZignbW91c2UnKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcG9zWCA9IGUudG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gZS50b3VjaGVzWzBdLnBhZ2VYIDogZS5jbGllbnRYO1xuICAgIHBvc1kgPSBlLnRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IGUudG91Y2hlc1swXS5wYWdlWSA6IGUuY2xpZW50WTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRyYWdnaW5nOiB0cnVlLFxuICAgICAgdG91Y2hPYmplY3Q6IHtcbiAgICAgICAgc3RhcnRYOiBwb3NYLFxuICAgICAgICBzdGFydFk6IHBvc1ksXG4gICAgICAgIGN1clg6IHBvc1gsXG4gICAgICAgIGN1clk6IHBvc1lcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgc3dpcGVNb3ZlOiBmdW5jdGlvbiBzd2lwZU1vdmUoZSkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5kcmFnZ2luZykge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS5hbmltYXRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMudmVydGljYWwgJiYgdGhpcy5wcm9wcy5zd2lwZVRvU2xpZGUgJiYgdGhpcy5wcm9wcy52ZXJ0aWNhbFN3aXBpbmcpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgdmFyIHN3aXBlTGVmdDtcbiAgICB2YXIgY3VyTGVmdCwgcG9zaXRpb25PZmZzZXQ7XG4gICAgdmFyIHRvdWNoT2JqZWN0ID0gdGhpcy5zdGF0ZS50b3VjaE9iamVjdDtcblxuICAgIGN1ckxlZnQgPSAoMCwgX3RyYWNrSGVscGVyLmdldFRyYWNrTGVmdCkoKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHtcbiAgICAgIHNsaWRlSW5kZXg6IHRoaXMuc3RhdGUuY3VycmVudFNsaWRlLFxuICAgICAgdHJhY2tSZWY6IHRoaXMudHJhY2tcbiAgICB9LCB0aGlzLnByb3BzLCB0aGlzLnN0YXRlKSk7XG4gICAgdG91Y2hPYmplY3QuY3VyWCA9IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXS5wYWdlWCA6IGUuY2xpZW50WDtcbiAgICB0b3VjaE9iamVjdC5jdXJZID0gZS50b3VjaGVzID8gZS50b3VjaGVzWzBdLnBhZ2VZIDogZS5jbGllbnRZO1xuICAgIHRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoTWF0aC5wb3codG91Y2hPYmplY3QuY3VyWCAtIHRvdWNoT2JqZWN0LnN0YXJ0WCwgMikpKTtcblxuICAgIGlmICh0aGlzLnByb3BzLnZlcnRpY2FsU3dpcGluZykge1xuICAgICAgdG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSBNYXRoLnJvdW5kKE1hdGguc3FydChNYXRoLnBvdyh0b3VjaE9iamVjdC5jdXJZIC0gdG91Y2hPYmplY3Quc3RhcnRZLCAyKSkpO1xuICAgIH1cblxuICAgIHBvc2l0aW9uT2Zmc2V0ID0gKHRoaXMucHJvcHMucnRsID09PSBmYWxzZSA/IDEgOiAtMSkgKiAodG91Y2hPYmplY3QuY3VyWCA+IHRvdWNoT2JqZWN0LnN0YXJ0WCA/IDEgOiAtMSk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy52ZXJ0aWNhbFN3aXBpbmcpIHtcbiAgICAgIHBvc2l0aW9uT2Zmc2V0ID0gdG91Y2hPYmplY3QuY3VyWSA+IHRvdWNoT2JqZWN0LnN0YXJ0WSA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudFNsaWRlID0gdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGU7XG4gICAgdmFyIGRvdENvdW50ID0gTWF0aC5jZWlsKHRoaXMuc3RhdGUuc2xpZGVDb3VudCAvIHRoaXMucHJvcHMuc2xpZGVzVG9TY3JvbGwpO1xuICAgIHZhciBzd2lwZURpcmVjdGlvbiA9IHRoaXMuc3dpcGVEaXJlY3Rpb24odGhpcy5zdGF0ZS50b3VjaE9iamVjdCk7XG4gICAgdmFyIHRvdWNoU3dpcGVMZW5ndGggPSB0b3VjaE9iamVjdC5zd2lwZUxlbmd0aDtcblxuICAgIGlmICh0aGlzLnByb3BzLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgaWYgKGN1cnJlbnRTbGlkZSA9PT0gMCAmJiBzd2lwZURpcmVjdGlvbiA9PT0gJ3JpZ2h0JyB8fCBjdXJyZW50U2xpZGUgKyAxID49IGRvdENvdW50ICYmIHN3aXBlRGlyZWN0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgdG91Y2hTd2lwZUxlbmd0aCA9IHRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoICogdGhpcy5wcm9wcy5lZGdlRnJpY3Rpb247XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZWRnZURyYWdnZWQgPT09IGZhbHNlICYmIHRoaXMucHJvcHMuZWRnZUV2ZW50KSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5lZGdlRXZlbnQoc3dpcGVEaXJlY3Rpb24pO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZGdlRHJhZ2dlZDogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnN0YXRlLnN3aXBlZCA9PT0gZmFsc2UgJiYgdGhpcy5wcm9wcy5zd2lwZUV2ZW50KSB7XG4gICAgICB0aGlzLnByb3BzLnN3aXBlRXZlbnQoc3dpcGVEaXJlY3Rpb24pO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHN3aXBlZDogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucHJvcHMudmVydGljYWwpIHtcbiAgICAgIHN3aXBlTGVmdCA9IGN1ckxlZnQgKyB0b3VjaFN3aXBlTGVuZ3RoICogcG9zaXRpb25PZmZzZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlTGVmdCA9IGN1ckxlZnQgKyB0b3VjaFN3aXBlTGVuZ3RoICogKHRoaXMuc3RhdGUubGlzdEhlaWdodCAvIHRoaXMuc3RhdGUubGlzdFdpZHRoKSAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnZlcnRpY2FsU3dpcGluZykge1xuICAgICAgc3dpcGVMZWZ0ID0gY3VyTGVmdCArIHRvdWNoU3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHRvdWNoT2JqZWN0OiB0b3VjaE9iamVjdCxcbiAgICAgIHN3aXBlTGVmdDogc3dpcGVMZWZ0LFxuICAgICAgdHJhY2tTdHlsZTogKDAsIF90cmFja0hlbHBlci5nZXRUcmFja0NTUykoKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHsgbGVmdDogc3dpcGVMZWZ0IH0sIHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpKVxuICAgIH0pO1xuXG4gICAgaWYgKE1hdGguYWJzKHRvdWNoT2JqZWN0LmN1clggLSB0b3VjaE9iamVjdC5zdGFydFgpIDwgTWF0aC5hYnModG91Y2hPYmplY3QuY3VyWSAtIHRvdWNoT2JqZWN0LnN0YXJ0WSkgKiAwLjgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gNCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSxcbiAgZ2V0TmF2aWdhYmxlSW5kZXhlczogZnVuY3Rpb24gZ2V0TmF2aWdhYmxlSW5kZXhlcygpIHtcbiAgICB2YXIgbWF4ID0gdm9pZCAwO1xuICAgIHZhciBicmVha1BvaW50ID0gMDtcbiAgICB2YXIgY291bnRlciA9IDA7XG4gICAgdmFyIGluZGV4ZXMgPSBbXTtcblxuICAgIGlmICghdGhpcy5wcm9wcy5pbmZpbml0ZSkge1xuICAgICAgbWF4ID0gdGhpcy5zdGF0ZS5zbGlkZUNvdW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVha1BvaW50ID0gdGhpcy5wcm9wcy5zbGlkZXNUb1Nob3cgKiAtMTtcbiAgICAgIGNvdW50ZXIgPSB0aGlzLnByb3BzLnNsaWRlc1RvU2hvdyAqIC0xO1xuICAgICAgbWF4ID0gdGhpcy5zdGF0ZS5zbGlkZUNvdW50ICogMjtcbiAgICB9XG5cbiAgICB3aGlsZSAoYnJlYWtQb2ludCA8IG1heCkge1xuICAgICAgaW5kZXhlcy5wdXNoKGJyZWFrUG9pbnQpO1xuICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyB0aGlzLnByb3BzLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICBjb3VudGVyICs9IHRoaXMucHJvcHMuc2xpZGVzVG9TY3JvbGwgPD0gdGhpcy5wcm9wcy5zbGlkZXNUb1Nob3cgPyB0aGlzLnByb3BzLnNsaWRlc1RvU2Nyb2xsIDogdGhpcy5wcm9wcy5zbGlkZXNUb1Nob3c7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZGV4ZXM7XG4gIH0sXG4gIGNoZWNrTmF2aWdhYmxlOiBmdW5jdGlvbiBjaGVja05hdmlnYWJsZShpbmRleCkge1xuICAgIHZhciBuYXZpZ2FibGVzID0gdGhpcy5nZXROYXZpZ2FibGVJbmRleGVzKCk7XG4gICAgdmFyIHByZXZOYXZpZ2FibGUgPSAwO1xuXG4gICAgaWYgKGluZGV4ID4gbmF2aWdhYmxlc1tuYXZpZ2FibGVzLmxlbmd0aCAtIDFdKSB7XG4gICAgICBpbmRleCA9IG5hdmlnYWJsZXNbbmF2aWdhYmxlcy5sZW5ndGggLSAxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgbiBpbiBuYXZpZ2FibGVzKSB7XG4gICAgICAgIGlmIChpbmRleCA8IG5hdmlnYWJsZXNbbl0pIHtcbiAgICAgICAgICBpbmRleCA9IHByZXZOYXZpZ2FibGU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2TmF2aWdhYmxlID0gbmF2aWdhYmxlc1tuXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaW5kZXg7XG4gIH0sXG4gIGdldFNsaWRlQ291bnQ6IGZ1bmN0aW9uIGdldFNsaWRlQ291bnQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBjZW50ZXJPZmZzZXQgPSB0aGlzLnByb3BzLmNlbnRlck1vZGUgPyB0aGlzLnN0YXRlLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKHRoaXMucHJvcHMuc2xpZGVzVG9TaG93IC8gMikgOiAwO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuc3dpcGVUb1NsaWRlKSB7XG4gICAgICB2YXIgc3dpcGVkU2xpZGUgPSB2b2lkIDA7XG5cbiAgICAgIHZhciBzbGlja0xpc3QgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcy5saXN0KTtcblxuICAgICAgdmFyIHNsaWRlcyA9IHNsaWNrTGlzdC5xdWVyeVNlbGVjdG9yQWxsKCcuc2xpY2stc2xpZGUnKTtcblxuICAgICAgQXJyYXkuZnJvbShzbGlkZXMpLmV2ZXJ5KGZ1bmN0aW9uIChzbGlkZSkge1xuICAgICAgICBpZiAoIV90aGlzLnByb3BzLnZlcnRpY2FsKSB7XG4gICAgICAgICAgaWYgKHNsaWRlLm9mZnNldExlZnQgLSBjZW50ZXJPZmZzZXQgKyBfdGhpcy5nZXRXaWR0aChzbGlkZSkgLyAyID4gX3RoaXMuc3RhdGUuc3dpcGVMZWZ0ICogLTEpIHtcbiAgICAgICAgICAgIHN3aXBlZFNsaWRlID0gc2xpZGU7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzbGlkZS5vZmZzZXRUb3AgKyBfdGhpcy5nZXRIZWlnaHQoc2xpZGUpIC8gMiA+IF90aGlzLnN0YXRlLnN3aXBlTGVmdCAqIC0xKSB7XG4gICAgICAgICAgICBzd2lwZWRTbGlkZSA9IHNsaWRlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBzbGlkZXNUcmF2ZXJzZWQgPSBNYXRoLmFicyhzd2lwZWRTbGlkZS5kYXRhc2V0LmluZGV4IC0gdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUpIHx8IDE7XG5cbiAgICAgIHJldHVybiBzbGlkZXNUcmF2ZXJzZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLnNsaWRlc1RvU2Nyb2xsO1xuICAgIH1cbiAgfSxcblxuICBzd2lwZUVuZDogZnVuY3Rpb24gc3dpcGVFbmQoZSkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5kcmFnZ2luZykge1xuICAgICAgaWYgKHRoaXMucHJvcHMuc3dpcGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdG91Y2hPYmplY3QgPSB0aGlzLnN0YXRlLnRvdWNoT2JqZWN0O1xuICAgIHZhciBtaW5Td2lwZSA9IHRoaXMuc3RhdGUubGlzdFdpZHRoIC8gdGhpcy5wcm9wcy50b3VjaFRocmVzaG9sZDtcbiAgICB2YXIgc3dpcGVEaXJlY3Rpb24gPSB0aGlzLnN3aXBlRGlyZWN0aW9uKHRvdWNoT2JqZWN0KTtcblxuICAgIGlmICh0aGlzLnByb3BzLnZlcnRpY2FsU3dpcGluZykge1xuICAgICAgbWluU3dpcGUgPSB0aGlzLnN0YXRlLmxpc3RIZWlnaHQgLyB0aGlzLnByb3BzLnRvdWNoVGhyZXNob2xkO1xuICAgIH1cblxuICAgIC8vIHJlc2V0IHRoZSBzdGF0ZSBvZiB0b3VjaCByZWxhdGVkIHN0YXRlIHZhcmlhYmxlcy5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICAgIGVkZ2VEcmFnZ2VkOiBmYWxzZSxcbiAgICAgIHN3aXBlZDogZmFsc2UsXG4gICAgICBzd2lwZUxlZnQ6IG51bGwsXG4gICAgICB0b3VjaE9iamVjdDoge31cbiAgICB9KTtcbiAgICAvLyBGaXggZm9yICMxM1xuICAgIGlmICghdG91Y2hPYmplY3Quc3dpcGVMZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gbWluU3dpcGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgdmFyIHNsaWRlQ291bnQgPSB2b2lkIDAsXG4gICAgICAgICAgbmV3U2xpZGUgPSB2b2lkIDA7XG5cbiAgICAgIHN3aXRjaCAoc3dpcGVEaXJlY3Rpb24pIHtcblxuICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgY2FzZSAnZG93bic6XG4gICAgICAgICAgbmV3U2xpZGUgPSB0aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSArIHRoaXMuZ2V0U2xpZGVDb3VudCgpO1xuICAgICAgICAgIHNsaWRlQ291bnQgPSB0aGlzLnByb3BzLnN3aXBlVG9TbGlkZSA/IHRoaXMuY2hlY2tOYXZpZ2FibGUobmV3U2xpZGUpIDogbmV3U2xpZGU7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5jdXJyZW50RGlyZWN0aW9uID0gMDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgIGNhc2UgJ3VwJzpcbiAgICAgICAgICBuZXdTbGlkZSA9IHRoaXMuc3RhdGUuY3VycmVudFNsaWRlIC0gdGhpcy5nZXRTbGlkZUNvdW50KCk7XG4gICAgICAgICAgc2xpZGVDb3VudCA9IHRoaXMucHJvcHMuc3dpcGVUb1NsaWRlID8gdGhpcy5jaGVja05hdmlnYWJsZShuZXdTbGlkZSkgOiBuZXdTbGlkZTtcbiAgICAgICAgICB0aGlzLnN0YXRlLmN1cnJlbnREaXJlY3Rpb24gPSAxO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgc2xpZGVDb3VudCA9IHRoaXMuc3RhdGUuY3VycmVudFNsaWRlO1xuXG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2xpZGVIYW5kbGVyKHNsaWRlQ291bnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBZGp1c3QgdGhlIHRyYWNrIGJhY2sgdG8gaXQncyBvcmlnaW5hbCBwb3NpdGlvbi5cbiAgICAgIHZhciBjdXJyZW50TGVmdCA9ICgwLCBfdHJhY2tIZWxwZXIuZ2V0VHJhY2tMZWZ0KSgoMCwgX29iamVjdEFzc2lnbjIuZGVmYXVsdCkoe1xuICAgICAgICBzbGlkZUluZGV4OiB0aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSxcbiAgICAgICAgdHJhY2tSZWY6IHRoaXMudHJhY2tcbiAgICAgIH0sIHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpKTtcblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHRyYWNrU3R5bGU6ICgwLCBfdHJhY2tIZWxwZXIuZ2V0VHJhY2tBbmltYXRlQ1NTKSgoMCwgX29iamVjdEFzc2lnbjIuZGVmYXVsdCkoeyBsZWZ0OiBjdXJyZW50TGVmdCB9LCB0aGlzLnByb3BzLCB0aGlzLnN0YXRlKSlcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgb25Jbm5lclNsaWRlckVudGVyOiBmdW5jdGlvbiBvbklubmVyU2xpZGVyRW50ZXIoZSkge1xuICAgIGlmICh0aGlzLnByb3BzLmF1dG9wbGF5ICYmIHRoaXMucHJvcHMucGF1c2VPbkhvdmVyKSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfVxuICB9LFxuICBvbklubmVyU2xpZGVyT3ZlcjogZnVuY3Rpb24gb25Jbm5lclNsaWRlck92ZXIoZSkge1xuICAgIGlmICh0aGlzLnByb3BzLmF1dG9wbGF5ICYmIHRoaXMucHJvcHMucGF1c2VPbkhvdmVyKSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfVxuICB9LFxuICBvbklubmVyU2xpZGVyTGVhdmU6IGZ1bmN0aW9uIG9uSW5uZXJTbGlkZXJMZWF2ZShlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuYXV0b3BsYXkgJiYgdGhpcy5wcm9wcy5wYXVzZU9uSG92ZXIpIHtcbiAgICAgIHRoaXMuYXV0b1BsYXkoKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEV2ZW50SGFuZGxlcnM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LXNsaWNrL2xpYi9taXhpbnMvZXZlbnQtaGFuZGxlcnMuanNcbi8vIG1vZHVsZSBpZCA9IDMxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9pbm5lclNsaWRlciA9IHJlcXVpcmUoJy4vaW5uZXItc2xpZGVyJyk7XG5cbnZhciBfb2JqZWN0QXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgX29iamVjdEFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RBc3NpZ24pO1xuXG52YXIgX2pzb24ybXEgPSByZXF1aXJlKCdqc29uMm1xJyk7XG5cbnZhciBfanNvbjJtcTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qc29uMm1xKTtcblxudmFyIF9yZWFjdFJlc3BvbnNpdmVNaXhpbiA9IHJlcXVpcmUoJ3JlYWN0LXJlc3BvbnNpdmUtbWl4aW4nKTtcblxudmFyIF9yZWFjdFJlc3BvbnNpdmVNaXhpbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdFJlc3BvbnNpdmVNaXhpbik7XG5cbnZhciBfZGVmYXVsdFByb3BzID0gcmVxdWlyZSgnLi9kZWZhdWx0LXByb3BzJyk7XG5cbnZhciBfZGVmYXVsdFByb3BzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmF1bHRQcm9wcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBTbGlkZXIgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1NsaWRlcicsXG5cbiAgbWl4aW5zOiBbX3JlYWN0UmVzcG9uc2l2ZU1peGluMi5kZWZhdWx0XSxcbiAgaW5uZXJTbGlkZXI6IG51bGwsXG4gIGlubmVyU2xpZGVyUmVmSGFuZGxlcjogZnVuY3Rpb24gaW5uZXJTbGlkZXJSZWZIYW5kbGVyKHJlZikge1xuICAgIHRoaXMuaW5uZXJTbGlkZXIgPSByZWY7XG4gIH0sXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBicmVha3BvaW50OiBudWxsXG4gICAgfTtcbiAgfSxcbiAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmICh0aGlzLnByb3BzLnJlc3BvbnNpdmUpIHtcbiAgICAgIHZhciBicmVha3BvaW50cyA9IHRoaXMucHJvcHMucmVzcG9uc2l2ZS5tYXAoZnVuY3Rpb24gKGJyZWFrcHQpIHtcbiAgICAgICAgcmV0dXJuIGJyZWFrcHQuYnJlYWtwb2ludDtcbiAgICAgIH0pO1xuICAgICAgYnJlYWtwb2ludHMuc29ydChmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICByZXR1cm4geCAtIHk7XG4gICAgICB9KTtcblxuICAgICAgYnJlYWtwb2ludHMuZm9yRWFjaChmdW5jdGlvbiAoYnJlYWtwb2ludCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGJRdWVyeTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgYlF1ZXJ5ID0gKDAsIF9qc29uMm1xMi5kZWZhdWx0KSh7IG1pbldpZHRoOiAwLCBtYXhXaWR0aDogYnJlYWtwb2ludCB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiUXVlcnkgPSAoMCwgX2pzb24ybXEyLmRlZmF1bHQpKHsgbWluV2lkdGg6IGJyZWFrcG9pbnRzW2luZGV4IC0gMV0sIG1heFdpZHRoOiBicmVha3BvaW50IH0pO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLm1lZGlhKGJRdWVyeSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgYnJlYWtwb2ludDogYnJlYWtwb2ludCB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gUmVnaXN0ZXIgbWVkaWEgcXVlcnkgZm9yIGZ1bGwgc2NyZWVuLiBOZWVkIHRvIHN1cHBvcnQgcmVzaXplIGZyb20gc21hbGwgdG8gbGFyZ2VcbiAgICAgIHZhciBxdWVyeSA9ICgwLCBfanNvbjJtcTIuZGVmYXVsdCkoeyBtaW5XaWR0aDogYnJlYWtwb2ludHMuc2xpY2UoLTEpWzBdIH0pO1xuXG4gICAgICB0aGlzLm1lZGlhKHF1ZXJ5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHsgYnJlYWtwb2ludDogbnVsbCB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICBzbGlja1ByZXY6IGZ1bmN0aW9uIHNsaWNrUHJldigpIHtcbiAgICB0aGlzLmlubmVyU2xpZGVyLnNsaWNrUHJldigpO1xuICB9LFxuXG4gIHNsaWNrTmV4dDogZnVuY3Rpb24gc2xpY2tOZXh0KCkge1xuICAgIHRoaXMuaW5uZXJTbGlkZXIuc2xpY2tOZXh0KCk7XG4gIH0sXG5cbiAgc2xpY2tHb1RvOiBmdW5jdGlvbiBzbGlja0dvVG8oc2xpZGUpIHtcbiAgICB0aGlzLmlubmVyU2xpZGVyLnNsaWNrR29UbyhzbGlkZSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgc2V0dGluZ3M7XG4gICAgdmFyIG5ld1Byb3BzO1xuICAgIGlmICh0aGlzLnN0YXRlLmJyZWFrcG9pbnQpIHtcbiAgICAgIG5ld1Byb3BzID0gdGhpcy5wcm9wcy5yZXNwb25zaXZlLmZpbHRlcihmdW5jdGlvbiAocmVzcCkge1xuICAgICAgICByZXR1cm4gcmVzcC5icmVha3BvaW50ID09PSBfdGhpczIuc3RhdGUuYnJlYWtwb2ludDtcbiAgICAgIH0pO1xuICAgICAgc2V0dGluZ3MgPSBuZXdQcm9wc1swXS5zZXR0aW5ncyA9PT0gJ3Vuc2xpY2snID8gJ3Vuc2xpY2snIDogKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHt9LCB0aGlzLnByb3BzLCBuZXdQcm9wc1swXS5zZXR0aW5ncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldHRpbmdzID0gKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHt9LCBfZGVmYXVsdFByb3BzMi5kZWZhdWx0LCB0aGlzLnByb3BzKTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGNoaWxkcmVuID0gW2NoaWxkcmVuXTtcbiAgICB9XG5cbiAgICAvLyBDaGlsZHJlbiBtYXkgY29udGFpbiBmYWxzZSBvciBudWxsLCBzbyB3ZSBzaG91bGQgZmlsdGVyIHRoZW1cbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiAhIWNoaWxkO1xuICAgIH0pO1xuXG4gICAgaWYgKHNldHRpbmdzID09PSAndW5zbGljaycpIHtcbiAgICAgIC8vIGlmICd1bnNsaWNrJyByZXNwb25zaXZlIGJyZWFrcG9pbnQgc2V0dGluZyB1c2VkLCBqdXN0IHJldHVybiB0aGUgPFNsaWRlcj4gdGFnIG5lc3RlZCBIVE1MXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICBudWxsLFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBfaW5uZXJTbGlkZXIuSW5uZXJTbGlkZXIsXG4gICAgICAgIF9leHRlbmRzKHsgcmVmOiB0aGlzLmlubmVyU2xpZGVyUmVmSGFuZGxlciB9LCBzZXR0aW5ncyksXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApO1xuICAgIH1cbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2xpZGVyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1zbGljay9saWIvc2xpZGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAzMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5UcmFjayA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX29iamVjdEFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIF9vYmplY3RBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0QXNzaWduKTtcblxudmFyIF9jbGFzc25hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBnZXRTbGlkZUNsYXNzZXMgPSBmdW5jdGlvbiBnZXRTbGlkZUNsYXNzZXMoc3BlYykge1xuICB2YXIgc2xpY2tBY3RpdmUsIHNsaWNrQ2VudGVyLCBzbGlja0Nsb25lZDtcbiAgdmFyIGNlbnRlck9mZnNldCwgaW5kZXg7XG5cbiAgaWYgKHNwZWMucnRsKSB7XG4gICAgaW5kZXggPSBzcGVjLnNsaWRlQ291bnQgLSAxIC0gc3BlYy5pbmRleDtcbiAgfSBlbHNlIHtcbiAgICBpbmRleCA9IHNwZWMuaW5kZXg7XG4gIH1cblxuICBzbGlja0Nsb25lZCA9IGluZGV4IDwgMCB8fCBpbmRleCA+PSBzcGVjLnNsaWRlQ291bnQ7XG4gIGlmIChzcGVjLmNlbnRlck1vZGUpIHtcbiAgICBjZW50ZXJPZmZzZXQgPSBNYXRoLmZsb29yKHNwZWMuc2xpZGVzVG9TaG93IC8gMik7XG4gICAgc2xpY2tDZW50ZXIgPSAoaW5kZXggLSBzcGVjLmN1cnJlbnRTbGlkZSkgJSBzcGVjLnNsaWRlQ291bnQgPT09IDA7XG4gICAgaWYgKGluZGV4ID4gc3BlYy5jdXJyZW50U2xpZGUgLSBjZW50ZXJPZmZzZXQgLSAxICYmIGluZGV4IDw9IHNwZWMuY3VycmVudFNsaWRlICsgY2VudGVyT2Zmc2V0KSB7XG4gICAgICBzbGlja0FjdGl2ZSA9IHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNsaWNrQWN0aXZlID0gc3BlYy5jdXJyZW50U2xpZGUgPD0gaW5kZXggJiYgaW5kZXggPCBzcGVjLmN1cnJlbnRTbGlkZSArIHNwZWMuc2xpZGVzVG9TaG93O1xuICB9XG4gIHJldHVybiAoMCwgX2NsYXNzbmFtZXMyLmRlZmF1bHQpKHtcbiAgICAnc2xpY2stc2xpZGUnOiB0cnVlLFxuICAgICdzbGljay1hY3RpdmUnOiBzbGlja0FjdGl2ZSxcbiAgICAnc2xpY2stY2VudGVyJzogc2xpY2tDZW50ZXIsXG4gICAgJ3NsaWNrLWNsb25lZCc6IHNsaWNrQ2xvbmVkXG4gIH0pO1xufTtcblxudmFyIGdldFNsaWRlU3R5bGUgPSBmdW5jdGlvbiBnZXRTbGlkZVN0eWxlKHNwZWMpIHtcbiAgdmFyIHN0eWxlID0ge307XG5cbiAgaWYgKHNwZWMudmFyaWFibGVXaWR0aCA9PT0gdW5kZWZpbmVkIHx8IHNwZWMudmFyaWFibGVXaWR0aCA9PT0gZmFsc2UpIHtcbiAgICBzdHlsZS53aWR0aCA9IHNwZWMuc2xpZGVXaWR0aDtcbiAgfVxuXG4gIGlmIChzcGVjLmZhZGUpIHtcbiAgICBzdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgc3R5bGUubGVmdCA9IC1zcGVjLmluZGV4ICogc3BlYy5zbGlkZVdpZHRoO1xuICAgIHN0eWxlLm9wYWNpdHkgPSBzcGVjLmN1cnJlbnRTbGlkZSA9PT0gc3BlYy5pbmRleCA/IDEgOiAwO1xuICAgIHN0eWxlLnRyYW5zaXRpb24gPSAnb3BhY2l0eSAnICsgc3BlYy5zcGVlZCArICdtcyAnICsgc3BlYy5jc3NFYXNlO1xuICAgIHN0eWxlLldlYmtpdFRyYW5zaXRpb24gPSAnb3BhY2l0eSAnICsgc3BlYy5zcGVlZCArICdtcyAnICsgc3BlYy5jc3NFYXNlO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufTtcblxudmFyIGdldEtleSA9IGZ1bmN0aW9uIGdldEtleShjaGlsZCwgZmFsbGJhY2tLZXkpIHtcbiAgLy8ga2V5IGNvdWxkIGJlIGEgemVyb1xuICByZXR1cm4gY2hpbGQua2V5ID09PSBudWxsIHx8IGNoaWxkLmtleSA9PT0gdW5kZWZpbmVkID8gZmFsbGJhY2tLZXkgOiBjaGlsZC5rZXk7XG59O1xuXG52YXIgcmVuZGVyU2xpZGVzID0gZnVuY3Rpb24gcmVuZGVyU2xpZGVzKHNwZWMpIHtcbiAgdmFyIGtleTtcbiAgdmFyIHNsaWRlcyA9IFtdO1xuICB2YXIgcHJlQ2xvbmVTbGlkZXMgPSBbXTtcbiAgdmFyIHBvc3RDbG9uZVNsaWRlcyA9IFtdO1xuICB2YXIgY291bnQgPSBfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4uY291bnQoc3BlYy5jaGlsZHJlbik7XG5cbiAgX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLmZvckVhY2goc3BlYy5jaGlsZHJlbiwgZnVuY3Rpb24gKGVsZW0sIGluZGV4KSB7XG4gICAgdmFyIGNoaWxkID0gdm9pZCAwO1xuICAgIHZhciBjaGlsZE9uQ2xpY2tPcHRpb25zID0ge1xuICAgICAgbWVzc2FnZTogJ2NoaWxkcmVuJyxcbiAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgIHNsaWRlc1RvU2Nyb2xsOiBzcGVjLnNsaWRlc1RvU2Nyb2xsLFxuICAgICAgY3VycmVudFNsaWRlOiBzcGVjLmN1cnJlbnRTbGlkZVxuICAgIH07XG5cbiAgICBpZiAoIXNwZWMubGF6eUxvYWQgfCAoc3BlYy5sYXp5TG9hZCAmJiBzcGVjLmxhenlMb2FkZWRMaXN0LmluZGV4T2YoaW5kZXgpID49IDApKSB7XG4gICAgICBjaGlsZCA9IGVsZW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoaWxkID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIG51bGwpO1xuICAgIH1cbiAgICB2YXIgY2hpbGRTdHlsZSA9IGdldFNsaWRlU3R5bGUoKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHt9LCBzcGVjLCB7IGluZGV4OiBpbmRleCB9KSk7XG4gICAgdmFyIHNsaWNrQ2xhc3NlcyA9IGdldFNsaWRlQ2xhc3NlcygoMCwgX29iamVjdEFzc2lnbjIuZGVmYXVsdCkoeyBpbmRleDogaW5kZXggfSwgc3BlYykpO1xuICAgIHZhciBjc3NDbGFzc2VzO1xuXG4gICAgaWYgKGNoaWxkLnByb3BzLmNsYXNzTmFtZSkge1xuICAgICAgY3NzQ2xhc3NlcyA9ICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkoc2xpY2tDbGFzc2VzLCBjaGlsZC5wcm9wcy5jbGFzc05hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NDbGFzc2VzID0gc2xpY2tDbGFzc2VzO1xuICAgIH1cblxuICAgIHZhciBvbkNsaWNrID0gZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICBjaGlsZC5wcm9wcyAmJiBjaGlsZC5wcm9wcy5vbkNsaWNrICYmIGNoaWxkLnByb3BzLm9uQ2xpY2soZSk7XG4gICAgICBpZiAoc3BlYy5mb2N1c09uU2VsZWN0KSB7XG4gICAgICAgIHNwZWMuZm9jdXNPblNlbGVjdChjaGlsZE9uQ2xpY2tPcHRpb25zKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2xpZGVzLnB1c2goX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAga2V5OiAnb3JpZ2luYWwnICsgZ2V0S2V5KGNoaWxkLCBpbmRleCksXG4gICAgICAnZGF0YS1pbmRleCc6IGluZGV4LFxuICAgICAgY2xhc3NOYW1lOiBjc3NDbGFzc2VzLFxuICAgICAgdGFiSW5kZXg6ICctMScsXG4gICAgICBzdHlsZTogKDAsIF9vYmplY3RBc3NpZ24yLmRlZmF1bHQpKHsgb3V0bGluZTogJ25vbmUnIH0sIGNoaWxkLnByb3BzLnN0eWxlIHx8IHt9LCBjaGlsZFN0eWxlKSxcbiAgICAgIG9uQ2xpY2s6IG9uQ2xpY2tcbiAgICB9KSk7XG5cbiAgICAvLyB2YXJpYWJsZVdpZHRoIGRvZXNuJ3Qgd3JhcCBwcm9wZXJseS5cbiAgICBpZiAoc3BlYy5pbmZpbml0ZSAmJiBzcGVjLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICB2YXIgaW5maW5pdGVDb3VudCA9IHNwZWMudmFyaWFibGVXaWR0aCA/IHNwZWMuc2xpZGVzVG9TaG93ICsgMSA6IHNwZWMuc2xpZGVzVG9TaG93O1xuXG4gICAgICBpZiAoaW5kZXggPj0gY291bnQgLSBpbmZpbml0ZUNvdW50KSB7XG4gICAgICAgIGtleSA9IC0oY291bnQgLSBpbmRleCk7XG4gICAgICAgIHByZUNsb25lU2xpZGVzLnB1c2goX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICAgIGtleTogJ3ByZWNsb25lZCcgKyBnZXRLZXkoY2hpbGQsIGtleSksXG4gICAgICAgICAgJ2RhdGEtaW5kZXgnOiBrZXksXG4gICAgICAgICAgY2xhc3NOYW1lOiBjc3NDbGFzc2VzLFxuICAgICAgICAgIHN0eWxlOiAoMCwgX29iamVjdEFzc2lnbjIuZGVmYXVsdCkoe30sIGNoaWxkLnByb3BzLnN0eWxlIHx8IHt9LCBjaGlsZFN0eWxlKSxcbiAgICAgICAgICBvbkNsaWNrOiBvbkNsaWNrXG4gICAgICAgIH0pKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGluZGV4IDwgaW5maW5pdGVDb3VudCkge1xuICAgICAgICBrZXkgPSBjb3VudCArIGluZGV4O1xuICAgICAgICBwb3N0Q2xvbmVTbGlkZXMucHVzaChfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAga2V5OiAncG9zdGNsb25lZCcgKyBnZXRLZXkoY2hpbGQsIGtleSksXG4gICAgICAgICAgJ2RhdGEtaW5kZXgnOiBrZXksXG4gICAgICAgICAgY2xhc3NOYW1lOiBjc3NDbGFzc2VzLFxuICAgICAgICAgIHN0eWxlOiAoMCwgX29iamVjdEFzc2lnbjIuZGVmYXVsdCkoe30sIGNoaWxkLnByb3BzLnN0eWxlIHx8IHt9LCBjaGlsZFN0eWxlKSxcbiAgICAgICAgICBvbkNsaWNrOiBvbkNsaWNrXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGlmIChzcGVjLnJ0bCkge1xuICAgIHJldHVybiBwcmVDbG9uZVNsaWRlcy5jb25jYXQoc2xpZGVzLCBwb3N0Q2xvbmVTbGlkZXMpLnJldmVyc2UoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcHJlQ2xvbmVTbGlkZXMuY29uY2F0KHNsaWRlcywgcG9zdENsb25lU2xpZGVzKTtcbiAgfVxufTtcblxudmFyIFRyYWNrID0gZXhwb3J0cy5UcmFjayA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVHJhY2snLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzbGlkZXMgPSByZW5kZXJTbGlkZXMuY2FsbCh0aGlzLCB0aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgY2xhc3NOYW1lOiAnc2xpY2stdHJhY2snLCBzdHlsZTogdGhpcy5wcm9wcy50cmFja1N0eWxlIH0sXG4gICAgICBzbGlkZXNcbiAgICApO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3Qtc2xpY2svbGliL3RyYWNrLmpzXG4vLyBtb2R1bGUgaWQgPSAzMThcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSB0aHVuaztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVkdXgtdGh1bmsvbGliL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAzMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgbm8tdW5kZWZpbmVkOiAwICovXG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbnZhciBhc3NpZ24gPSB2b2lkIDA7XG5cbmlmICh0eXBlb2YgT2JqZWN0LmFzc2lnbiA9PT0gJ2Z1bmN0aW9uJykge1xuICBhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xufSBlbHNlIHtcbiAgYXNzaWduID0gZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCB8fCB0YXJnZXQgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcpO1xuICAgIH1cblxuICAgIHZhciBvdXRwdXQgPSBPYmplY3QodGFyZ2V0KTtcblxuICAgIHZhciBwcm9wZXJ0eU9iamVjdHMgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICBpZiAocHJvcGVydHlPYmplY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgIHByb3BlcnR5T2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIHNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBuZXh0S2V5ID0gdm9pZCAwO1xuXG4gICAgICAgICAgZm9yIChuZXh0S2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShuZXh0S2V5KSkge1xuICAgICAgICAgICAgICBvdXRwdXRbbmV4dEtleV0gPSBzb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xufVxuXG52YXIgYXNzaWduJDEgPSBhc3NpZ247XG5cbnZhciBpbmNsdWRlcyA9IHZvaWQgMDtcblxuaWYgKCFBcnJheS5wcm90b3R5cGUuaW5jbHVkZXMpIHtcbiAgaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyhhcnJheSwgc2VhcmNoRWxlbWVudCkge1xuICAgIHZhciBPYmplY3RpZmllZEFycmF5ID0gT2JqZWN0KGFycmF5KTtcbiAgICB2YXIgbGVuZ3RoID0gcGFyc2VJbnQoT2JqZWN0aWZpZWRBcnJheS5sZW5ndGgsIDEwKSB8fCAwO1xuXG4gICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBzdGFydEluZGV4ID0gcGFyc2VJbnQoYXJndW1lbnRzWzJdLCAxMCkgfHwgMDtcbiAgICB2YXIgaW5kZXggPSB2b2lkIDA7XG5cbiAgICBpZiAoc3RhcnRJbmRleCA+PSAwKSB7XG4gICAgICBpbmRleCA9IHN0YXJ0SW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGV4ID0gbGVuZ3RoICsgc3RhcnRJbmRleDtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudEVsZW1lbnQgPSBPYmplY3RpZmllZEFycmF5W2luZGV4XTtcblxuICAgICAgLyogZXNsaW50IG5vLXNlbGYtY29tcGFyZTowICovXG4gICAgICBpZiAoc2VhcmNoRWxlbWVudCA9PT0gY3VycmVudEVsZW1lbnQgfHwgc2VhcmNoRWxlbWVudCAhPT0gc2VhcmNoRWxlbWVudCAmJiBjdXJyZW50RWxlbWVudCAhPT0gY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgLy8gTmFOICE9PSBOYU5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbn0gZWxzZSB7XG4gIGluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMoYXJyYXkpIHtcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXMuYXBwbHkoYXJyYXksIGFyZ3MpO1xuICB9O1xufVxuXG52YXIgaW5jbHVkZXMkMSA9IGluY2x1ZGVzO1xuXG5mdW5jdGlvbiB3cmFwKGZ1bmMsIHN1cGVyRnVuYykge1xuICBmdW5jdGlvbiBzdXBlcldyYXBwZXIoKSB7XG4gICAgdmFyIG9yaWdpbmFsU3VwZXIgPSB0aGlzWydzdXBlciddO1xuXG4gICAgdGhpc1snc3VwZXInXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdXBlckZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgdmFyIHJldCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHRoaXNbJ3N1cGVyJ10gPSBvcmlnaW5hbFN1cGVyO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHN1cGVyV3JhcHBlci53cmFwcGVkRnVuY3Rpb24gPSBmdW5jO1xuXG4gIHJldHVybiBzdXBlcldyYXBwZXI7XG59XG5cbmZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMobmFtZXMsIHByb3RvLCBkZXN0aW5hdGlvbikge1xuICB2YXIgcGFyZW50UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZGVzdGluYXRpb24pO1xuXG4gIG5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG8sIG5hbWUpO1xuICAgIHZhciBwYXJlbnREZXNjcmlwdG9yID0gcGFyZW50UHJvdG8uaGFzT3duUHJvcGVydHkobmFtZSkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXJlbnRQcm90bywgbmFtZSk7XG5cbiAgICBpZiAodHlwZW9mIHBhcmVudERlc2NyaXB0b3IudmFsdWUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciB3cmFwcGVkRnVuY3Rpb24gPSB3cmFwKGRlc2NyaXB0b3IudmFsdWUsIHBhcmVudERlc2NyaXB0b3IudmFsdWUpO1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGVzdGluYXRpb24sIG5hbWUsIHsgdmFsdWU6IHdyYXBwZWRGdW5jdGlvbiB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlc3RpbmF0aW9uLCBuYW1lLCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDbGFzcyhwcm9wcykge1xuICB2YXIgcGFyZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBPYmplY3Q7XG5cbiAgdmFyIENvbnN0cnVjdG9yID0gd3JhcChwcm9wcy5jb25zdHJ1Y3RvciwgcGFyZW50KTtcbiAgdmFyIGluc3RhbmNlUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3BzKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhaW5jbHVkZXMkMShbJ2NvbnN0cnVjdG9yJywgJ3N0YXRpYyddLCBrZXkpO1xuICB9KTtcblxuICBhc3NpZ24kMShDb25zdHJ1Y3RvciwgcGFyZW50KTtcblxuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICBkZWZpbmVQcm9wZXJ0aWVzKGluc3RhbmNlUHJvcGVydHlOYW1lcywgcHJvcHMsIENvbnN0cnVjdG9yLnByb3RvdHlwZSk7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuXG4gIHZhciBzdGF0aWNQcm9wcyA9IHByb3BzWydzdGF0aWMnXTtcblxuICBpZiAoc3RhdGljUHJvcHMpIHtcbiAgICB2YXIgc3RhdGljUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHN0YXRpY1Byb3BzKTtcblxuICAgIGRlZmluZVByb3BlcnRpZXMoc3RhdGljUHJvcGVydHlOYW1lcywgc3RhdGljUHJvcHMsIENvbnN0cnVjdG9yKTtcbiAgfVxuXG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxudmFyIENvcmVPYmplY3QgPSBjcmVhdGVDbGFzcyh7XG4gIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3RvcigpIHt9LFxuXG5cbiAgJ3N0YXRpYyc6IHtcbiAgICBleHRlbmQ6IGZ1bmN0aW9uIGV4dGVuZChzdWJDbGFzc1Byb3BzKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQ2xhc3Moc3ViQ2xhc3NQcm9wcywgdGhpcyk7XG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gd3JhcENvbnNvbGUobG9nQ29tbWFuZCkge1xuICB2YXIgbG9nTWV0aG9kID0gZnVuY3Rpb24gbG9nTWV0aG9kKCkge1xuICAgIHZhciBsb2cgPSB2b2lkIDA7XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gICAgaWYgKGNvbnNvbGVbbG9nQ29tbWFuZF0pIHtcbiAgICAgIGxvZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwoY29uc29sZVtsb2dDb21tYW5kXSwgY29uc29sZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwoY29uc29sZS5sb2csIGNvbnNvbGUpO1xuICAgIH1cbiAgICBsb2cuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG5cbiAgICBhcmdzLnVuc2hpZnQoJ1tKUy1CVVktU0RLXTogJyk7XG4gICAgbG9nTWV0aG9kLmFwcGx5KHVuZGVmaW5lZCwgX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3MpKTtcbiAgfTtcbn1cblxudmFyIExvZ2dlciA9IENvcmVPYmplY3QuZXh0ZW5kKHtcbiAgLyoqXG4gICAqIFdyYXBwZXIgYXJvdW5kIHRoZSBjb25zb2xlIGxvZyBzbyBpbiB0aGUgZnV0dXJlIHdlIGNhbiBoYXZlIGJldHRlciBkZXYgb3V0cHV0LlxuICAgKiBBbHNvIGFsbG93cyB1cyB0byBkaXNhYmxlIG91dHB1dCBpbiBwcm9kdWN0aW9uLlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAY2xhc3MgTG9nZ2VyXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yKCkge30sXG5cbiAgZGVidWc6IHdyYXBDb25zb2xlKCdkZWJ1ZycpLFxuICBpbmZvOiB3cmFwQ29uc29sZSgnaW5mbycpLFxuICB3YXJuOiB3cmFwQ29uc29sZSgnd2FybicpLFxuICBlcnJvcjogd3JhcENvbnNvbGUoJ2Vycm9yJylcbn0pO1xuXG52YXIgbG9nZ2VyID0gbmV3IExvZ2dlcigpO1xuXG52YXIgQ29uZmlnID0gQ29yZU9iamVjdC5leHRlbmQoe1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IoYXR0cnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgT2JqZWN0LmtleXModGhpcy5kZXByZWNhdGVkUHJvcGVydGllcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoYXR0cnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICB2YXIgdHJhbnNmb3JtTmFtZSA9IF90aGlzLmRlcHJlY2F0ZWRQcm9wZXJ0aWVzW2tleV07XG4gICAgICAgIHZhciB0cmFuc2Zvcm0gPSBfdGhpc1t0cmFuc2Zvcm1OYW1lXTtcblxuICAgICAgICB0cmFuc2Zvcm0oYXR0cnNba2V5XSwgYXR0cnMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMucmVxdWlyZWRQcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKCFhdHRycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbmV3IENvbmZpZygpIHJlcXVpcmVzIHRoZSBvcHRpb24gXFwnJyArIGtleSArICdcXCcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzW2tleV0gPSBhdHRyc1trZXldO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMub3B0aW9uYWxQcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKGF0dHJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgX3RoaXNba2V5XSA9IGF0dHJzW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogQW4gb2JqZWN0IHdpdGgga2V5cyBmb3IgZGVwcmVjYXRlZCBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgYXMgZnVuY3Rpb25zIHRoYXRcbiAgICogd2lsbCB0cmFuc2Zvcm0gdGhlIHZhbHVlIGludG8gYSB1c2FibGUgdmFsdWUuIEEgZGVwcmFjYXRpb24gdHJhbnNmb3JtIHNob3VsZFxuICAgKiBoYXZlIHRoZSB2YWx1ZSBzaWduYXR1cmUgZnVuY3Rpb24oZGVwcmVjYXRlZF92YWx1ZSwgY29uZmlnX3RvX2JlX3RyYW5zZm9ybWVkKVxuICAgKiBAYXR0cmlidXRlIGRlcHJlY2F0ZWRQcm9wZXJ0aWVzXG4gICAqIEBkZWZhdWx0IHsgbXlTaG9waWZ5RG9tYWluOiB0aGlzLnRyYW5zZm9ybU15U2hvcGlmeURvbWFpbiB9XG4gICAqIEB0eXBlIE9iamVjdFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZGVwcmVjYXRlZFByb3BlcnRpZXM6IHtcbiAgICBteVNob3BpZnlEb21haW46ICd0cmFuc2Zvcm1NeVNob3BpZnlEb21haW4nXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybSB0aGUgbXlTaG9waWZ5RG9tYWluIGNvbmZpZyB0byBhIGRvbWFpbiBjb25maWcuXG4gICAqIEBtZXRob2QgdHJhbnNmb3JtTXlTaG9waWZ5RG9tYWluXG4gICAqIEBzdGF0aWNcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN1YmRvbWFpbiBUaGUgb3JpZ2luYWwgc3ViZG9tYWluIG9uIG15c2hvcGlmeS5jb21cbiAgICogQHBhcmFtIHtPYmplY3R9IGF0dHJzLiBUaGUgY29uZmlnIGF0dHJpYnV0ZXMgdG8gYmUgdHJhbnNmb3JtZWQgdG8gYVxuICAgKiBub24tZGVwcmVjYXRlZCBzdGF0ZS5cbiAgICogQHJldHVybiB7T2JqZWN0fSB0aGUgdHJhbnNmb3JtZWQgY29uZmlnIGF0dHJpYnV0ZXMuXG4gICAqL1xuICB0cmFuc2Zvcm1NeVNob3BpZnlEb21haW46IGZ1bmN0aW9uIHRyYW5zZm9ybU15U2hvcGlmeURvbWFpbihzdWJkb21haW4sIGF0dHJzKSB7XG4gICAgbG9nZ2VyLndhcm4oJ0NvbmZpZyAtICcsICdteVNob3BpZnlEb21haW4gaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBkb21haW4gYW5kIHByb3ZpZGUgdGhlIGZ1bGwgc2hvcCBkb21haW4uJyk7XG4gICAgYXR0cnMuZG9tYWluID0gc3ViZG9tYWluICsgJy5teXNob3BpZnkuY29tJztcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIHRoYXQgbXVzdCBiZSBzZXQgb24gaW5pdGlhbGl6YXRpb25zXG4gICAqIEBhdHRyaWJ1dGUgcmVxdWlyZWRQcm9wZXJ0aWVzXG4gICAqIEBkZWZhdWx0IFsnYXBpS2V5JywgJ2FwcElkJywgJ215U2hvcGlmeURvbWFpbiddXG4gICAqIEB0eXBlIEFycmF5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICByZXF1aXJlZFByb3BlcnRpZXM6IFsnYXBpS2V5JywgJ2FwcElkJywgJ2RvbWFpbiddLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIHRoYXQgbWF5IGJlIHNldCBvbiBpbml0aWFsaXphdGlvbnNcbiAgICogQGF0dHJpYnV0ZSByZXF1aXJlZFByb3BlcnRpZXNcbiAgICogQGRlZmF1bHQgWydhamF4SGVhZGVycyddXG4gICAqIEB0eXBlIEFycmF5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvcHRpb25hbFByb3BlcnRpZXM6IFsnYWpheEhlYWRlcnMnXSxcblxuICAvKipcbiAgICogVGhlIGFwaUtleSBmb3IgYXV0aGVudGljYXRpbmcgYWdhaW5zdCBzaG9waWZ5LiBUaGlzIGlzIHlvdXIgYXBpIGNsaWVudCdzXG4gICAqIHB1YmxpYyBhcGkgdG9rZW4uIE5vdCB0aGUgc2hhcmVkIHNlY3JldC4gU2V0IGR1cmluZyBpbml0aWFsYXRpb24uXG4gICAqIEBhdHRyaWJ1dGUgYXBpS2V5XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqIEB0eXBlIFN0cmluZ1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYXBpS2V5OiAnJyxcblxuICAvKipcbiAgICogQGF0dHJpYnV0ZSBhcHBJZFxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKiBAdHlwZSBTdHJpbmdcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGFwcElkOiAnJyxcblxuICAvKipcbiAgICogVGhlIGRvbWFpbiB0aGF0IGFsbCB0aGUgYXBpIHJlcXVlc3RzIHdpbGwgZ28gdG9cbiAgICogQGF0dHJpYnV0ZSBkb21haW5cbiAgICogQGRlZmF1bHQgJydcbiAgICogQHR5cGUgU3RyaW5nXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBkb21haW46ICcnLFxuXG4gIC8qKlxuICAgKiBUaGUgc3ViZG9tYWluIG9mIG15c2hvcGlmeS5pbyB0aGF0IGFsbCB0aGUgYXBpIHJlcXVlc3RzIHdpbGwgZ28gdG9cbiAgICogQGF0dHJpYnV0ZSBteVNob3BpZnlEb21haW5cbiAgICogQGRlZmF1bHQgJydcbiAgICogQHR5cGUgU3RyaW5nXG4gICAqIEBwcml2YXRlXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgY29uZmlnLmRvbWFpbmAgaW5zdGVhZC5cbiAgICovXG4gIG15U2hvcGlmeURvbWFpbjogJycsXG5cbiAgLyoqXG4gICAqIEBhdHRyaWJ1dGUgYWpheEhlYWRlcnNcbiAgICogQGRlZmF1bHQge31cbiAgICogQHR5cGUgT2JqZWN0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhamF4SGVhZGVyczoge31cbn0pO1xuXG52YXIgdmVyc2lvbiA9ICd2MC42LjItYzhmNDM4Zic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxudmFyIEJhc2VNb2RlbCA9IENvcmVPYmplY3QuZXh0ZW5kKHtcbiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yKCkge1xuICAgIHZhciBhdHRycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIG1ldGFBdHRycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICB0aGlzLmF0dHJzID0gYXR0cnM7XG5cbiAgICBhc3NpZ24kMSh0aGlzLCBtZXRhQXR0cnMpO1xuICB9LFxuXG4gIGF0dHJzOiBudWxsLFxuICBzZXJpYWxpemVyOiBudWxsLFxuICBhZGFwdGVyOiBudWxsLFxuICBzaG9wQ2xpZW50OiBudWxsXG59KTtcblxuLyoqXG4gICogQ2xhc3MgZm9yIHByb2R1Y3Qgb3B0aW9uXG4gICogQGNsYXNzIFByb2R1Y3RPcHRpb25Nb2RlbFxuICAqIEBjb25zdHJ1Y3RvclxuKi9cbnZhciBQcm9kdWN0T3B0aW9uTW9kZWwgPSBCYXNlTW9kZWwuZXh0ZW5kKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHtcbiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXNbJ3N1cGVyJ10uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHRoaXMuc2VsZWN0ZWQgPSB0aGlzLnZhbHVlc1swXTtcbiAgfVxufSwge1xuICBuYW1lOiB7XG5cbiAgICAvKipcbiAgICAgICogbmFtZSBvZiBvcHRpb24uIEV4YW1wbGUgdmFsdWVzOiBgXCJTaXplXCJgLCBgXCJDb2xvclwiYCwgZXRjLlxuICAgICAgKiBAcHJvcGVydHkgbmFtZVxuICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICogQHR5cGUgU3RyaW5nXG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLm5hbWU7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICB2YWx1ZXM6IHtcblxuICAgIC8qKlxuICAgICAgKiBhbiBBcnJheSBwb3NzaWJsZSB2YWx1ZXMgZm9yIG9wdGlvbi4gRm9yIGluc3RhbmNlIGlmIHRoaXMgb3B0aW9uIGlzIGEgXCJTaXplXCIgb3B0aW9uIGFuIGV4YW1wbGUgdmFsdWVcbiAgICAgICogZm9yIHZhbHVlcyBjb3VsZCBiZTogYFtcIkxhcmdlXCIsIFwiTWVkaXVtXCIsIFwiU21hbGxcIl1gXG4gICAgICAqXG4gICAgICAqIEBwcm9wZXJ0eSB2YWx1ZXNcbiAgICAgICogQHJlYWRPbmx5XG4gICAgICAqIEB0eXBlIEFycmF5XG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLnZhbHVlcztcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIHNlbGVjdGVkOiB7XG5cbiAgICAvKipcbiAgICAgICogZ2V0L3NldCB0aGUgY3VycmVudGx5IHNlbGVjdGVkIG9wdGlvbiB2YWx1ZSB3aXRoIG9uZSBvZiB0aGUgdmFsdWVzIGZyb20gdGhlXG4gICAgICAqIHt7I2Nyb3NzTGluayBcIlByb2R1Y3RPcHRpb25Nb2RlbC92YWx1ZXNcIn19UHJvZHVjdE9wdGlvbk1vZGVsLnZhbHVlc3t7L2Nyb3NzTGlua319IGFycmF5LiBGb3JcbiAgICAgICogaW5zdGFuY2UgaWYgdGhlIG9wdGlvbiB2YWx1ZXMgYXJyYXkgaGFkIHRoZSBmb2xsb3dpbmcgYFtcIkxhcmdlXCIsIFwiTWVkaXVtXCIsIFwiU21hbGxcIl1gIHNldHRpbmcgYHNlbGVjdGVkYCB0byBiZVxuICAgICAgKiBgXCJMYXJnZVwiYCwgYFwiTWVkaXVtXCJgLCBvciBgXCJTbWFsbFwiYCB3b3VsZCBiZSB2YWxpZCBhbnkgb3RoZXIgdmFsdWUgd291bGQgdGhyb3cgYW4gYEVycm9yYC5cbiAgICAgICpcbiAgICAgICogQHByb3BlcnR5IHNlbGVjdGVkXG4gICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWQ7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgaWYgKGluY2x1ZGVzJDEodGhpcy52YWx1ZXMsIHZhbHVlKSkge1xuICAgICAgICB0aGlzLl9zZWxlY3RlZCA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG9wdGlvbiBzZWxlY3Rpb24gZm9yICcgKyB0aGlzLm5hbWUgKyAnLicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9XG59KSk7XG5cbnZhciB2YXJpYW50cyA9IFt7IG5hbWU6ICdwaWNvJywgZGltZW5zaW9uOiAnMTZ4MTYnIH0sIHsgbmFtZTogJ2ljb24nLCBkaW1lbnNpb246ICczMngzMicgfSwgeyBuYW1lOiAndGh1bWInLCBkaW1lbnNpb246ICc1MHg1MCcgfSwgeyBuYW1lOiAnc21hbGwnLCBkaW1lbnNpb246ICcxMDB4MTAwJyB9LCB7IG5hbWU6ICdjb21wYWN0JywgZGltZW5zaW9uOiAnMTYweDE2MCcgfSwgeyBuYW1lOiAnbWVkaXVtJywgZGltZW5zaW9uOiAnMjQweDI0MCcgfSwgeyBuYW1lOiAnbGFyZ2UnLCBkaW1lbnNpb246ICc0ODB4NDgwJyB9LCB7IG5hbWU6ICdncmFuZGUnLCBkaW1lbnNpb246ICc2MDB4NjAwJyB9LCB7IG5hbWU6ICcxMDI0eDEwMjQnLCBkaW1lbnNpb246ICcxMDI0eDEwMjQnIH0sIHsgbmFtZTogJzIwNDh4MjA0OCcsIGRpbWVuc2lvbjogJzIwNDh4MjA0OCcgfV07XG5cbnZhciBJbWFnZU1vZGVsID0gQ29yZU9iamVjdC5leHRlbmQoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoe1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IoYXR0cnMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIF90aGlzMltrZXldID0gYXR0cnNba2V5XTtcbiAgICB9KTtcbiAgfVxufSwge1xuICB2YXJpYW50czoge1xuXG4gICAgLyoqXG4gICAgICAqIEltYWdlIHZhcmlhbnRzIGF2YWlsYWJsZSBmb3IgYW4gaW1hZ2UuIEFuIGV4YW1wbGUgdmFsdWUgb2YgYGltYWdlVmFyaWFudGA6XG4gICAgICAqIGBgYFxuICAgICAgKiBbXG4gICAgICAqICAge1xuICAgICAgKiAgICAgXCJuYW1lXCI6IFwicGljb1wiLFxuICAgICAgKiAgICAgXCJkaW1lbnNpb25zXCI6IFwiMTZ4MTZcIixcbiAgICAgICogICAgIFwic3JjXCI6IFwiaHR0cHM6Ly9jZG4uc2hvcGlmeS5jb20vcy9maWxlcy8xLzEwMTkvMDQ5NS9wcm9kdWN0cy9hbGllbl8xNDZlZjdjMS0yNmU5LTRlOTYtOTZlNi05ZDM3MTI4ZDAwMDVfcGljby5qcGc/dj0xNDY5MDQ2NDIzXCJcbiAgICAgICogICB9LFxuICAgICAgKiAgIHtcbiAgICAgICogICAgIFwibmFtZVwiOiBcImNvbXBhY3RcIixcbiAgICAgICogICAgIFwiZGltZW5zaW9uc1wiOiBcIjE2MHgxNjBcIixcbiAgICAgICogICAgIFwic3JjXCI6IFwiaHR0cHM6Ly9jZG4uc2hvcGlmeS5jb20vcy9maWxlcy8xLzEwMTkvMDQ5NS9wcm9kdWN0cy9hbGllbl8xNDZlZjdjMS0yNmU5LTRlOTYtOTZlNi05ZDM3MTI4ZDAwMDVfY29tcGFjdC5qcGc/dj0xNDY5MDQ2NDIzXCJcbiAgICAgICogICB9XG4gICAgICAqIF1cbiAgICAgICogYGBgXG4gICAgICAqXG4gICAgICAqIEBhdHRyaWJ1dGUgdmFyaWFudHNcbiAgICAgICogQHR5cGUge0FycmF5fVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgc3JjID0gdGhpcy5zcmM7XG4gICAgICB2YXIgZXh0ZW5zaW9uSW5kZXggPSBzcmMubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgIHZhciBwYXRoQW5kQmFzZW5hbWUgPSBzcmMuc2xpY2UoMCwgZXh0ZW5zaW9uSW5kZXgpO1xuICAgICAgdmFyIGV4dGVuc2lvbiA9IHNyYy5zbGljZShleHRlbnNpb25JbmRleCk7XG5cbiAgICAgIHZhcmlhbnRzLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhbnQpIHtcbiAgICAgICAgdmFyaWFudC5zcmMgPSBwYXRoQW5kQmFzZW5hbWUgKyAnXycgKyB2YXJpYW50Lm5hbWUgKyBleHRlbnNpb247XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHZhcmlhbnRzO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfVxufSkpO1xuXG4vKipcbiAgKiBNb2RlbCBmb3IgcHJvZHVjdCB2YXJpYW50XG4gICogQGNsYXNzIFByb2R1Y3RWYXJpYW50TW9kZWxcbiAgKiBAY29uc3RydWN0b3JcbiovXG52YXIgUHJvZHVjdFZhcmlhbnRNb2RlbCA9IEJhc2VNb2RlbC5leHRlbmQoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoe1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IoKSB7XG4gICAgdGhpc1snc3VwZXInXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAgKiBHZXQgYSBjaGVja291dCB1cmwgZm9yIGEgc3BlY2lmaWMgcHJvZHVjdCB2YXJpYW50LiBZb3UgY2FuXG4gICAgKiBvcHRpb25hbGx5IHBhc3MgYSBxdWFudGl0eS4gSWYgbm8gcXVhbnRpdHkgaXMgcGFzc2VkIHRoZW4gcXVhbnRpdHlcbiAgICAqIHdpbGwgZGVmYXVsdCB0byAxLiBUaGUgZXhhbXBsZSBiZWxvdyB3aWxsIGdyYWIgYSBjaGVja291dCB1cmwgZm9yXG4gICAgKiAzIGNvcGllcyBvZiB0aGUgZmlyc3QgdmFyaWFudDpcbiAgICAqIGBgYFxuICAgICogY29uc3QgY2hlY2tvdXRVUkwgPSBwcm9kdWN0LnZhcmlhbnRzWyAwIF0uY2hlY2tvdXRVcmwoMyk7XG4gICAgKiBgYGBcbiAgICAqXG4gICAgKiBAbWV0aG9kIGNoZWNrb3V0VXJsXG4gICAgKiBAcGFyYW0ge051bWJlcn0gW3F1YW50aXR5ID0gMV0gcXVhbnRpdHkgb2YgdmFyaWFudHNcbiAgICAqIEBwdWJsaWNcbiAgICAqIEByZXR1cm4ge1N0cmluZ30gQ2hlY2tvdXQgVVJMXG4gICovXG4gIGNoZWNrb3V0VXJsOiBmdW5jdGlvbiBjaGVja291dFVybCgpIHtcbiAgICB2YXIgcXVhbnRpdHkgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDE7XG5cbiAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgdmFyIGJhc2VVcmwgPSAnaHR0cHM6Ly8nICsgY29uZmlnLmRvbWFpbiArICcvY2FydCc7XG5cbiAgICB2YXIgdmFyaWFudFBhdGggPSB0aGlzLmlkICsgJzonICsgcGFyc2VJbnQocXVhbnRpdHksIDEwKTtcblxuICAgIHZhciBxdWVyeSA9ICdhY2Nlc3NfdG9rZW49JyArIGNvbmZpZy5hcGlLZXkgKyAnJl9mZD0wJztcblxuICAgIHJldHVybiBiYXNlVXJsICsgJy8nICsgdmFyaWFudFBhdGggKyAnPycgKyBxdWVyeTtcbiAgfVxufSwge1xuICBpZDoge1xuXG4gICAgLyoqXG4gICAgICAqIFZhcmlhbnQgdW5pcXVlIElEXG4gICAgICAqIEBwcm9wZXJ0eSBpZFxuICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy52YXJpYW50LmlkO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgcHJvZHVjdElkOiB7XG5cbiAgICAvKipcbiAgICAgICogSUQgb2YgcHJvZHVjdCB2YXJpYW50IGJlbG9uZ3MgdG9cbiAgICAgICogQHByb3BlcnR5IHByb2R1Y3RJZFxuICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy5wcm9kdWN0LmlkO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgdGl0bGU6IHtcblxuICAgIC8qKlxuICAgICAgKiBUaXRsZSBvZiB2YXJpYW50XG4gICAgICAqIEBwcm9wZXJ0eSB0aXRsZVxuICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy52YXJpYW50LnRpdGxlO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgcHJvZHVjdFRpdGxlOiB7XG5cbiAgICAvKipcbiAgICAgICogVGl0bGUgb2YgcHJvZHVjdCB2YXJpYW50IGJlbG9uZ3MgdG9cbiAgICAgICogQHByb3BlcnR5IHByb2R1Y3RUaXRsZVxuICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy5wcm9kdWN0LnRpdGxlO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgY29tcGFyZUF0UHJpY2U6IHtcblxuICAgIC8qKlxuICAgICAgKiBDb21wYXJlIGF0IHByaWNlIGZvciB2YXJpYW50LiBUaGUgYGNvbXBhcmVBdFByaWNlYCB3b3VsZCBiZVxuICAgICAgKiB0aGUgcHJpY2Ugb2YgdGhlIHByb2R1Y3QgcHJldmlvdXNseSBiZWZvcmUgdGhlIHByb2R1Y3Qgd2VudCBvbiBzYWxlLiBGb3IgbW9yZSBpbmZvXG4gICAgICAqIGdvIDxhIGhyZWY9XCJodHRwczovL2RvY3Muc2hvcGlmeS5jb20vbWFudWFsL3Byb2R1Y3RzL3Byb21vdGluZy1tYXJrZXRpbmcvc2FsZXNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5oZXJlPC9hPi5cbiAgICAgICpcbiAgICAgICogSWYgbm8gYGNvbXBhcmVBdFByaWNlYCBpcyBzZXQgdGhlbiB0aGlzIHZhbHVlIHdpbGwgYmUgYG51bGxgLiBBbiBleGFtcGxlIHZhbHVlOiBgXCI1LjAwXCJgXG4gICAgICAqIEBwcm9wZXJ0eSBjb21wYXJlQXRQcmljZVxuICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy52YXJpYW50LmNvbXBhcmVfYXRfcHJpY2U7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBwcmljZToge1xuXG4gICAgLyoqXG4gICAgICAqIFByaWNlIG9mIHRoZSB2YXJpYW50LiBUaGUgcHJpY2Ugd2lsbCBiZSBpbiB0aGUgZm9sbG93aW5nIGZvcm06IGBcIjEwLjAwXCJgXG4gICAgICAqXG4gICAgICAqIEBwcm9wZXJ0eSBwcmljZVxuICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy52YXJpYW50LnByaWNlO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgZm9ybWF0dGVkUHJpY2U6IHtcblxuICAgIC8qKlxuICAgICAgKiBQcmljZSBvZiB2YXJpYW50LCBmb3JtYXR0ZWQgYWNjb3JkaW5nIHRvIHNob3AgY3VycmVuY3kgZm9ybWF0IHN0cmluZy5cbiAgICAgICogRm9yIGluc3RhbmNlIGBcIiQxMC4wMFwiYFxuICAgICAgKlxuICAgICAgKiBAcHJvcGVydHkgZm9ybWF0dGVkUHJpY2VcbiAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cnMudmFyaWFudC5mb3JtYXR0ZWRfcHJpY2U7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBncmFtczoge1xuXG4gICAgLyoqXG4gICAgICAqIFZhcmlhbnQgd2VpZ2h0IGluIGdyYW1zLiBJZiBubyB3ZWlnaHQgaXMgZGVmaW5lZCBncmFtcyB3aWxsIGJlIGAwYC5cbiAgICAgICogQHByb3BlcnR5IGdyYW1zXG4gICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLnZhcmlhbnQuZ3JhbXM7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBvcHRpb25WYWx1ZXM6IHtcblxuICAgIC8qKlxuICAgICAgKiBPcHRpb24gdmFsdWVzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHZhcmlhbnQuIEV4YW1wbGUgYG9wdGlvblZhbHVlc2A6XG4gICAgICAqIGBgYFxuICAgICAgKiBbXG4gICAgICAqICAge1xuICAgICAgKiAgICAgXCJuYW1lXCI6IFwiU2l6ZVwiLFxuICAgICAgKiAgICAgXCJvcHRpb25faWRcIjogOTE2NTMzNjUxOCxcbiAgICAgICogICAgIFwidmFsdWVcIjogXCJzbWFsbFwiXG4gICAgICAqICAgfSxcbiAgICAgICogICB7XG4gICAgICAqICAgICBcIm5hbWVcIjogXCJDb2xvclwiLFxuICAgICAgKiAgICAgXCJvcHRpb25faWRcIjogOTY0MDUzMjM1OCxcbiAgICAgICogICAgIFwidmFsdWVcIjogXCJibHVlXCJcbiAgICAgICogICB9XG4gICAgICAqIF1cbiAgICAgICogYGBgYFxuICAgICAgKlxuICAgICAgKiBAcHJvcGVydHkgb3B0aW9uVmFsdWVzXG4gICAgICAqIEB0eXBlIHtBcnJheXxPYmplY3R9XG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLnZhcmlhbnQub3B0aW9uX3ZhbHVlcztcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIGF2YWlsYWJsZToge1xuXG4gICAgLyoqXG4gICAgICAqIFZhcmlhbnQgaW4gc3RvY2suIEFsd2F5cyBgdHJ1ZWAgaWYgaW52ZW50b3J5IHRyYWNraW5nIGlzIGRpc2FibGVkLlxuICAgICAgKiBAcHJvcGVydHkgYXZhaWxhYmxlXG4gICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy52YXJpYW50LmF2YWlsYWJsZTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIGltYWdlOiB7XG5cbiAgICAvKipcbiAgICAgICogSW1hZ2UgZm9yIHZhcmlhbnQuIEFuIGV4YW1wbGUgaW1hZ2UgYE9iamVjdGA6XG4gICAgICAqIGBgYFxuICAgICAgKiB7XG4gICAgICAqICAgY3JlYXRlZF9hdDogXCIyMDE2LTA4LTI5VDEyOjM1OjA5LTA0OjAwXCIsXG4gICAgICAqICAgaWQ6IDE3NjkwNTUzMzUwLFxuICAgICAgKiAgIHBvc2l0aW9uOiAxLFxuICAgICAgKiAgIHByb2R1Y3RfaWQ6IDgyOTEwMjk0NDYsXG4gICAgICAqICAgc3JjOiBcImh0dHBzOi8vY2RuLnNob3BpZnkuY29tL3MvZmlsZXMvMS8xMDE5LzA0OTUvcHJvZHVjdHMvaTExX2MzMzM0MzI1LTJkNjctNDYyMy04Y2Q0LTBhNmIwOGFhMWI4My5qcGc/dj0xNDcyNDg4NTA5XCIsXG4gICAgICAqICAgdXBkYXRlZF9hdDogXCIyMDE2LTA4LTI5VDEyOjM1OjA5LTA0OjAwXCIsXG4gICAgICAqICAgdmFyaWFudF9pZHM6IFsgMjc2OTAxMDMyMzggXVxuICAgICAgKiB9XG4gICAgICAqIGBgYFxuICAgICAgKlxuICAgICAgKiBAcHJvcGVydHkgaW1hZ2VcbiAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIGlkID0gdGhpcy5pZDtcbiAgICAgIHZhciBpbWFnZXMgPSB0aGlzLmF0dHJzLnByb2R1Y3QuaW1hZ2VzO1xuXG4gICAgICB2YXIgcHJpbWFyeUltYWdlID0gaW1hZ2VzWzBdO1xuICAgICAgdmFyIHZhcmlhbnRJbWFnZSA9IGltYWdlcy5maWx0ZXIoZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgIHJldHVybiBpbWFnZS52YXJpYW50X2lkcy5pbmRleE9mKGlkKSAhPT0gLTE7XG4gICAgICB9KVswXTtcblxuICAgICAgdmFyIGltYWdlID0gdmFyaWFudEltYWdlIHx8IHByaW1hcnlJbWFnZTtcblxuICAgICAgaWYgKCFpbWFnZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBJbWFnZU1vZGVsKGltYWdlKTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIGltYWdlVmFyaWFudHM6IHtcblxuICAgIC8qKlxuICAgICAgKiBJbWFnZSB2YXJpYW50cyBhdmFpbGFibGUgZm9yIGEgdmFyaWFudC4gQW4gZXhhbXBsZSB2YWx1ZSBvZiBgaW1hZ2VWYXJpYW50YDpcbiAgICAgICogYGBgXG4gICAgICAqIFtcbiAgICAgICogICB7XG4gICAgICAqICAgICBcIm5hbWVcIjogXCJwaWNvXCIsXG4gICAgICAqICAgICBcImRpbWVuc2lvbnNcIjogXCIxNngxNlwiLFxuICAgICAgKiAgICAgXCJzcmNcIjogXCJodHRwczovL2Nkbi5zaG9waWZ5LmNvbS9zL2ZpbGVzLzEvMTAxOS8wNDk1L3Byb2R1Y3RzL2FsaWVuXzE0NmVmN2MxLTI2ZTktNGU5Ni05NmU2LTlkMzcxMjhkMDAwNV9waWNvLmpwZz92PTE0NjkwNDY0MjNcIlxuICAgICAgKiAgIH0sXG4gICAgICAqICAge1xuICAgICAgKiAgICAgXCJuYW1lXCI6IFwiY29tcGFjdFwiLFxuICAgICAgKiAgICAgXCJkaW1lbnNpb25zXCI6IFwiMTYweDE2MFwiLFxuICAgICAgKiAgICAgXCJzcmNcIjogXCJodHRwczovL2Nkbi5zaG9waWZ5LmNvbS9zL2ZpbGVzLzEvMTAxOS8wNDk1L3Byb2R1Y3RzL2FsaWVuXzE0NmVmN2MxLTI2ZTktNGU5Ni05NmU2LTlkMzcxMjhkMDAwNV9jb21wYWN0LmpwZz92PTE0NjkwNDY0MjNcIlxuICAgICAgKiAgIH1cbiAgICAgICogXVxuICAgICAgKiBgYGBcbiAgICAgICpcbiAgICAgICogQHByb3BlcnR5IGltYWdlVmFyaWFudFxuICAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIGlmICghdGhpcy5pbWFnZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmltYWdlLnZhcmlhbnRzO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfVxufSkpO1xuXG52YXIgdW5pcSA9IGZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgcmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbiAodW5pcXVlQXJyYXksIGl0ZW0pIHtcbiAgICBpZiAodW5pcXVlQXJyYXkuaW5kZXhPZihpdGVtKSA8IDApIHtcbiAgICAgIHVuaXF1ZUFycmF5LnB1c2goaXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuaXF1ZUFycmF5O1xuICB9LCBbXSk7XG59O1xuXG52YXIgTk9fSU1BR0VfVVJJID0gJ2h0dHBzOi8vd2lkZ2V0cy5zaG9waWZ5YXBwcy5jb20vYXNzZXRzL25vLWltYWdlLnN2Zyc7XG5cbi8qKlxuICAgKiBDbGFzcyBmb3IgcHJvZHVjdHMgcmV0dXJuZWQgYnkgZmV0Y2goJ3Byb2R1Y3QnKVxuICAgKiBAY2xhc3MgUHJvZHVjdE1vZGVsXG4gICAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgUHJvZHVjdE1vZGVsID0gQmFzZU1vZGVsLmV4dGVuZChPYmplY3QuZGVmaW5lUHJvcGVydGllcyh7XG4gIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzWydzdXBlciddLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbn0sIHtcbiAgaWQ6IHtcblxuICAgIC8qKlxuICAgICAgKiBQcm9kdWN0IHVuaXF1ZSBJRFxuICAgICAgKlxuICAgICAgKiBAcHJvcGVydHkgaWRcbiAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cnMucHJvZHVjdF9pZDtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIHRpdGxlOiB7XG5cbiAgICAvKipcbiAgICAgICogVGhlIHByb2R1Y3QgdGl0bGVcbiAgICAgICogQHByb3BlcnR5IHRpdGxlXG4gICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLnRpdGxlO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgZGVzY3JpcHRpb246IHtcblxuICAgIC8qKlxuICAgICAgKiBBIHByb2R1Y3QgZGVzY3JpcHRpb24uXG4gICAgICAqIEBwcm9wZXJ0eSBkZXNjcmlwdGlvblxuICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy5ib2R5X2h0bWw7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBpbWFnZXM6IHtcblxuICAgIC8qKlxuICAgICAgKiBBbiBgQXJyYXlgIG9mIGBPYmplY3RzYCB0aGF0IGNvbnRhaW4gbWV0YSBkYXRhIGFib3V0IGFuIGltYWdlIGluY2x1ZGluZyBgc3JjYCBvZiB0aGUgaW1hZ2VzLlxuICAgICAgKlxuICAgICAgKiBBbiBleGFtcGxlIGltYWdlIGBPYmplY3RgOlxuICAgICAgKiBgYGBcbiAgICAgICoge1xuICAgICAgKiAgIGNyZWF0ZWRfYXQ6IFwiMjAxNi0wOC0yOVQxMjozNTowOS0wNDowMFwiLFxuICAgICAgKiAgIGlkOiAxNzY5MDU1MzM1MCxcbiAgICAgICogICBwb3NpdGlvbjogMSxcbiAgICAgICogICBwcm9kdWN0X2lkOiA4MjkxMDI5NDQ2LFxuICAgICAgKiAgIHNyYzogXCJodHRwczovL2Nkbi5zaG9waWZ5LmNvbS9zL2ZpbGVzLzEvMTAxOS8wNDk1L3Byb2R1Y3RzL2kxMV9jMzMzNDMyNS0yZDY3LTQ2MjMtOGNkNC0wYTZiMDhhYTFiODMuanBnP3Y9MTQ3MjQ4ODUwOVwiLFxuICAgICAgKiAgIHVwZGF0ZWRfYXQ6IFwiMjAxNi0wOC0yOVQxMjozNTowOS0wNDowMFwiLFxuICAgICAgKiAgIHZhcmlhbnRfaWRzOiBbIDI3NjkwMTAzMjM4IF1cbiAgICAgICogfVxuICAgICAgKiBgYGBcbiAgICAgICogQHByb3BlcnR5IGltYWdlc1xuICAgICAgKiBAdHlwZSB7QXJyYXl9IGFycmF5IG9mIGltYWdlIG9iamVjdHMuXG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLmltYWdlcy5tYXAoZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgSW1hZ2VNb2RlbChpbWFnZSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIG1lbW9pemVkOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB0aGlzLl9tZW1vaXplZCA9IHRoaXMuX21lbW9pemVkIHx8IHt9O1xuXG4gICAgICByZXR1cm4gdGhpcy5fbWVtb2l6ZWQ7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBvcHRpb25zOiB7XG5cbiAgICAvKipcbiAgICAgKiAgR2V0IGFuIGFycmF5IG9mIHt7I2Nyb3NzTGluayBcIlByb2R1Y3RPcHRpb25Nb2RlbFwifX1Qcm9kdWN0T3B0aW9uTW9kZWxze3svY3Jvc3NMaW5rfX0uXG4gICAgICogIHt7I2Nyb3NzTGluayBcIlByb2R1Y3RPcHRpb25Nb2RlbFwifX1Qcm9kdWN0T3B0aW9uTW9kZWxze3svY3Jvc3NMaW5rfX0gY2FuIGJlIHVzZWQgdG9cbiAgICAgKiAgZGVmaW5lIHRoZSBjdXJyZW50bHkgYHNlbGVjdGVkVmFyaWFudGAgZnJvbSB3aGljaCB5b3UgY2FuIGdldCBhIGNoZWNrb3V0IHVybFxuICAgICAqICAoe3sjY3Jvc3NMaW5rIFwiUHJvZHVjdFZhcmlhbnRNb2RlbC9jaGVja291dFVybFwifX1Qcm9kdWN0VmFyaWFudE1vZGVsLmNoZWNrb3V0VXJse3svY3Jvc3NMaW5rfX0pIG9yIGNhblxuICAgICAqICBiZSBhZGRlZCB0byBhIGNhcnQgKHt7I2Nyb3NzTGluayBcIkNhcnRNb2RlbC9jcmVhdGVMaW5lSXRlbXNGcm9tVmFyaWFudHNcIn19Q2FydE1vZGVsLmNyZWF0ZUxpbmVJdGVtc0Zyb21WYXJpYW50c3t7L2Nyb3NzTGlua319KS5cbiAgICAgKlxuICAgICAqICBCZWxvdyBpcyBhbiBleGFtcGxlIG9uIGhvdyB0byBjcmVhdGUgaHRtbCBmb3Igb3B0aW9uIHNlbGVjdGlvbnM6XG4gICAgICogYGBgamF2YXNjcmlwdFxuICAgICAqICAvLyB0aGUgZm9sbG93aW5nIHdpbGwgY3JlYXRlIGFuIEFycmF5IG9mIEhUTUwgdG8gY3JlYXRlIG11bHRpcGxlIHNlbGVjdCBpbnB1dHNcbiAgICAgKiAgLy8gZ2xvYmFsIGNhbGxiYWNrcyBhcmUgYWxzbyBjcmVhdGVkIHdoaWNoIHdpbGwgc2V0IHRoZSBvcHRpb24gYXMgc2VsZWN0ZWRcbiAgICAgKiAgdmFyIGVsZW1lbnRzID0gcHJvZHVjdC5vcHRpb25zLm1hcChmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgKiAgICAvLyB3ZSdsbCBjcmVhdGUgYSBjYWxsYmFjayBpbiBnbG9iYWwgc2NvcGVcbiAgICAgKiAgICAvLyB3aGljaCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBzZWxlY3QncyB2YWx1ZSBjaGFuZ2VzXG4gICAgICogICAgdmFyIGNhbGxCYWNrTmFtZSA9IG9wdGlvbi5uYW1lICsgJ29uQ2hhbmdlJztcbiAgICAgKiAgICB3aW5kb3dbIGNhbGxCYWNrTmFtZSBdID0gZnVuY3Rpb24oc2VsZWN0KSB7XG4gICAgICogICAgICAvLyBzZXQgdGhlIHByb2R1Y3RzIG9wdGlvbiB0byBiZSBzZWxlY3RlZFxuICAgICAqICAgICAgb3B0aW9uLnNlbGVjdGVkID0gc2VsZWN0LnZhbHVlO1xuICAgICAqICAgIH07XG4gICAgICpcbiAgICAgKiAgICAvLyByZXR1cm4gYSBzdHJpbmcgd2hpY2ggd2lsbCBiZSBIVE1MIGZvciB0aGUgc2VsZWN0XG4gICAgICogICAgcmV0dXJuICc8c2VsZWN0IG5hbWU9XCInICsgb3B0aW9uLm5hbWUgKyAnXCIgb25jaGFuZ2U9XCInY2FsbEJhY2tOYW1lJyh0aGlzKVwiPicgKyBvcHRpb24udmFsdWVzLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgICAgcmV0dXJuICc8b3B0aW9uIHZhbHVlPVwiJyArIHZhbHVlICsgJ1wiPicgKyB2YWx1ZSArICc8L29wdGlvbj4nO1xuICAgICAqICAgIH0pICsgJzwvc2VsZWN0Pic7XG4gICAgICogIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHByb3BlcnR5IG9wdGlvbnNcbiAgICAgKiBAdHlwZSB7QXJyYXl8UHJvZHVjdE9wdGlvbk1vZGVsfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKHRoaXMubWVtb2l6ZWQub3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5tZW1vaXplZC5vcHRpb25zO1xuICAgICAgfVxuXG4gICAgICB2YXIgYmFzZU9wdGlvbnMgPSB0aGlzLmF0dHJzLm9wdGlvbnM7XG4gICAgICB2YXIgdmFyaWFudHMkJDEgPSB0aGlzLnZhcmlhbnRzO1xuXG4gICAgICB0aGlzLm1lbW9pemVkLm9wdGlvbnMgPSBiYXNlT3B0aW9ucy5tYXAoZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICB2YXIgbmFtZSA9IG9wdGlvbi5uYW1lO1xuXG4gICAgICAgIHZhciBkdXBlZFZhbHVlcyA9IHZhcmlhbnRzJCQxLnJlZHVjZShmdW5jdGlvbiAodmFsdWVMaXN0LCB2YXJpYW50KSB7XG4gICAgICAgICAgdmFyIG9wdGlvblZhbHVlRm9yT3B0aW9uID0gdmFyaWFudC5vcHRpb25WYWx1ZXMuZmlsdGVyKGZ1bmN0aW9uIChvcHRpb25WYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvblZhbHVlLm5hbWUgPT09IG9wdGlvbi5uYW1lO1xuICAgICAgICAgIH0pWzBdO1xuXG4gICAgICAgICAgdmFsdWVMaXN0LnB1c2gob3B0aW9uVmFsdWVGb3JPcHRpb24udmFsdWUpO1xuXG4gICAgICAgICAgcmV0dXJuIHZhbHVlTGlzdDtcbiAgICAgICAgfSwgW10pO1xuXG4gICAgICAgIHZhciB2YWx1ZXMgPSB1bmlxKGR1cGVkVmFsdWVzKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb2R1Y3RPcHRpb25Nb2RlbCh7IG5hbWU6IG5hbWUsIHZhbHVlczogdmFsdWVzIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB0aGlzLm1lbW9pemVkLm9wdGlvbnM7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICB2YXJpYW50czoge1xuXG4gICAgLyoqXG4gICAgICAqIEFuIGBBcnJheWAgb2Yge3sjY3Jvc3NMaW5rIFwiUHJvZHVjdFZhcmlhbnRNb2RlbFwifX1Qcm9kdWN0VmFyaWFudE1vZGVsJ3N7ey9jcm9zc0xpbmt9fVxuICAgICAgKiBAcHJvcGVydHkgdmFyaWFudHNcbiAgICAgICogQHR5cGUge0FycmF5fFByb2R1Y3RWYXJpYW50TW9kZWx9IGFycmF5IG9mIFByb2R1Y3RWYXJpYW50TW9kZWwgaW5zdGFuY2VzLlxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgcmV0dXJuIHRoaXMuYXR0cnMudmFyaWFudHMubWFwKGZ1bmN0aW9uICh2YXJpYW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvZHVjdFZhcmlhbnRNb2RlbCh7IHZhcmlhbnQ6IHZhcmlhbnQsIHByb2R1Y3Q6IF90aGlzMyB9LCB7IGNvbmZpZzogX3RoaXMzLmNvbmZpZyB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgc2VsZWN0aW9uczoge1xuXG4gICAgLyoqXG4gICAgICAqIEEgcmVhZCBvbmx5IGBBcnJheWAgb2YgU3RyaW5ncyByZXByZXNlbnRlZCBjdXJyZW50bHkgc2VsZWN0ZWQgb3B0aW9uIHZhbHVlcy4gZWcuIGBbXCJMYXJnZVwiLCBcIlJlZFwiXWBcbiAgICAgICogQHByb3BlcnR5IHNlbGVjdGlvbnNcbiAgICAgICogQHR5cGUge0FycmF5IHwgU3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLm1hcChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgIHJldHVybiBvcHRpb24uc2VsZWN0ZWQ7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIHNlbGVjdGVkVmFyaWFudDoge1xuXG4gICAgLyoqXG4gICAgICAqIFJldHJpZXZlIHZhcmlhbnQgZm9yIGN1cnJlbnRseSBzZWxlY3RlZCBvcHRpb25zLiBCeSBkZWZhdWx0IHRoZSBmaXJzdCB2YWx1ZSBpbiBlYWNoXG4gICAgICAqIG9wdGlvbiBpcyBzZWxlY3RlZCB3aGljaCBtZWFucyBgc2VsZWN0ZWRWYXJpYW50YCB3aWxsIG5ldmVyIGJlIGBudWxsYC5cbiAgICAgICpcbiAgICAgICogV2l0aCBhIGBzZWxlY3RlZFZhcmlhbnRgIHlvdSBjYW4gY3JlYXRlIGNoZWNrb3V0IHVybFxuICAgICAgKiAoe3sjY3Jvc3NMaW5rIFwiUHJvZHVjdFZhcmlhbnRNb2RlbC9jaGVja291dFVybFwifX1Qcm9kdWN0VmFyaWFudE1vZGVsLmNoZWNrb3V0VXJse3svY3Jvc3NMaW5rfX0pIG9yIGl0IGNhblxuICAgICAgKiBiZSBhZGRlZCB0byBhIGNhcnQgKHt7I2Nyb3NzTGluayBcIkNhcnRNb2RlbC9jcmVhdGVMaW5lSXRlbXNGcm9tVmFyaWFudHNcIn19Q2FydE1vZGVsLmNyZWF0ZUxpbmVJdGVtc0Zyb21WYXJpYW50c3t7L2Nyb3NzTGlua319KS5cbiAgICAgICpcbiAgICAgICogQHByb3BlcnR5IHNlbGVjdGVkVmFyaWFudFxuICAgICAgKiBAdHlwZSB7UHJvZHVjdFZhcmlhbnRNb2RlbH1cbiAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIHZhcmlhbnRUaXRsZSA9IHRoaXMuc2VsZWN0aW9ucy5qb2luKCcgLyAnKTtcblxuICAgICAgcmV0dXJuIHRoaXMudmFyaWFudHMuZmlsdGVyKGZ1bmN0aW9uICh2YXJpYW50KSB7XG4gICAgICAgIHJldHVybiB2YXJpYW50LnRpdGxlID09PSB2YXJpYW50VGl0bGU7XG4gICAgICB9KVswXSB8fCBudWxsO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgc2VsZWN0ZWRWYXJpYW50SW1hZ2U6IHtcblxuICAgIC8qKlxuICAgICAgKiBSZXRyaWV2ZSBpbWFnZSBmb3IgY3VycmVudGx5IHNlbGVjdGVkIHZhcmlhbnRJbWFnZS4gQW4gZXhhbXBsZSBpbWFnZSBPYmplY3Qgd291bGQgbG9vayBsaWtlIHRoaXM6XG4gICAgICAqIGBgYFxuICAgICAgKiB7XG4gICAgICAqICAgY3JlYXRlZF9hdDogXCIyMDE2LTA4LTI5VDEyOjM1OjA5LTA0OjAwXCIsXG4gICAgICAqICAgaWQ6IDE3NjkwNTUzMzUwLFxuICAgICAgKiAgIHBvc2l0aW9uOiAxLFxuICAgICAgKiAgIHByb2R1Y3RfaWQ6IDgyOTEwMjk0NDYsXG4gICAgICAqICAgc3JjOiBcImh0dHBzOi8vY2RuLnNob3BpZnkuY29tL3MvZmlsZXMvMS8xMDE5LzA0OTUvcHJvZHVjdHMvaTExX2MzMzM0MzI1LTJkNjctNDYyMy04Y2Q0LTBhNmIwOGFhMWI4My5qcGc/dj0xNDcyNDg4NTA5XCIsXG4gICAgICAqICAgdXBkYXRlZF9hdDogXCIyMDE2LTA4LTI5VDEyOjM1OjA5LTA0OjAwXCIsXG4gICAgICAqICAgdmFyaWFudF9pZHM6IFsgMjc2OTAxMDMyMzggXVxuICAgICAgKiB9XG4gICAgICAqIGBgYFxuICAgICAgKlxuICAgICAgKiBAcHJvcGVydHkgc2VsZWN0ZWRWYXJpYW50SW1hZ2VcbiAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKCF0aGlzLnNlbGVjdGVkVmFyaWFudCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRWYXJpYW50LmltYWdlO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfVxufSkpO1xuXG52YXIgTGlzdGluZ3NTZXJpYWxpemVyID0gQ29yZU9iamVjdC5leHRlbmQoe1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gIH0sXG4gIHJvb3RLZXlGb3JUeXBlOiBmdW5jdGlvbiByb290S2V5Rm9yVHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUuc2xpY2UoMCwgLTEpICsgJ19saXN0aW5nJztcbiAgfSxcblxuXG4gIG1vZGVsczoge1xuICAgIGNvbGxlY3Rpb25zOiBCYXNlTW9kZWwsXG4gICAgcHJvZHVjdHM6IFByb2R1Y3RNb2RlbFxuICB9LFxuXG4gIG1vZGVsRm9yVHlwZTogZnVuY3Rpb24gbW9kZWxGb3JUeXBlKHR5cGUpIHtcbiAgICByZXR1cm4gdGhpcy5tb2RlbHNbdHlwZV07XG4gIH0sXG4gIGRlc2VyaWFsaXplU2luZ2xlOiBmdW5jdGlvbiBkZXNlcmlhbGl6ZVNpbmdsZSh0eXBlKSB7XG4gICAgdmFyIHNpbmdsZVBheWxvYWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtZXRhQXR0cnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gICAgdmFyIG1vZGVsQXR0cnMgPSBzaW5nbGVQYXlsb2FkW3RoaXMucm9vdEtleUZvclR5cGUodHlwZSldO1xuICAgIHZhciBtb2RlbCA9IHRoaXMubW9kZWxGcm9tQXR0cnModHlwZSwgbW9kZWxBdHRycywgbWV0YUF0dHJzKTtcblxuICAgIHJldHVybiBtb2RlbDtcbiAgfSxcbiAgZGVzZXJpYWxpemVNdWx0aXBsZTogZnVuY3Rpb24gZGVzZXJpYWxpemVNdWx0aXBsZSh0eXBlKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgY29sbGVjdGlvblBheWxvYWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtZXRhQXR0cnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gICAgdmFyIG1vZGVscyA9IGNvbGxlY3Rpb25QYXlsb2FkW3RoaXMucm9vdEtleUZvclR5cGUodHlwZSkgKyAncyddO1xuXG4gICAgcmV0dXJuIG1vZGVscy5tYXAoZnVuY3Rpb24gKGF0dHJzKSB7XG4gICAgICB2YXIgbW9kZWwgPSBfdGhpczQubW9kZWxGcm9tQXR0cnModHlwZSwgYXR0cnMsIG1ldGFBdHRycyk7XG5cbiAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9KTtcbiAgfSxcbiAgbW9kZWxGcm9tQXR0cnM6IGZ1bmN0aW9uIG1vZGVsRnJvbUF0dHJzKHR5cGUsIGF0dHJzLCBtZXRhQXR0cnMpIHtcbiAgICB2YXIgTW9kZWwgPSB0aGlzLm1vZGVsRm9yVHlwZSh0eXBlKTtcblxuICAgIG1ldGFBdHRycy5jb25maWcgPSB0aGlzLmNvbmZpZztcblxuICAgIHJldHVybiBuZXcgTW9kZWwoYXR0cnMsIG1ldGFBdHRycyk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBhdXRoVG9VcmwodXJsLCBvcHRzKSB7XG4gIHZhciBhdXRob3JpemF0aW9uID0gdm9pZCAwO1xuXG4gIGlmIChvcHRzLmhlYWRlcnMpIHtcbiAgICBPYmplY3Qua2V5cyhvcHRzLmhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKGtleS50b0xvd2VyQ2FzZSgpID09PSAnYXV0aG9yaXphdGlvbicpIHtcbiAgICAgICAgYXV0aG9yaXphdGlvbiA9IG9wdHMuaGVhZGVyc1trZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGF1dGhvcml6YXRpb24pIHtcbiAgICB2YXIgaGFzaGVkS2V5ID0gYXV0aG9yaXphdGlvbi5zcGxpdCgnICcpLnNsaWNlKC0xKVswXTtcblxuICAgIHRyeSB7XG4gICAgICB2YXIgcGxhaW5LZXkgPSBhdG9iKGhhc2hlZEtleSk7XG5cbiAgICAgIHZhciBuZXdVcmwgPSB2b2lkIDA7XG5cbiAgICAgIGlmICh1cmwuaW5kZXhPZignPycpID4gLTEpIHtcbiAgICAgICAgbmV3VXJsID0gdXJsICsgJyZfeF9odHRwX2F1dGhvcml6YXRpb249JyArIHBsYWluS2V5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VXJsID0gdXJsICsgJz9feF9odHRwX2F1dGhvcml6YXRpb249JyArIHBsYWluS2V5O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3VXJsO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGF0b2IgY2hva2VkIG9uIG5vbi1lbmNvZGVkIGRhdGEuIFRoZXJlZm9yZSwgbm90IGEgZm9ybSBvZiBhdXRoIHdlXG4gICAgICAvLyBzdXBwb3J0LlxuICAgICAgLy9cbiAgICAgIC8vIE5PT1BcbiAgICAgIC8vXG4gICAgfVxuICB9XG5cbiAgLyogZXNsaW50IG5ld2xpbmUtYmVmb3JlLXJldHVybjogMCAqL1xuICByZXR1cm4gdXJsO1xufVxuXG5mdW5jdGlvbiBpZTlBamF4KG1ldGhvZCwgdXJsLCBvcHRzKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHhkciA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuXG4gICAgeGRyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZSh4ZHIucmVzcG9uc2VUZXh0KTtcblxuICAgICAgICByZXNvbHZlKHsganNvbjoganNvbiwgb3JpZ2luYWxSZXNwb25zZTogeGRyLCBpc0pTT046IHRydWUgfSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc29sdmUoeyB0ZXh0OiB4ZHIucmVzcG9uc2VUZXh0LCBvcmlnaW5hbFJlc3BvbnNlOiB4ZHIsIGlzVGV4dDogdHJ1ZSB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdUaGVyZSB3YXMgYW4gZXJyb3Igd2l0aCB0aGUgWERSJykpO1xuICAgIH1cblxuICAgIHhkci5vbmVycm9yID0gaGFuZGxlRXJyb3I7XG4gICAgeGRyLm9udGltZW91dCA9IGhhbmRsZUVycm9yO1xuXG4gICAgeGRyLm9wZW4obWV0aG9kLCBhdXRoVG9VcmwodXJsLCBvcHRzKSk7XG4gICAgeGRyLnNlbmQob3B0cy5kYXRhKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzTm9kZUxpa2VFbnZpcm9ubWVudCgpIHtcbiAgdmFyIHdpbmRvd0Fic2VudCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnO1xuICB2YXIgcmVxdWlyZVByZXNlbnQgPSB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJztcblxuICByZXR1cm4gd2luZG93QWJzZW50ICYmIHJlcXVpcmVQcmVzZW50O1xufVxuXG5mdW5jdGlvbiBjaGVja1N0YXR1cyhyZXNwb25zZSkge1xuICBpZiAocmVzcG9uc2Uuc3RhdHVzID49IDIwMCAmJiByZXNwb25zZS5zdGF0dXMgPCAzMDApIHtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cblxuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG5cbiAgZXJyb3Iuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICB0aHJvdyBlcnJvcjtcbn1cblxuZnVuY3Rpb24gcGFyc2VSZXNwb25zZShyZXNwb25zZSkge1xuICByZXR1cm4gcmVzcG9uc2UuanNvbigpLnRoZW4oZnVuY3Rpb24gKGpzb24pIHtcbiAgICByZXR1cm4geyBqc29uOiBqc29uLCBvcmlnaW5hbFJlc3BvbnNlOiByZXNwb25zZSwgaXNKU09OOiB0cnVlIH07XG4gIH0pWydjYXRjaCddKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzcG9uc2VDbG9uZSA9IHJlc3BvbnNlLmNsb25lKCk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2VDbG9uZS50ZXh0KCkudGhlbihmdW5jdGlvbiAodGV4dCkge1xuICAgICAgcmV0dXJuIHsgdGV4dDogdGV4dCwgb3JpZ2luYWxSZXNwb25zZTogcmVzcG9uc2VDbG9uZSwgaXNUZXh0OiB0cnVlIH07XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhamF4KG1ldGhvZCwgdXJsKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICAvLyB3ZSBuZWVkIHRvIGNoZWNrIHRoYXQgd2UncmUgbm90IHJ1bm5pbmcgaW4gTm9kZVxuICAvLyBiZWZvcmUgd2Ugc2hvdWxkIGNoZWNrIGlmIHRoaXMgaXMgaWU5XG4gIGlmICghaXNOb2RlTGlrZUVudmlyb25tZW50KCkpIHtcbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICBpZiAoISgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpKSB7XG4gICAgICByZXR1cm4gaWU5QWpheC5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgb3B0cy5tZXRob2QgPSBtZXRob2Q7XG4gIG9wdHMubW9kZSA9ICdjb3JzJztcblxuICByZXR1cm4gZmV0Y2godXJsLCBvcHRzKS50aGVuKGNoZWNrU3RhdHVzKS50aGVuKHBhcnNlUmVzcG9uc2UpO1xufVxuXG52YXIgTGlzdGluZ3NBZGFwdGVyID0gQ29yZU9iamVjdC5leHRlbmQoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoe1xuICBhamF4OiBhamF4LFxuXG4gIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgfSxcbiAgcGF0aEZvclR5cGU6IGZ1bmN0aW9uIHBhdGhGb3JUeXBlKHR5cGUpIHtcbiAgICByZXR1cm4gJy8nICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnX2xpc3RpbmdzJztcbiAgfSxcbiAgYnVpbGRVcmw6IGZ1bmN0aW9uIGJ1aWxkVXJsKHNpbmdsZU9yTXVsdGlwbGUsIHR5cGUsIGlkT3JRdWVyeSkge1xuICAgIHN3aXRjaCAoc2luZ2xlT3JNdWx0aXBsZSkge1xuICAgICAgY2FzZSAnbXVsdGlwbGUnOlxuICAgICAgICByZXR1cm4gdGhpcy5idWlsZE11bHRpcGxlVXJsKHR5cGUsIGlkT3JRdWVyeSk7XG4gICAgICBjYXNlICdzaW5nbGUnOlxuICAgICAgICByZXR1cm4gdGhpcy5idWlsZFNpbmdsZVVybCh0eXBlLCBpZE9yUXVlcnkpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfSxcbiAgYnVpbGRNdWx0aXBsZVVybDogZnVuY3Rpb24gYnVpbGRNdWx0aXBsZVVybCh0eXBlKSB7XG4gICAgdmFyIHF1ZXJ5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIHZhciB1cmwgPSAnJyArIHRoaXMuYmFzZVVybCArIHRoaXMucGF0aEZvclR5cGUodHlwZSk7XG4gICAgdmFyIHBhcmFtTmFtZXMgPSBPYmplY3Qua2V5cyhxdWVyeSk7XG5cbiAgICBpZiAocGFyYW1OYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgcXVlcnlTdHJpbmcgPSBwYXJhbU5hbWVzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHZvaWQgMDtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShxdWVyeVtrZXldKSkge1xuICAgICAgICAgIHZhbHVlID0gcXVlcnlba2V5XS5qb2luKCcsJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBxdWVyeVtrZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGtleSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gICAgICB9KS5qb2luKCcmJyk7XG5cbiAgICAgIHJldHVybiB1cmwgKyAnPycgKyBxdWVyeVN0cmluZztcbiAgICB9XG5cbiAgICByZXR1cm4gdXJsO1xuICB9LFxuICBidWlsZFNpbmdsZVVybDogZnVuY3Rpb24gYnVpbGRTaW5nbGVVcmwodHlwZSwgaWQpIHtcbiAgICByZXR1cm4gJycgKyB0aGlzLmJhc2VVcmwgKyB0aGlzLnBhdGhGb3JUeXBlKHR5cGUpICsgJy8nICsgaWQ7XG4gIH0sXG4gIGZldGNoTXVsdGlwbGU6IGZ1bmN0aW9uIGZldGNoTXVsdGlwbGUoKSAvKiB0eXBlLCBbcXVlcnldICove1xuICAgIHZhciB1cmwgPSB0aGlzLmJ1aWxkVXJsLmFwcGx5KHRoaXMsIFsnbXVsdGlwbGUnXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuXG4gICAgcmV0dXJuIHRoaXMuYWpheCgnR0VUJywgdXJsLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb247XG4gICAgfSk7XG4gIH0sXG4gIGZldGNoU2luZ2xlOiBmdW5jdGlvbiBmZXRjaFNpbmdsZSgpIC8qIHR5cGUsIGlkICove1xuICAgIHZhciB1cmwgPSB0aGlzLmJ1aWxkVXJsLmFwcGx5KHRoaXMsIFsnc2luZ2xlJ10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcblxuICAgIHJldHVybiB0aGlzLmFqYXgoJ0dFVCcsIHVybCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5qc29uO1xuICAgIH0pO1xuICB9XG59LCB7XG4gIGJhc2U2NEFwaUtleToge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGJ0b2EodGhpcy5jb25maWcuYXBpS2V5KTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIGJhc2VVcmw6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBfY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgICB2YXIgZG9tYWluID0gX2NvbmZpZy5kb21haW47XG4gICAgICB2YXIgYXBwSWQgPSBfY29uZmlnLmFwcElkO1xuXG5cbiAgICAgIHJldHVybiAnaHR0cHM6Ly8nICsgZG9tYWluICsgJy9hcGkvYXBwcy8nICsgYXBwSWQ7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBoZWFkZXJzOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gYXNzaWduJDEoe30sIHtcbiAgICAgICAgQXV0aG9yaXphdGlvbjogJ0Jhc2ljICcgKyB0aGlzLmJhc2U2NEFwaUtleSxcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ1gtU0RLLVZhcmlhbnQnOiAnamF2YXNjcmlwdCcsXG4gICAgICAgICdYLVNESy1WZXJzaW9uJzogdmVyc2lvblxuXG4gICAgICB9LCB0aGlzLmNvbmZpZy5hamF4SGVhZGVycyk7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9XG59KSk7XG5cbnZhciBHVUlEX0tFWSA9ICdzaG9waWZ5LWJ1eS11dWlkJztcblxuLyoqXG4gKiBBIGNhcnQgc3RvcmVzIGFuIEFycmF5IG9mIGBDYXJ0TGluZUl0ZW1Nb2RlbGAncyBpbiBpdCdzIGBsaW5lSXRlbXNgIHByb3BlcnR5LlxuICogQGNsYXNzIENhcnRMaW5lSXRlbU1vZGVsXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIENhcnRMaW5lSXRlbU1vZGVsID0gQmFzZU1vZGVsLmV4dGVuZChPYmplY3QuZGVmaW5lUHJvcGVydGllcyh7XG4gIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzWydzdXBlciddLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbn0sIHtcbiAgaWQ6IHtcblxuICAgIC8qKlxuICAgICAqIEEgbGluZSBpdGVtIElELlxuICAgICAqIEBwcm9wZXJ0eSBpZFxuICAgICAqIEByZWFkT25seVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyc1tHVUlEX0tFWV07XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICB2YXJpYW50X2lkOiB7XG5cbiAgICAvKipcbiAgICAgKiBJRCBvZiBsaW5lIGl0ZW0gdmFyaWFudC5cbiAgICAgKiBAcHJvcGVydHkgdmFyaWFudF9pZFxuICAgICAqIEByZWFkT25seVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy52YXJpYW50X2lkO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgcHJvZHVjdF9pZDoge1xuXG4gICAgLyoqXG4gICAgICogSUQgb2YgdmFyaWFudCdzIHByb2R1Y3QuXG4gICAgICogQHByb3BlcnR5IHByb2R1Y3RfaWRcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cnMucHJvZHVjdF9pZDtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIGltYWdlOiB7XG5cbiAgICAvKipcbiAgICAgKiBWYXJpYW50J3MgaW1hZ2UuXG4gICAgICogRXhhbXBsZSBgT2JqZWN0YCByZXR1cm5lZDpcbiAgICAgKiBgYGBcbiAgICAgKiB7XG4gICAgICogICAgXCJpZFwiOiAxODcyMzE4MzIzOCxcbiAgICAgKiAgICBcImNyZWF0ZWRfYXRcIjogXCIyMDE2LTA5LTE0VDE3OjEyOjEyLTA0OjAwXCIsXG4gICAgICogICAgXCJwb3NpdGlvblwiOiAxLFxuICAgICAqICAgIFwidXBkYXRlZF9hdFwiOiBcIjIwMTYtMDktMTRUMTc6MTI6MTItMDQ6MDBcIixcbiAgICAgKiAgICBcInByb2R1Y3RfaWRcIjogODU2OTkxMTU1OCxcbiAgICAgKiAgICBcInNyY1wiOiBcImh0dHBzOi8vY2RuLnNob3BpZnkuY29tL3MvZmlsZXMvMS8xMDE5LzA0OTUvcHJvZHVjdHMvTW9wX190aHJlZV9kaWZmZXJlbnRfbW9wX2hhbmRsZXMuanBnP3Y9MTQ3Mzg4NzUzMlwiLFxuICAgICAqICAgIFwidmFyaWFudF9pZHNcIjogW11cbiAgICAgKiAgfVxuICAgICAqIGBgYFxuICAgICAqIEBwcm9wZXJ0eSBpbWFnZVxuICAgICAqIEByZWFkT25seVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAoIXRoaXMuYXR0cnMuaW1hZ2UpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgSW1hZ2VNb2RlbCh0aGlzLmF0dHJzLmltYWdlKTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIGltYWdlVmFyaWFudHM6IHtcblxuICAgIC8qKlxuICAgICAgKiBJbWFnZSB2YXJpYW50cyBhdmFpbGFibGUgZm9yIGEgdmFyaWFudC4gQW4gZXhhbXBsZSB2YWx1ZSBvZiBgaW1hZ2VWYXJpYW50YDpcbiAgICAgICogYGBgXG4gICAgICAqIFtcbiAgICAgICogICB7XG4gICAgICAqICAgICBcIm5hbWVcIjogXCJwaWNvXCIsXG4gICAgICAqICAgICBcImRpbWVuc2lvbnNcIjogXCIxNngxNlwiLFxuICAgICAgKiAgICAgXCJzcmNcIjogXCJodHRwczovL2Nkbi5zaG9waWZ5LmNvbS9zL2ZpbGVzLzEvMTAxOS8wNDk1L3Byb2R1Y3RzL2FsaWVuXzE0NmVmN2MxLTI2ZTktNGU5Ni05NmU2LTlkMzcxMjhkMDAwNV9waWNvLmpwZz92PTE0NjkwNDY0MjNcIlxuICAgICAgKiAgIH0sXG4gICAgICAqICAge1xuICAgICAgKiAgICAgXCJuYW1lXCI6IFwiY29tcGFjdFwiLFxuICAgICAgKiAgICAgXCJkaW1lbnNpb25zXCI6IFwiMTYweDE2MFwiLFxuICAgICAgKiAgICAgXCJzcmNcIjogXCJodHRwczovL2Nkbi5zaG9waWZ5LmNvbS9zL2ZpbGVzLzEvMTAxOS8wNDk1L3Byb2R1Y3RzL2FsaWVuXzE0NmVmN2MxLTI2ZTktNGU5Ni05NmU2LTlkMzcxMjhkMDAwNV9jb21wYWN0LmpwZz92PTE0NjkwNDY0MjNcIlxuICAgICAgKiAgIH1cbiAgICAgICogXVxuICAgICAgKiBgYGBcbiAgICAgICpcbiAgICAgICogQHByb3BlcnR5IGltYWdlVmFyaWFudFxuICAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIGlmICghdGhpcy5pbWFnZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmltYWdlLnZhcmlhbnRzO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgdGl0bGU6IHtcblxuICAgIC8qKlxuICAgICAqIFByb2R1Y3QgdGl0bGUgb2YgdmFyaWFudCdzIHBhcmVudCBwcm9kdWN0LlxuICAgICAqIEBwcm9wZXJ0eSB0aXRsZVxuICAgICAqIEByZWFkT25seVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRycy50aXRsZTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIHF1YW50aXR5OiB7XG5cbiAgICAvKipcbiAgICAgKiBDb3VudCBvZiB2YXJpYW50cyB0byBvcmRlci5cbiAgICAgKiBAcHJvcGVydHkgcXVhbnRpdHlcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cnMucXVhbnRpdHk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgdmFyIHBhcnNlZFZhbHVlID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcblxuICAgICAgaWYgKHBhcnNlZFZhbHVlIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1F1YW50aXRpZXMgbXVzdCBiZSBwb3NpdGl2ZScpO1xuICAgICAgfSBlbHNlIGlmIChwYXJzZWRWYWx1ZSAhPT0gcGFyc2VGbG9hdCh2YWx1ZSkpIHtcbiAgICAgICAgLyogaW5jaWRlbnRhbGx5LCB0aGlzIGNvdmVycyBhbGwgTmFOIHZhbHVlcywgYmVjYXVzZSBOYU4gIT09IE5hbiAqL1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1F1YW50aXRpZXMgbXVzdCBiZSB3aG9sZSBudW1iZXJzJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYXR0cnMucXVhbnRpdHkgPSBwYXJzZWRWYWx1ZTtcblxuICAgICAgcmV0dXJuIHRoaXMuYXR0cnMucXVhbnRpdHk7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBwcm9wZXJ0aWVzOiB7XG5cbiAgICAvKipcbiAgICAgKiBDdXN0b21pemF0aW9uIGluZm9ybWF0aW9uIGZvciBhIHByb2R1Y3QuXG4gICAgICogPGEgaHJlZj1cImh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS90aGVtZXMvY3VzdG9taXphdGlvbi9wcm9kdWN0cy9nZXQtY3VzdG9taXphdGlvbi1pbmZvcm1hdGlvbi1mb3ItcHJvZHVjdHNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgKiBTZWUgaGVyZSBmb3IgbW9yZSBpbmZvXG4gICAgICogPC9hPi5cbiAgICAgKiBAcHJvcGVydHkgcHJvcGVydGllc1xuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLnByb3BlcnRpZXMgfHwge307XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgdGhpcy5hdHRycy5wcm9wZXJ0aWVzID0gdmFsdWUgfHwge307XG5cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIHZhcmlhbnRfdGl0bGU6IHtcblxuICAgIC8qKlxuICAgICAqIFRpdGxlIG9mIHZhcmlhbnQuXG4gICAgICogQHByb3BlcnR5IHZhcmlhbnRfdGl0bGVcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cnMudmFyaWFudF90aXRsZTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIHByaWNlOiB7XG5cbiAgICAvKipcbiAgICAgKiBQcmljZSBvZiB0aGUgdmFyaWFudC4gRm9yIGV4YW1wbGU6IGBcIjUuMDBcImAuXG4gICAgICogQHByb3BlcnR5IHByaWNlXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLnByaWNlO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgY29tcGFyZV9hdF9wcmljZToge1xuXG4gICAgLyoqXG4gICAgICAqIENvbXBhcmUgYXQgcHJpY2UgZm9yIHZhcmlhbnQuIFRoZSBgY29tcGFyZUF0UHJpY2VgIHdvdWxkIGJlXG4gICAgICAqIHRoZSBwcmljZSBvZiB0aGUgcHJvZHVjdCBwcmV2aW91c2x5IGJlZm9yZSB0aGUgcHJvZHVjdCB3ZW50IG9uIHNhbGUuIEZvciBtb3JlIGluZm9cbiAgICAgICogZ28gPGEgaHJlZj1cImh0dHBzOi8vZG9jcy5zaG9waWZ5LmNvbS9tYW51YWwvcHJvZHVjdHMvcHJvbW90aW5nLW1hcmtldGluZy9zYWxlc1wiIHRhcmdldD1cIl9ibGFua1wiPmhlcmU8L2E+LlxuICAgICAgKlxuICAgICAgKiBJZiBubyBgY29tcGFyZUF0UHJpY2VgIGlzIHNldCB0aGVuIHRoaXMgdmFsdWUgd2lsbCBiZSBgbnVsbGAuIEFuIGV4YW1wbGUgdmFsdWU6IGBcIjUuMDBcImAuXG4gICAgICAqIEBwcm9wZXJ0eSBjb21wYXJlQXRQcmljZVxuICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cnMuY29tcGFyZV9hdF9wcmljZTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIGxpbmVfcHJpY2U6IHtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0b3RhbCBwcmljZSBmb3IgdGhpcyBsaW5lIGl0ZW0uIEZvciBpbnN0YW5jZSBpZiB0aGUgdmFyaWFudCBjb3N0cyBgMS41MGAgYW5kIHlvdSBoYXZlIGEgcXVhbnRpdHlcbiAgICAgKiBvZiAyIHRoZW4gYGxpbmVfcHJpY2VgIHdpbGwgYmUgYDMuMDBgLlxuICAgICAqIEBwcm9wZXJ0eSBsaW5lX3ByaWNlXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAodGhpcy5xdWFudGl0eSAqIHBhcnNlRmxvYXQodGhpcy5wcmljZSkpLnRvRml4ZWQoMik7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBncmFtczoge1xuXG4gICAgLyoqXG4gICAgICogVmFyaWFudCdzIHdlaWdodCBpbiBncmFtcy4gSWYgbm8gd2VpZ2h0IGlzIHNldCB0aGVuIGAwYCBpcyByZXR1cm5lZC5cbiAgICAgKiBAcHJvcGVydHkgZ3JhbXNcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cnMuZ3JhbXM7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9XG59KSk7XG5cbi8qIGVzbGludCBuby11bmRlZmluZWQ6IDAgY29tcGxleGl0eTogMCAqL1xudmFyIEdVSURfUFJFRklYID0gJ3Nob3BpZnktYnV5LicgKyBEYXRlLm5vdygpO1xuXG52YXIgR1VJRF9ERVNDID0ge1xuICB3cml0YWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICB2YWx1ZTogbnVsbFxufTtcblxudmFyIHV1aWRTZWVkID0gMDtcblxuZnVuY3Rpb24gdXVpZCgpIHtcbiAgcmV0dXJuICsrdXVpZFNlZWQ7XG59XG5cbnZhciBudW1iZXJDYWNoZSA9IHt9O1xudmFyIHN0cmluZ0NhY2hlID0ge307XG5cbmZ1bmN0aW9uIHNldEd1aWRGb3Iob2JqKSB7XG4gIGlmIChvYmogJiYgb2JqW0dVSURfS0VZXSkge1xuICAgIHJldHVybiBvYmpbR1VJRF9LRVldO1xuICB9XG5cbiAgaWYgKG9iaiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuICcodW5kZWZpbmVkKSc7XG4gIH1cblxuICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgcmV0dXJuICcobnVsbCknO1xuICB9XG5cbiAgdmFyIHR5cGUgPSB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYmopO1xuICB2YXIgaWQgPSB2b2lkIDA7XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGlkID0gbnVtYmVyQ2FjaGVbb2JqXTtcblxuICAgICAgaWYgKCFpZCkge1xuICAgICAgICBpZCA9IG51bWJlckNhY2hlW29ial0gPSAnbnUnICsgb2JqO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBpZCA9IHN0cmluZ0NhY2hlW29ial07XG5cbiAgICAgIGlmICghaWQpIHtcbiAgICAgICAgaWQgPSBzdHJpbmdDYWNoZVtvYmpdID0gJ3N0JyArIHV1aWQoKTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIGlmIChvYmopIHtcbiAgICAgICAgaWQgPSAnKHRydWUpJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlkID0gJyhmYWxzZSknO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAob2JqID09PSBPYmplY3QpIHtcbiAgICAgICAgaWQgPSAnKE9iamVjdCknO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKG9iaiA9PT0gQXJyYXkpIHtcbiAgICAgICAgaWQgPSAnKEFycmF5KSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZCA9IEdVSURfUFJFRklYICsgJy4nICsgdXVpZCgpO1xuXG4gICAgICBpZiAob2JqW0dVSURfS0VZXSA9PT0gbnVsbCkge1xuICAgICAgICBvYmpbR1VJRF9LRVldID0gaWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBHVUlEX0RFU0MudmFsdWUgPSBpZDtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgR1VJRF9LRVksIEdVSURfREVTQyk7XG4gICAgICB9XG4gIH1cblxuICByZXR1cm4gaWQ7XG59XG5cbi8qIGdsb2JhbCBnbG9iYWwgKi9cblxudmFyIGdsb2JhbE5hbWVzcGFjZSA9IHZvaWQgMDtcblxuaWYgKHR5cGVvZiBnbG9iYWwgPT09ICd1bmRlZmluZWQnKSB7XG4gIGdsb2JhbE5hbWVzcGFjZSA9IHdpbmRvdztcbn0gZWxzZSB7XG4gIGdsb2JhbE5hbWVzcGFjZSA9IGdsb2JhbDtcbn1cblxuZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgaWYgKCFnbG9iYWxOYW1lc3BhY2Vba2V5XSkge1xuICAgIGdsb2JhbE5hbWVzcGFjZVtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0KGtleSkge1xuICByZXR1cm4gZ2xvYmFsTmFtZXNwYWNlW2tleV07XG59XG5cbnZhciBnbG9iYWxWYXJzID0geyBzZXQ6IHNldCwgZ2V0OiBnZXQgfTtcblxuZnVuY3Rpb24gb2JqZWN0c0VxdWFsKG9uZSwgdHdvKSB7XG4gIGlmIChvbmUgPT09IHR3bykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9uZSkuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChvbmVba2V5XSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHJldHVybiBvbmVba2V5XS50b1N0cmluZygpID09PSB0d29ba2V5XS50b1N0cmluZygpO1xuICAgIH0gZWxzZSBpZiAoX3R5cGVvZihvbmVba2V5XSkgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gb2JqZWN0c0VxdWFsKG9uZVtrZXldLCB0d29ba2V5XSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9uZVtrZXldID09PSB0d29ba2V5XTtcbiAgfSk7XG59XG5cbi8qKlxuKiBDbGFzcyBmb3IgY2FydCBtb2RlbFxuKiBAY2xhc3MgQ2FydE1vZGVsXG4qL1xudmFyIENhcnRNb2RlbCA9IEJhc2VNb2RlbC5leHRlbmQoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoe1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IoKSB7XG4gICAgdGhpc1snc3VwZXInXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAgKiBBZGQgaXRlbXMgdG8gdGhlIGNhcnQuIFVwZGF0ZXMgY2FydCdzIGBsaW5lSXRlbXNgIGJhc2VkIG9uIHZhcmlhbnRzIHBhc3NlZCBpbi5cbiAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAqIGNhcnQuYWRkVmFyaWFudHMoe3ZhcmlhbnQ6IHZhcmlhbnRPYmplY3QsIHF1YW50aXR5OiAxfSkudGhlbihjYXJ0ID0+IHtcbiAgICAqICAgLy8gdGhlIGNhcnQgaGFzIGNyZWF0ZWQgbGluZSBpdGVtc1xuICAgICogfSk7XG4gICAgKiBgYGBcbiAgICAqIEBkZXByZWNhdGVkIGBjcmVhdGVMaW5lSXRlbXNGcm9tVmFyaWFudHNgIHdpbGwgYmUgdXNlZCBpbiB0aGUgZnV0dXJlIGFzIGl0J3MgbW9yZSBkZXNjcmlwdGl2ZVxuICAgICogQG1ldGhvZCBhZGRWYXJpYW50c1xuICAgICogQHBhcmFtIHtPYmplY3R9IGl0ZW0gLSBPbmUgb3IgbW9yZSB2YXJpYW50c1xuICAgICogQHBhcmFtIHtQcm9kdWN0VmFyaWFudE1vZGVsfSBpdGVtLnZhcmlhbnQgLSB2YXJpYW50IG9iamVjdFxuICAgICogQHBhcmFtIHtOdW1iZXJ9IGl0ZW0ucXVhbnRpdHkgLSBxdWFudGl0eVxuICAgICogQHBhcmFtIHtPYmplY3R9IFttb3JlSXRlbXMuLi5dIC0gZnVydGhlciBvYmplY3RzIGRlZmluaW5nIGB2YXJpYW50YCBhbmQgYHF1YW50aXR5YCBtYXliZSBwYXNzZWQgaW5cbiAgICAqIEBwcml2YXRlXG4gICAgKiBAcmV0dXJuIHtQcm9taXNlfENhcnRNb2RlbH0gLSB0aGUgY2FydCBpbnN0YW5jZS5cbiAgKi9cbiAgYWRkVmFyaWFudHM6IGZ1bmN0aW9uIGFkZFZhcmlhbnRzKCkge1xuICAgIGxvZ2dlci53YXJuKCdDYXJ0TW9kZWwgLSAnLCAnYWRkVmFyaWFudHMgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBjcmVhdGVMaW5lSXRlbXNGcm9tVmFyaWFudHMgaW5zdGVhZCcpO1xuXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlTGluZUl0ZW1zRnJvbVZhcmlhbnRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0sXG5cblxuICAvKipcbiAgICAqIEFkZCBpdGVtcyB0byB0aGUgY2FydC4gVXBkYXRlcyBjYXJ0J3MgYGxpbmVJdGVtc2AgYmFzZWQgb24gdmFyaWFudHMgcGFzc2VkIGluLlxuICAgICogYGBgamF2YXNjcmlwdFxuICAgICogY2FydC5jcmVhdGVMaW5lSXRlbXNGcm9tVmFyaWFudHMoe3ZhcmlhbnQ6IHZhcmlhbnRPYmplY3QsIHF1YW50aXR5OiAxfSkudGhlbihjYXJ0ID0+IHtcbiAgICAqICAgLy8gdGhlIGNhcnQgaGFzIGNyZWF0ZWQgbGluZSBpdGVtc1xuICAgICogfSk7XG4gICAgKiBgYGBcbiAgICAqIEBtZXRob2QgY3JlYXRlTGluZUl0ZW1zRnJvbVZhcmlhbnRzXG4gICAgKiBAcGFyYW0ge09iamVjdH0gaXRlbSAtIE9uZSBvciBtb3JlIHZhcmlhbnRzXG4gICAgKiBAcGFyYW0ge1Byb2R1Y3RWYXJpYW50TW9kZWx9IGl0ZW0udmFyaWFudCAtIHZhcmlhbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge051bWJlcn0gaXRlbS5xdWFudGl0eSAtIHF1YW50aXR5XG4gICAgKiBAcGFyYW0ge09iamVjdH0gW21vcmVJdGVtcy4uLl0gLSBmdXJ0aGVyIG9iamVjdHMgZGVmaW5pbmcgYHZhcmlhbnRgIGFuZCBgcXVhbnRpdHlgIG1heWJlIHBhc3NlZCBpblxuICAgICogQHB1YmxpY1xuICAgICogQHJldHVybiB7UHJvbWlzZXxDYXJ0TW9kZWx9IC0gdGhlIGNhcnQgaW5zdGFuY2UuXG4gICovXG4gIGNyZWF0ZUxpbmVJdGVtc0Zyb21WYXJpYW50czogZnVuY3Rpb24gY3JlYXRlTGluZUl0ZW1zRnJvbVZhcmlhbnRzKCkge1xuICAgIHZhciBuZXdMaW5lSXRlbXMgPSBbXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgbGluZUl0ZW0gPSB7XG4gICAgICAgIGltYWdlOiBpdGVtLnZhcmlhbnQuaW1hZ2UsXG4gICAgICAgIGltYWdlX3ZhcmlhbnRzOiBpdGVtLnZhcmlhbnQuaW1hZ2VWYXJpYW50cyxcbiAgICAgICAgdmFyaWFudF9pZDogaXRlbS52YXJpYW50LmlkLFxuICAgICAgICBwcm9kdWN0X2lkOiBpdGVtLnZhcmlhbnQucHJvZHVjdElkLFxuICAgICAgICB0aXRsZTogaXRlbS52YXJpYW50LnByb2R1Y3RUaXRsZSxcbiAgICAgICAgcXVhbnRpdHk6IHBhcnNlSW50KGl0ZW0ucXVhbnRpdHksIDEwKSxcbiAgICAgICAgcHJvcGVydGllczogaXRlbS5wcm9wZXJ0aWVzIHx8IHt9LFxuICAgICAgICB2YXJpYW50X3RpdGxlOiBpdGVtLnZhcmlhbnQudGl0bGUsXG4gICAgICAgIHByaWNlOiBpdGVtLnZhcmlhbnQucHJpY2UsXG4gICAgICAgIGNvbXBhcmVfYXRfcHJpY2U6IGl0ZW0udmFyaWFudC5jb21wYXJlQXRQcmljZSxcbiAgICAgICAgZ3JhbXM6IGl0ZW0udmFyaWFudC5ncmFtc1xuICAgICAgfTtcblxuICAgICAgc2V0R3VpZEZvcihsaW5lSXRlbSk7XG5cbiAgICAgIHJldHVybiBsaW5lSXRlbTtcbiAgICB9KTtcbiAgICB2YXIgZXhpc3RpbmdMaW5lSXRlbXMgPSB0aGlzLmF0dHJzLmxpbmVfaXRlbXM7XG5cbiAgICBleGlzdGluZ0xpbmVJdGVtcy5wdXNoLmFwcGx5KGV4aXN0aW5nTGluZUl0ZW1zLCBfdG9Db25zdW1hYmxlQXJyYXkobmV3TGluZUl0ZW1zKSk7XG5cbiAgICB2YXIgZGVkdXBlZExpbmVJdGVtcyA9IGV4aXN0aW5nTGluZUl0ZW1zLnJlZHVjZShmdW5jdGlvbiAoaXRlbUFjYywgaXRlbSkge1xuICAgICAgdmFyIG1hdGNoaW5nSXRlbSA9IGl0ZW1BY2MuZmlsdGVyKGZ1bmN0aW9uIChleGlzdGluZ0l0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nSXRlbS52YXJpYW50X2lkID09PSBpdGVtLnZhcmlhbnRfaWQgJiYgb2JqZWN0c0VxdWFsKGV4aXN0aW5nSXRlbS5wcm9wZXJ0aWVzLCBpdGVtLnByb3BlcnRpZXMpO1xuICAgICAgfSlbMF07XG5cbiAgICAgIGlmIChtYXRjaGluZ0l0ZW0pIHtcbiAgICAgICAgbWF0Y2hpbmdJdGVtLnF1YW50aXR5ID0gbWF0Y2hpbmdJdGVtLnF1YW50aXR5ICsgaXRlbS5xdWFudGl0eTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW1BY2MucHVzaChpdGVtKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGl0ZW1BY2M7XG4gICAgfSwgW10pO1xuXG4gICAgLy8gVXNlcnMgbWF5IHBhc3MgbmVnYXRpdmUgbnVtYmVycyBhbmQgcmVtb3ZlIGl0ZW1zLiBUaGlzIGVuc3VyZXMgdGhlcmUncyBub1xuICAgIC8vIGl0ZW0gd2l0aCBhIHF1YW50aXR5IG9mIHplcm8gb3IgbGVzcy5cbiAgICB0aGlzLmF0dHJzLmxpbmVfaXRlbXMgPSBkZWR1cGVkTGluZUl0ZW1zLnJlZHVjZShmdW5jdGlvbiAoaXRlbUFjYywgaXRlbSkge1xuICAgICAgaWYgKGl0ZW0ucXVhbnRpdHkgPj0gMSkge1xuICAgICAgICBpdGVtQWNjLnB1c2goaXRlbSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpdGVtQWNjO1xuICAgIH0sIFtdKTtcblxuICAgIHJldHVybiB0aGlzLnVwZGF0ZU1vZGVsKCk7XG4gIH0sXG5cblxuICAvKipcbiAgICAqIFVwZGF0ZSBhIGxpbmUgaXRlbSBxdWFudGl0eSBiYXNlZCBvbiBsaW5lIGl0ZW0gaWRcbiAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAqIC8vIFRoaXMgZXhhbXBsZSBjaGFuZ2VzIHRoZSBxdWFudGl0eSBmb3IgdGhlIGZpcnN0IGxpbmUgaXRlbSB0byAyXG4gICAgKiBjb25zdCBmaXJzdExpbmVJdGVtSWQgPSBjYXJ0LmxpbmVJdGVtc1swXS5pZDtcbiAgICAqXG4gICAgKiBjYXJ0LnVwZGF0ZUxpbmVJdGVtKGZpcnN0TGluZUl0ZW1JZCwgMikudGhlbihjYXJ0ID0+IHtcbiAgICAqICAgLy8gdGhlIGNhcnQgaGFzIHVwZGF0ZWQgdGhlIGxpbmUgaXRlbVxuICAgICogfSk7XG4gICAgKiBgYGBcbiAgICAqIEBtZXRob2QgdXBkYXRlTGluZUl0ZW1cbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZCAtIGxpbmUgaXRlbSBJRFxuICAgICogQHBhcmFtIHtOdW1iZXJ9IHF1YW50aXR5IC0gbmV3IHF1YW50aXR5IGZvciBsaW5lIGl0ZW1cbiAgICAqIEB0aHJvd3Mge0Vycm9yfSBpZiBsaW5lIGl0ZW0gd2l0aCBJRCBpcyBub3QgaW4gY2FydC5cbiAgICAqIEBwdWJsaWNcbiAgICAqIEByZXR1cm4ge1Byb21pc2V8Q2FydE1vZGVsfSAtIHRoZSBjYXJ0IGluc3RhbmNlXG4gICovXG4gIHVwZGF0ZUxpbmVJdGVtOiBmdW5jdGlvbiB1cGRhdGVMaW5lSXRlbShpZCwgcXVhbnRpdHkpIHtcbiAgICBpZiAocXVhbnRpdHkgPCAxKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmVMaW5lSXRlbShpZCk7XG4gICAgfVxuXG4gICAgdmFyIGxpbmVJdGVtID0gdGhpcy5saW5lSXRlbXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbS5pZCA9PT0gaWQ7XG4gICAgfSlbMF07XG5cbiAgICBpZiAobGluZUl0ZW0pIHtcbiAgICAgIGxpbmVJdGVtLnF1YW50aXR5ID0gcXVhbnRpdHk7XG5cbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZU1vZGVsKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2xpbmUgaXRlbSB3aXRoIGlkOiAnICsgaWQgKyAnIG5vdCBmb3VuZCBpbiBjYXJ0IycgKyB0aGlzLmlkKSk7XG4gICAgfSk7XG4gIH0sXG5cblxuICAvKipcbiAgICAqIFJlbW92ZSBhIGxpbmUgaXRlbSBmcm9tIGNhcnQgYmFzZWQgb24gbGluZSBpdGVtIGlkXG4gICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgKiAvLyBUaGlzIGV4YW1wbGUgcmVtb3ZlcyB0aGUgZmlyc3QgbGluZSBpdGVtXG4gICAgKiBjb25zdCBmaXJzdExpbmVJdGVtSWQgPSBjYXJ0LmxpbmVJdGVtc1swXS5pZDtcbiAgICAqXG4gICAgKiBjYXJ0LnJlbW92ZUxpbmVJdGVtKGZpcnN0TGluZUl0ZW1JZCkudGhlbihjYXJ0ID0+IHtcbiAgICAqICAgLy8gdGhlIGNhcnQgaGFzIHJlbW92ZWQgdGhlIGxpbmUgaXRlbVxuICAgICogfSk7XG4gICAgKiBgYGBcbiAgICAqXG4gICAgKiBAbWV0aG9kIHJlbW92ZUxpbmVJdGVtXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgLSBsaW5lIGl0ZW0gSURcbiAgICAqIEB0aHJvd3Mge0Vycm9yfSBpZiBsaW5lIGl0ZW0gd2l0aCBJRCBpcyBub3QgaW4gY2FydC5cbiAgICAqIEBwdWJsaWNcbiAgICAqIEByZXR1cm4ge1Byb21pc2V8Q2FydE1vZGVsfSAtIHRoZSBjYXJ0IGluc3RhbmNlXG4gICovXG4gIHJlbW92ZUxpbmVJdGVtOiBmdW5jdGlvbiByZW1vdmVMaW5lSXRlbShpZCkge1xuICAgIHZhciBvbGRMZW5ndGggPSB0aGlzLmxpbmVJdGVtcy5sZW5ndGg7XG4gICAgdmFyIG5ld0xpbmVJdGVtcyA9IHRoaXMubGluZUl0ZW1zLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0uaWQgIT09IGlkO1xuICAgIH0pO1xuICAgIHZhciBuZXdMZW5ndGggPSBuZXdMaW5lSXRlbXMubGVuZ3RoO1xuXG4gICAgaWYgKG5ld0xlbmd0aCA8IG9sZExlbmd0aCkge1xuICAgICAgdGhpcy5hdHRycy5saW5lX2l0ZW1zID0gbmV3TGluZUl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbS5hdHRycztcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVNb2RlbCgpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdsaW5lIGl0ZW0gd2l0aCBpZDogJyArIGlkICsgJyBub3QgZm91bmQgaW4gY2FydCMnICsgdGhpcy5pZCkpO1xuICAgIH0pO1xuICB9LFxuXG5cbiAgLyoqXG4gICAgKiBSZW1vdmUgYWxsIGxpbmUgaXRlbXMgZnJvbSBjYXJ0XG4gICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgKiAvLyBUaGlzIGV4YW1wbGUgcmVtb3ZlcyBhbGwgbGluZSBpdGVtcyBmcm9tIHRoZSBjYXJ0XG4gICAgKiBjYXJ0LmNsZWFyTGluZUl0ZW1zKCkudGhlbihjYXJ0ID0+IHtcbiAgICAqICAgLy8gdGhlIGNhcnQgaGFzIHJlbW92ZWQgYWxsIGxpbmUgaXRlbXNcbiAgICAqIH0pO1xuICAgICogQG1ldGhvZCBjbGVhckxpbmVJdGVtc1xuICAgICogQHB1YmxpY1xuICAgICogQHJldHVybiB7UHJvbWlzZXxDYXJ0TW9kZWx9IC0gdGhlIGNhcnQgaW5zdGFuY2VcbiAgKi9cbiAgY2xlYXJMaW5lSXRlbXM6IGZ1bmN0aW9uIGNsZWFyTGluZUl0ZW1zKCkge1xuICAgIHRoaXMuYXR0cnMubGluZV9pdGVtcyA9IFtdO1xuXG4gICAgcmV0dXJuIHRoaXMudXBkYXRlTW9kZWwoKTtcbiAgfSxcblxuXG4gIC8qKlxuICAgICogRm9yY2UgdXBkYXRlIG9mIGNhcnQgbW9kZWwgb24gc2VydmVyLiBUaGlzIGZ1bmN0aW9uIHdpbGwgb25seSBiZSB1c2VkIGluIGFkdmFuY2VkIHNpdHVhdGlvbnMgYW5kIGRvZXMgbm90IG5lZWQgdG8gYmUgY2FsbGVkXG4gICAgKiBleHBsaWNpdGx5IHRvIHVwZGF0ZSBsaW5lIGl0ZW1zLiBJdCBpcyBhdXRvbWF0aWNhbGx5IGNhbGxlZCBhZnRlclxuICAgICoge3sjY3Jvc3NMaW5rIFwiQ2FydE1vZGVsL2NyZWF0ZUxpbmVJdGVtc0Zyb21WYXJpYW50c1wifX17ey9jcm9zc0xpbmt9fSxcbiAgICAqIHt7I2Nyb3NzTGluayBcIkNhcnRNb2RlbC91cGRhdGVMaW5lSXRlbVwifX17ey9jcm9zc0xpbmt9fSxcbiAgICAqIHt7I2Nyb3NzTGluayBcIkNhcnRNb2RlbC9yZW1vdmVMaW5lSXRlbVwifX17ey9jcm9zc0xpbmt9fSxcbiAgICAqIGFuZCB7eyNjcm9zc0xpbmsgXCJDYXJ0TW9kZWwvcmVtb3ZlTGluZUl0ZW1cIn19e3svY3Jvc3NMaW5rfX1cbiAgICAqXG4gICAgKiBAbWV0aG9kIHVwZGF0ZU1vZGVsXG4gICAgKiBAcHVibGljXG4gICAgKiBAcmV0dXJuIHtQcm9taXNlfENhcnRNb2RlbH0gLSB0aGUgY2FydCBpbnN0YW5jZVxuICAqL1xuICB1cGRhdGVNb2RlbDogZnVuY3Rpb24gdXBkYXRlTW9kZWwoKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICByZXR1cm4gdGhpcy5zaG9wQ2xpZW50LnVwZGF0ZSgnY2FydHMnLCB0aGlzKS50aGVuKGZ1bmN0aW9uICh1cGRhdGVDYXJ0KSB7XG4gICAgICBhc3NpZ24kMShfdGhpczUuYXR0cnMsIHVwZGF0ZUNhcnQuYXR0cnMpO1xuXG4gICAgICByZXR1cm4gX3RoaXM1O1xuICAgIH0pO1xuICB9XG59LCB7XG4gIGlkOiB7XG5cbiAgICAvKipcbiAgICAgICogZ2V0IElEIGZvciBjdXJyZW50IGNhcnRcbiAgICAgICogQHByb3BlcnR5IGlkXG4gICAgICAqIEByZWFkT25seVxuICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyc1tHVUlEX0tFWV07XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBsaW5lSXRlbXM6IHtcblxuICAgIC8qKlxuICAgICAgKiBHZXQgYW4gYEFycmF5YCBvZiB7eyNjcm9zc0xpbmsgXCJDYXJ0TGluZUl0ZW1Nb2RlbFwifX1DYXJ0TGluZUl0ZW1Nb2RlbCdze3svY3Jvc3NMaW5rfX1cbiAgICAgICogQHByb3BlcnR5IGxpbmVJdGVtc1xuICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICogQHR5cGUge0FycmF5fVxuICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gKHRoaXMuYXR0cnMubGluZV9pdGVtcyB8fCBbXSkubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2FydExpbmVJdGVtTW9kZWwoaXRlbSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIGxpbmVJdGVtQ291bnQ6IHtcblxuICAgIC8qKlxuICAgICAgKiBHZXRzIHRoZSB0b3RhbCBxdWFudGl0eSBvZiBhbGwgbGluZSBpdGVtcy4gRXhhbXBsZTogeW91J3ZlIGFkZGVkIHR3byB2YXJpYW50cyB3aXRoIHF1YW50aXRpZXMgMyBhbmQgMi4gYGxpbmVJdGVtQ291bnRgIHdpbGwgYmUgNS5cbiAgICAgICogQHByb3BlcnR5IGxpbmVJdGVtQ291bnRcbiAgICAgICogQHJlYWRPbmx5XG4gICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxpbmVJdGVtcy5yZWR1Y2UoZnVuY3Rpb24gKHRvdGFsLCBpdGVtKSB7XG4gICAgICAgIHJldHVybiB0b3RhbCArIGl0ZW0ucXVhbnRpdHk7XG4gICAgICB9LCAwKTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIHN1YnRvdGFsOiB7XG5cbiAgICAvKipcbiAgICAgICogR2V0IGN1cnJlbnQgc3VidG90YWwgcHJpY2UgZm9yIGFsbCBsaW5lIGl0ZW1zLiBFeGFtcGxlOiB0d28gaXRlbXMgaGF2ZSBiZWVuIGFkZGVkIHRvIHRoZSBjYXJ0IHRoYXQgY29zdCAkMS4yNVxuICAgICAgKiB0aGVuIHRoZSBzdWJ0b3RhbCB3aWxsIGJlIGAyLjUwYFxuICAgICAgKlxuICAgICAgKiBAcHJvcGVydHkgc3VidG90YWxcbiAgICAgICogQHJlYWRPbmx5XG4gICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBzdWJ0b3RhbCA9IHRoaXMubGluZUl0ZW1zLnJlZHVjZShmdW5jdGlvbiAocnVubmluZ1RvdGFsLCBsaW5lSXRlbSkge1xuICAgICAgICByZXR1cm4gcnVubmluZ1RvdGFsICsgcGFyc2VGbG9hdChsaW5lSXRlbS5saW5lX3ByaWNlKTtcbiAgICAgIH0sIDApO1xuXG4gICAgICByZXR1cm4gc3VidG90YWwudG9GaXhlZCgyKTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sXG4gIGNoZWNrb3V0VXJsOiB7XG5cbiAgICAvKipcbiAgICAgICogR2V0IGNoZWNrb3V0IFVSTCBmb3IgY3VycmVudCBjYXJ0XG4gICAgICAqIEBwcm9wZXJ0eSBjaGVja291dFVybFxuICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuY29uZmlnO1xuICAgICAgdmFyIGJhc2VVcmwgPSAnaHR0cHM6Ly8nICsgY29uZmlnLmRvbWFpbiArICcvY2FydCc7XG4gICAgICB2YXIgZ2EgPSBnbG9iYWxWYXJzLmdldCgnZ2EnKTtcblxuICAgICAgdmFyIHZhcmlhbnRQYXRoID0gdGhpcy5saW5lSXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLnZhcmlhbnRfaWQgKyAnOicgKyBpdGVtLnF1YW50aXR5O1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBxdWVyeSA9ICdhY2Nlc3NfdG9rZW49JyArIGNvbmZpZy5hcGlLZXkgKyAnJl9mZD0wJztcblxuICAgICAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgbGlua2VyUGFyYW0gPSB2b2lkIDA7XG5cbiAgICAgICAgZ2EoZnVuY3Rpb24gKHRyYWNrZXIpIHtcbiAgICAgICAgICBsaW5rZXJQYXJhbSA9IHRyYWNrZXIuZ2V0KCdsaW5rZXJQYXJhbScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobGlua2VyUGFyYW0pIHtcbiAgICAgICAgICBxdWVyeSArPSAnJicgKyBsaW5rZXJQYXJhbTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYmFzZVVybCArICcvJyArIHZhcmlhbnRQYXRoICsgJz8nICsgcXVlcnk7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9XG59KSk7XG5cbnZhciBDYXJ0U2VyaWFsaXplciA9IENvcmVPYmplY3QuZXh0ZW5kKHtcbiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICB9LFxuICByb290S2V5Rm9yVHlwZTogZnVuY3Rpb24gcm9vdEtleUZvclR5cGUodHlwZSkge1xuICAgIHJldHVybiB0eXBlLnNsaWNlKDAsIC0xKTtcbiAgfSxcbiAgbW9kZWxGb3JUeXBlOiBmdW5jdGlvbiBtb2RlbEZvclR5cGUoKSAvKiB0eXBlICove1xuICAgIHJldHVybiBDYXJ0TW9kZWw7XG4gIH0sXG4gIGRlc2VyaWFsaXplU2luZ2xlOiBmdW5jdGlvbiBkZXNlcmlhbGl6ZVNpbmdsZSh0eXBlKSB7XG4gICAgdmFyIHNpbmdsZVBheWxvYWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtZXRhQXR0cnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gICAgdmFyIG1vZGVsQXR0cnMgPSBzaW5nbGVQYXlsb2FkW3RoaXMucm9vdEtleUZvclR5cGUodHlwZSldO1xuICAgIHZhciBtb2RlbCA9IHRoaXMubW9kZWxGcm9tQXR0cnModHlwZSwgbW9kZWxBdHRycywgbWV0YUF0dHJzKTtcblxuICAgIHJldHVybiBtb2RlbDtcbiAgfSxcbiAgbW9kZWxGcm9tQXR0cnM6IGZ1bmN0aW9uIG1vZGVsRnJvbUF0dHJzKHR5cGUsIGF0dHJzLCBtZXRhQXR0cnMpIHtcbiAgICB2YXIgTW9kZWwgPSB0aGlzLm1vZGVsRm9yVHlwZSh0eXBlKTtcblxuICAgIG1ldGFBdHRycy5jb25maWcgPSB0aGlzLmNvbmZpZztcblxuICAgIHJldHVybiBuZXcgTW9kZWwoYXR0cnMsIG1ldGFBdHRycyk7XG4gIH0sXG4gIHNlcmlhbGl6ZTogZnVuY3Rpb24gc2VyaWFsaXplKHR5cGUsIG1vZGVsKSB7XG4gICAgdmFyIHJvb3QgPSB0aGlzLnJvb3RLZXlGb3JUeXBlKHR5cGUpO1xuICAgIHZhciBwYXlsb2FkID0ge307XG4gICAgdmFyIGF0dHJzID0gYXNzaWduJDEoe30sIG1vZGVsLmF0dHJzKTtcblxuICAgIHBheWxvYWRbcm9vdF0gPSBhdHRycztcblxuICAgIGRlbGV0ZSBhdHRycy5hdHRyaWJ1dGVzO1xuXG4gICAgT2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gYXR0cnNba2V5XTtcblxuICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRlbGV0ZSBhdHRyc1trZXldO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBheWxvYWQ7XG4gIH1cbn0pO1xuXG52YXIgUmVmZXJlbmNlTW9kZWwgPSBCYXNlTW9kZWwuZXh0ZW5kKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHtcblxuICAvKipcbiAgICAqIENsYXNzIGZvciByZWZlcmVuY2UgbW9kZWxcbiAgICAqIEBwcml2YXRlXG4gICAgKiBAY2xhc3MgUmVmZXJlbmNlTW9kZWxcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAqL1xuICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IoYXR0cnMpIHtcbiAgICBpZiAoT2JqZWN0LmtleXMoYXR0cnMpLmluZGV4T2YoJ3JlZmVyZW5jZUlkJykgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3Npbmcga2V5IHJlZmVyZW5jZUlkIG9mIHJlZmVyZW5jZS4gUmVmZXJlbmNlcyB0byBudWxsIGFyZSBub3QgYWxsb3dlZCcpO1xuICAgIH1cblxuICAgIHRoaXNbJ3N1cGVyJ10uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxufSwge1xuICBpZDoge1xuXG4gICAgLyoqXG4gICAgICAqIGdldCB0aGUgSUQgZm9yIGN1cnJlbnQgcmVmZXJlbmNlIChub3Qgd2hhdCBpdCByZWZlcnMgdG8sIGJ1dCBpdHMgb3duIHVuaXF1ZSBpZGVudGlmaWVyKVxuICAgICAgKiBAcHJvcGVydHkgaWRcbiAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cnNbR1VJRF9LRVldO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSxcbiAgcmVmZXJlbmNlSWQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzLnJlZmVyZW5jZUlkO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgIHRoaXMuYXR0cnMucmVmZXJlbmNlSWQgPSB2YWx1ZTtcblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfVxufSkpO1xuXG52YXIgUmVmZXJlbmNlU2VyaWFsaXplciA9IENvcmVPYmplY3QuZXh0ZW5kKHtcbiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICB9LFxuICBtb2RlbEZvclR5cGU6IGZ1bmN0aW9uIG1vZGVsRm9yVHlwZSgpIC8qIHR5cGUgKi97XG4gICAgcmV0dXJuIFJlZmVyZW5jZU1vZGVsO1xuICB9LFxuICBkZXNlcmlhbGl6ZVNpbmdsZTogZnVuY3Rpb24gZGVzZXJpYWxpemVTaW5nbGUodHlwZSkge1xuICAgIHZhciBzaW5nbGVQYXlsb2FkID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgbWV0YUF0dHJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICAgIHZhciBNb2RlbCA9IHRoaXMubW9kZWxGb3JUeXBlKHR5cGUpO1xuXG4gICAgcmV0dXJuIG5ldyBNb2RlbChzaW5nbGVQYXlsb2FkLCBtZXRhQXR0cnMpO1xuICB9LFxuICBzZXJpYWxpemU6IGZ1bmN0aW9uIHNlcmlhbGl6ZSh0eXBlLCBtb2RlbCkge1xuICAgIHZhciBhdHRycyA9IGFzc2lnbiQxKHt9LCBtb2RlbC5hdHRycyk7XG5cbiAgICByZXR1cm4gYXR0cnM7XG4gIH1cbn0pO1xuXG52YXIgU3RvcmUgPSBDb3JlT2JqZWN0LmV4dGVuZCh7XG4gIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmxvY2FsU3RvcmFnZUF2YWlsYWJsZSA9IHRoaXMuc3RvcmFnZUF2YWlsYWJsZSgnbG9jYWxTdG9yYWdlJyk7XG4gICAgdGhpcy5jYWNoZSA9IHt9O1xuICB9LFxuICBzZXRJdGVtOiBmdW5jdGlvbiBzZXRJdGVtKGtleSwgdmFsdWUpIHtcbiAgICBpZiAodGhpcy5sb2NhbFN0b3JhZ2VBdmFpbGFibGUpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jYWNoZVtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBnZXRJdGVtOiBmdW5jdGlvbiBnZXRJdGVtKGtleSkge1xuICAgIGlmICh0aGlzLmxvY2FsU3RvcmFnZUF2YWlsYWJsZSkge1xuICAgICAgdmFyIHN0cmluZ1ZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyaW5nVmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVba2V5XSB8fCBudWxsO1xuICAgIH1cbiAgfSxcbiAgc3RvcmFnZUF2YWlsYWJsZTogZnVuY3Rpb24gc3RvcmFnZUF2YWlsYWJsZSh0eXBlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBzdG9yYWdlID0gZ2xvYmFsVmFycy5nZXQodHlwZSk7XG4gICAgICB2YXIgeCA9ICdfX3N0b3JhZ2VfdGVzdF9fJztcblxuICAgICAgc3RvcmFnZS5zZXRJdGVtKHgsIHgpO1xuICAgICAgc3RvcmFnZS5yZW1vdmVJdGVtKHgpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcblxudmFyIExvY2FsU3RvcmFnZUFkYXB0ZXIgPSBDb3JlT2JqZWN0LmV4dGVuZCh7XG4gIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN0b3JlID0gbmV3IFN0b3JlKCk7XG4gIH0sXG4gIGlkS2V5Rm9yVHlwZTogZnVuY3Rpb24gaWRLZXlGb3JUeXBlKCkgLyogdHlwZSAqL3tcbiAgICByZXR1cm4gR1VJRF9LRVk7XG4gIH0sXG4gIGZldGNoU2luZ2xlOiBmdW5jdGlvbiBmZXRjaFNpbmdsZSh0eXBlLCBpZCkge1xuICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciB2YWx1ZSA9IF90aGlzNi5zdG9yZS5nZXRJdGVtKF90aGlzNi5zdG9yYWdlS2V5KHR5cGUsIGlkKSk7XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKHR5cGUgKyAnIycgKyBpZCArICcgbm90IGZvdW5kJykpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgfSk7XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKHR5cGUsIHBheWxvYWQpIHtcbiAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgdmFyIGlkID0gX3RoaXM3LmlkZW50aWZ5KHBheWxvYWQpO1xuXG4gICAgICBfdGhpczcuc3RvcmUuc2V0SXRlbShfdGhpczcuc3RvcmFnZUtleSh0eXBlLCBpZCksIHBheWxvYWQpO1xuICAgICAgcmVzb2x2ZShwYXlsb2FkKTtcbiAgICB9KTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUodHlwZSwgaWQsIHBheWxvYWQpIHtcbiAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgX3RoaXM4LnN0b3JlLnNldEl0ZW0oX3RoaXM4LnN0b3JhZ2VLZXkodHlwZSwgaWQpLCBwYXlsb2FkKTtcbiAgICAgIHJlc29sdmUocGF5bG9hZCk7XG4gICAgfSk7XG4gIH0sXG4gIHN0b3JhZ2VLZXk6IGZ1bmN0aW9uIHN0b3JhZ2VLZXkodHlwZSwgaWQpIHtcbiAgICByZXR1cm4gdHlwZSArICcuJyArIGlkO1xuICB9LFxuICBpZGVudGlmeTogZnVuY3Rpb24gaWRlbnRpZnkocGF5bG9hZCkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocGF5bG9hZCk7XG5cbiAgICBpZiAoa2V5cy5sZW5ndGggPT09IDEgJiYgX3R5cGVvZihwYXlsb2FkW2tleXNbMF1dKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBzZXRHdWlkRm9yKHBheWxvYWRba2V5c1swXV0pO1xuICAgIH1cblxuICAgIHJldHVybiBzZXRHdWlkRm9yKHBheWxvYWQpO1xuICB9XG59KTtcblxuLyoqXG4gKiBAbW9kdWxlIHNob3BpZnktYnV5XG4gKiBAc3VibW9kdWxlIHNob3AtY2xpZW50XG4gKi9cblxuZnVuY3Rpb24gZmV0Y2hGYWN0b3J5KGZldGNoVHlwZSwgdHlwZSkge1xuICB2YXIgZnVuYyA9IHZvaWQgMDtcblxuICBzd2l0Y2ggKGZldGNoVHlwZSkge1xuICAgIGNhc2UgJ2FsbCc6XG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2hBbGwodHlwZSk7XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnb25lJzpcbiAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaC5hcHBseSh0aGlzLCBbdHlwZV0uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlICdxdWVyeSc6XG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2hRdWVyeS5hcHBseSh0aGlzLCBbdHlwZV0uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBmdW5jO1xufVxuXG52YXIgU2hvcENsaWVudCA9IENvcmVPYmplY3QuZXh0ZW5kKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHtcbiAgLyoqXG4gICAqIEBjbGFzcyBTaG9wQ2xpZW50XG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuXG4gICAgdGhpcy5zZXJpYWxpemVycyA9IHtcbiAgICAgIHByb2R1Y3RzOiBMaXN0aW5nc1NlcmlhbGl6ZXIsXG4gICAgICBjb2xsZWN0aW9uczogTGlzdGluZ3NTZXJpYWxpemVyLFxuICAgICAgY2FydHM6IENhcnRTZXJpYWxpemVyLFxuICAgICAgcmVmZXJlbmNlczogUmVmZXJlbmNlU2VyaWFsaXplclxuICAgIH07XG5cbiAgICB0aGlzLmFkYXB0ZXJzID0ge1xuICAgICAgcHJvZHVjdHM6IExpc3RpbmdzQWRhcHRlcixcbiAgICAgIGNvbGxlY3Rpb25zOiBMaXN0aW5nc0FkYXB0ZXIsXG4gICAgICBjYXJ0czogTG9jYWxTdG9yYWdlQWRhcHRlcixcbiAgICAgIHJlZmVyZW5jZXM6IExvY2FsU3RvcmFnZUFkYXB0ZXJcbiAgICB9O1xuICB9LFxuXG5cbiAgY29uZmlnOiBudWxsLFxuXG4gIC8qKlxuICAgKiBGZXRjaCBhbGwgb2YgYSBgdHlwZWAsIHJldHVybmluZyBhIHByb21pc2UuXG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY2xpZW50LmZldGNoQWxsKCdwcm9kdWN0cycpLnRoZW4ocHJvZHVjdHMgPT4ge1xuICAgKiAgIC8vIGRvIHRoaW5ncyB3aXRoIHByb2R1Y3RzXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQG1ldGhvZCBmZXRjaEFsbFxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgcGx1cmFsaXplZCBuYW1lIG9mIHRoZSB0eXBlLCBpbiBsb3dlciBjYXNlLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfEFycmF5fSBhIHByb21pc2UgcmVzb2x2aW5nIHdpdGggYW4gYXJyYXkgb2YgYHR5cGVgXG4gICAqL1xuICBmZXRjaEFsbDogZnVuY3Rpb24gZmV0Y2hBbGwodHlwZSkge1xuICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgdmFyIGFkYXB0ZXIgPSBuZXcgdGhpcy5hZGFwdGVyc1t0eXBlXSh0aGlzLmNvbmZpZyk7XG5cbiAgICByZXR1cm4gYWRhcHRlci5mZXRjaE11bHRpcGxlKHR5cGUpLnRoZW4oZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgIHJldHVybiBfdGhpczkuZGVzZXJpYWxpemUodHlwZSwgcGF5bG9hZCwgYWRhcHRlciwgbnVsbCwgeyBtdWx0aXBsZTogdHJ1ZSB9KTtcbiAgICB9KTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBGZXRjaCBvbmUgb2YgYSBgdHlwZWAsIHJldHVybmluZyBhIHByb21pc2UuXG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY2xpZW50LmZldGNoKCdwcm9kdWN0cycsIDEyMykudGhlbihwcm9kdWN0ID0+IHtcbiAgICogICAvLyBkbyB0aGluZ3Mgd2l0aCB0aGUgcHJvZHVjdFxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBtZXRob2QgZmV0Y2hcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIHBsdXJhbGl6ZWQgbmFtZSBvZiB0aGUgdHlwZSwgaW4gbG93ZXIgY2FzZS5cbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBpZCBhIHVuaXF1ZSBpZGVudGlmaWVyXG4gICAqIEByZXR1cm4ge1Byb21pc2V8QmFzZU1vZGVsfSBhIHByb21pc2UgcmVzb2x2aW5nIHdpdGggYSBzaW5nbGUgaW5zdGFuY2Ugb2ZcbiAgICogYHR5cGVgIGV4cHJlc3NlZCBhcyBhIGBCYXNlTW9kZWxgLlxuICAgKi9cbiAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKHR5cGUsIGlkKSB7XG4gICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgdmFyIGFkYXB0ZXIgPSBuZXcgdGhpcy5hZGFwdGVyc1t0eXBlXSh0aGlzLmNvbmZpZyk7XG5cbiAgICByZXR1cm4gYWRhcHRlci5mZXRjaFNpbmdsZSh0eXBlLCBpZCkudGhlbihmdW5jdGlvbiAocGF5bG9hZCkge1xuICAgICAgcmV0dXJuIF90aGlzMTAuZGVzZXJpYWxpemUodHlwZSwgcGF5bG9hZCwgYWRhcHRlciwgbnVsbCwgeyBzaW5nbGU6IHRydWUgfSk7XG4gICAgfSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogRmV0Y2ggbWFueSBvZiBhIGB0eXBlYCwgdGhhdCBtYXRjaCBgcXVlcnlgXG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY2xpZW50LmZldGNoUXVlcnkoJ3Byb2R1Y3RzJywgeyBjb2xsZWN0aW9uX2lkOiA0NTYgfSkudGhlbihwcm9kdWN0cyA9PiB7XG4gICAqICAgLy8gZG8gdGhpbmdzIHdpdGggdGhlIHByb2R1Y3RzXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQG1ldGhvZCBmZXRjaFF1ZXJ5XG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBwbHVyYWxpemVkIG5hbWUgb2YgdGhlIHR5cGUsIGluIGxvd2VyIGNhc2UuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBxdWVyeSBhIHF1ZXJ5IHNlbnQgdG8gdGhlIGFwaSBzZXJ2ZXIuXG4gICAqIEByZXR1cm4ge1Byb21pc2V8QXJyYXl9IGEgcHJvbWlzZSByZXNvbHZpbmcgd2l0aCBhbiBhcnJheSBvZiBgdHlwZWAuXG4gICAqL1xuICBmZXRjaFF1ZXJ5OiBmdW5jdGlvbiBmZXRjaFF1ZXJ5KHR5cGUsIHF1ZXJ5KSB7XG4gICAgdmFyIF90aGlzMTEgPSB0aGlzO1xuXG4gICAgdmFyIGFkYXB0ZXIgPSBuZXcgdGhpcy5hZGFwdGVyc1t0eXBlXSh0aGlzLmNvbmZpZyk7XG5cbiAgICByZXR1cm4gYWRhcHRlci5mZXRjaE11bHRpcGxlKHR5cGUsIHF1ZXJ5KS50aGVuKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICByZXR1cm4gX3RoaXMxMS5kZXNlcmlhbGl6ZSh0eXBlLCBwYXlsb2FkLCBhZGFwdGVyLCBudWxsLCB7IG11bHRpcGxlOiB0cnVlIH0pO1xuICAgIH0pO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBgdHlwZWAsIG9wdGlvbmFsbHkgaW5jbHVkaW5nIGBtb2RlbEF0dHJzYC5cbiAgICpcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjbGllbnQuY3JlYXRlKCdjYXJ0cycsIHsgbGluZV9pdGVtczogWyAuLi4gXSB9KS50aGVuKGNhcnQgPT4ge1xuICAgKiAgIC8vIGRvIHRoaW5ncyB3aXRoIHRoZSBjYXJ0LlxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBtZXRob2QgY3JlYXRlXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBwbHVyYWxpemVkIG5hbWUgb2YgdGhlIHR5cGUsIGluIGxvd2VyIGNhc2UuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbbW9kZWxBdHRycz17fV0gYXR0cmlidXRlcyByZXByZXNlbnRpbmcgdGhlIGludGVybmFsIHN0YXRlXG4gICAqIG9mIHRoZSBtb2RlbCB0byBiZSBwZXJzaXN0ZWQuXG4gICAqIEByZXR1cm4ge1Byb21pc2V8Q2FydE1vZGVsfSBhIHByb21pc2UgcmVzb2x2aW5nIHdpdGggYSBzaW5nbGUgaW5zdGFuY2Ugb2ZcbiAgICogYHR5cGVgXG4gICAqL1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSh0eXBlKSB7XG4gICAgdmFyIF90aGlzMTIgPSB0aGlzO1xuXG4gICAgdmFyIG1vZGVsQXR0cnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgdmFyIGFkYXB0ZXIgPSBuZXcgdGhpcy5hZGFwdGVyc1t0eXBlXSh0aGlzLmNvbmZpZyk7XG4gICAgdmFyIHNlcmlhbGl6ZXIgPSBuZXcgdGhpcy5zZXJpYWxpemVyc1t0eXBlXSh0aGlzLmNvbmZpZyk7XG4gICAgdmFyIE1vZGVsID0gc2VyaWFsaXplci5tb2RlbEZvclR5cGUodHlwZSk7XG4gICAgdmFyIG1vZGVsID0gbmV3IE1vZGVsKG1vZGVsQXR0cnMsIHsgc2hvcENsaWVudDogdGhpcyB9KTtcbiAgICB2YXIgYXR0cnMgPSBzZXJpYWxpemVyLnNlcmlhbGl6ZSh0eXBlLCBtb2RlbCk7XG5cbiAgICByZXR1cm4gYWRhcHRlci5jcmVhdGUodHlwZSwgYXR0cnMpLnRoZW4oZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgIHJldHVybiBfdGhpczEyLmRlc2VyaWFsaXplKHR5cGUsIHBheWxvYWQsIGFkYXB0ZXIsIHNlcmlhbGl6ZXIsIHsgc2luZ2xlOiB0cnVlIH0pO1xuICAgIH0pO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBgdHlwZWAsIG9wdGlvbmFsbHkgaW5jbHVkaW5nIGBhdHRyc2AuXG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY2xpZW50LmNyZWF0ZSgnY2FydHMnLCB7IGxpbmVfaXRlbXM6IFsgLi4uIF0gfSkudGhlbihjYXJ0ID0+IHtcbiAgICogICAvLyBkbyB0aGluZ3Mgd2l0aCB0aGUgY2FydC5cbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgcGx1cmFsaXplZCBuYW1lIG9mIHRoZSB0eXBlLCBpbiBsb3dlciBjYXNlLlxuICAgKiBAcGFyYW0ge0Jhc2VNb2RlbH0gdXBkYXRlZE1vZGVsIFRoZSBtb2RlbCB0aGF0IHJlcHJlc2VudHMgbmV3IHN0YXRlIHRvXG4gICAqIHRvIHBlcnNpc3QuXG4gICAqIEByZXR1cm4ge1Byb21pc2V8Q2FydE1vZGVsfSBhIHByb21pc2UgcmVzb2x2aW5nIHdpdGggYSBzaW5nbGUgaW5zdGFuY2Ugb2ZcbiAgICogYHR5cGVgXG4gICAqL1xuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSh0eXBlLCB1cGRhdGVkTW9kZWwpIHtcbiAgICB2YXIgX3RoaXMxMyA9IHRoaXM7XG5cbiAgICB2YXIgYWRhcHRlciA9IHVwZGF0ZWRNb2RlbC5hZGFwdGVyO1xuICAgIHZhciBzZXJpYWxpemVyID0gdXBkYXRlZE1vZGVsLnNlcmlhbGl6ZXI7XG4gICAgdmFyIHNlcmlhbGl6ZWRNb2RlbCA9IHNlcmlhbGl6ZXIuc2VyaWFsaXplKHR5cGUsIHVwZGF0ZWRNb2RlbCk7XG4gICAgdmFyIGlkID0gdXBkYXRlZE1vZGVsLmF0dHJzW2FkYXB0ZXIuaWRLZXlGb3JUeXBlKHR5cGUpXTtcblxuICAgIHJldHVybiBhZGFwdGVyLnVwZGF0ZSh0eXBlLCBpZCwgc2VyaWFsaXplZE1vZGVsKS50aGVuKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICByZXR1cm4gX3RoaXMxMy5kZXNlcmlhbGl6ZSh0eXBlLCBwYXlsb2FkLCBhZGFwdGVyLCBzZXJpYWxpemVyLCB7IHNpbmdsZTogdHJ1ZSB9KTtcbiAgICB9KTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBQcm94eSB0byBzZXJpYWxpemVyJ3MgZGVzZXJpYWxpemUuXG4gICAqXG4gICAqIEBtZXRob2QgZGVzZXJpYWxpemVcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIHBsdXJhbGl6ZWQgbmFtZSBvZiB0aGUgdHlwZSwgaW4gbG93ZXIgY2FzZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWQgVGhlIHJhdyBwYXlsb2FkIHJldHVybmVkIGJ5IHRoZSBhZGFwdGVyLlxuICAgKiBAcGFyYW0ge0Jhc2VBZGFwdGVyfSBhZGFwdGVyIFRoZSBhZGFwdGVyIHRoYXQgeWllbGRlZCB0aGUgcGF5bG9hZC5cbiAgICogQHBhcmFtIHtCYXNlU2VyaWFsaXplcn0gZXhpc3RpbmdTZXJpYWxpemVyIFRoZSBzZXJpYWxpemVyIHRvIGF0dGFjaC4gSWZcbiAgICogbm9uZSBpcyBwYXNzZWQsIHRoZW4gYHRoaXMuZGVzZXJpYWxpemVgIHdpbGwgY3JlYXRlIG9uZSBmb3IgdGhlIHR5cGUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbnMgdGhhdCBkZXRlcm1pbmUgd2hpY2ggZGVzZXJpYWxpemF0aW9uIG1ldGhvZCB0b1xuICAgKiB1c2UuXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0cy5tdWx0aXBsZSB0cnVlIHdoZW4gdGhlIHBheWxvYWQgcmVwcmVzZW50cyBtdWx0aXBsZVxuICAgKiBtb2RlbHNcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRzLnNpbmdsZSB0cnVlIHdoZW4gdGhlIHBheWxvYWQgcmVwcmVzZW50cyBvbmUgbW9kZWwuXG4gICAqIEByZXR1cm4ge0Jhc2VNb2RlbH0gYW4gaW5zdGFuY2Ugb2YgYHR5cGVgIHJlaWZpZWQgaW50byBhIG1vZGVsLlxuICAgKi9cbiAgZGVzZXJpYWxpemU6IGZ1bmN0aW9uIGRlc2VyaWFsaXplKHR5cGUsIHBheWxvYWQsIGFkYXB0ZXIsIGV4aXN0aW5nU2VyaWFsaXplcikge1xuICAgIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB7fTtcblxuICAgIHZhciBzZXJpYWxpemVyID0gZXhpc3RpbmdTZXJpYWxpemVyIHx8IG5ldyB0aGlzLnNlcmlhbGl6ZXJzW3R5cGVdKHRoaXMuY29uZmlnKTtcbiAgICB2YXIgbWV0YSA9IHsgc2hvcENsaWVudDogdGhpcywgYWRhcHRlcjogYWRhcHRlciwgc2VyaWFsaXplcjogc2VyaWFsaXplciwgdHlwZTogdHlwZSB9O1xuICAgIHZhciBzZXJpYWxpemVkUGF5bG9hZCA9IHZvaWQgMDtcblxuICAgIGlmIChvcHRzLm11bHRpcGxlKSB7XG4gICAgICBzZXJpYWxpemVkUGF5bG9hZCA9IHNlcmlhbGl6ZXIuZGVzZXJpYWxpemVNdWx0aXBsZSh0eXBlLCBwYXlsb2FkLCBtZXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VyaWFsaXplZFBheWxvYWQgPSBzZXJpYWxpemVyLmRlc2VyaWFsaXplU2luZ2xlKHR5cGUsIHBheWxvYWQsIG1ldGEpO1xuICAgIH1cblxuICAgIHJldHVybiBzZXJpYWxpemVkUGF5bG9hZDtcbiAgfSxcblxuXG4gIC8qKlxuICAgICogQ3JlYXRlcyBhIHt7I2Nyb3NzTGluayBcIkNhcnRNb2RlbFwifX1DYXJ0TW9kZWx7ey9jcm9zc0xpbmt9fSBpbnN0YW5jZS5cbiAgICAqXG4gICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgKiBjbGllbnQuY3JlYXRlQ2FydCgpLnRoZW4oY2FydCA9PiB7XG4gICAgKiAgIC8vIGRvIHNvbWV0aGluZyB3aXRoIGNhcnRcbiAgICAqIH0pO1xuICAgICogYGBgXG4gICAgKlxuICAgICogQG1ldGhvZCBjcmVhdGVDYXJ0XG4gICAgKiBAcHVibGljXG4gICAgKiBAcmV0dXJuIHtQcm9taXNlfENhcnRNb2RlbH0gLSBuZXcgY2FydCBpbnN0YW5jZS5cbiAgKi9cbiAgY3JlYXRlQ2FydDogZnVuY3Rpb24gY3JlYXRlQ2FydCgpIHtcbiAgICB2YXIgdXNlckF0dHJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIHZhciBiYXNlQXR0cnMgPSB7XG4gICAgICBsaW5lX2l0ZW1zOiBbXVxuICAgIH07XG4gICAgdmFyIGF0dHJzID0ge307XG5cbiAgICBhc3NpZ24kMShhdHRycywgYmFzZUF0dHJzKTtcbiAgICBhc3NpZ24kMShhdHRycywgdXNlckF0dHJzKTtcblxuICAgIHJldHVybiB0aGlzLmNyZWF0ZSgnY2FydHMnLCBhdHRycyk7XG4gIH0sXG5cblxuICAvKipcbiAgICAqIFVwZGF0ZXMgYW4gZXhpc3Rpbmcge3sjY3Jvc3NMaW5rIFwiQ2FydE1vZGVsXCJ9fUNhcnRNb2RlbHt7L2Nyb3NzTGlua319IGluc3RhbmNlIGFuZCBwZXJzaXN0cyBpdCB0byBsb2NhbFN0b3JhZ2UuXG4gICAgKlxuICAgICogYGBgamF2YXNjcmlwdFxuICAgICogY2xpZW50LmNyZWF0ZUNhcnQoKS50aGVuKGNhcnQgPT4ge1xuICAgICogICBjYXJ0LmxpbmVJdGVtcyA9IFtcbiAgICAqICAgICAvLyAuLi5cbiAgICAqICAgXTtcbiAgICAqICAgY2xpZW50LnVwZGF0ZUNhcnQoY2FydCk7XG4gICAgKiB9KTtcbiAgICAqIGBgYFxuICAgICpcbiAgICAqIEBwYXJhbSB7Q2FydE1vZGVsfSB1cGRhdGVkQ2FydCBhbiB1cGRhdGVkIENhcnRNb2RlbFxuICAgICogQG1ldGhvZCB1cGRhdGVDYXJ0XG4gICAgKiBAcHJpdmF0ZVxuICAgICogQHJldHVybiB7UHJvbWlzZXxDYXJ0TW9kZWx9IC0gdXBkYXRlZCBjYXJ0IGluc3RhbmNlLlxuICAqL1xuICB1cGRhdGVDYXJ0OiBmdW5jdGlvbiB1cGRhdGVDYXJ0KHVwZGF0ZWRDYXJ0KSB7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlKCdjYXJ0cycsIHVwZGF0ZWRDYXJ0KTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSBhIHByZXZpb3VzbHkgY3JlYXRlZCBjYXJ0IGJ5IGl0cyBrZXkuXG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY2xpZW50LmZldGNoQ2FydCgnc2hvcGlmeS1idXkuMTQ1OTgwNDY5OTExOC4yJykudGhlbihjYXJ0ID0+IHtcbiAgICogICBjb25zb2xlLmxvZyhjYXJ0KTsgLy8gVGhlIHJldHJpZXZlZCBjYXJ0XG4gICAqIH0pO1xuICAgKlxuICAgKiBAbWV0aG9kIGZldGNoQ2FydFxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpZCBUaGUgY2FydCdzIHVuaXF1ZSBpZGVudGlmaWVyXG4gICAqIEByZXR1cm4ge1Byb21pc2V8Q2FydE1vZGVsfSBUaGUgY2FydCBtb2RlbC5cbiAgICpcbiAgICovXG4gIGZldGNoQ2FydDogZmV0Y2hGYWN0b3J5KCdvbmUnLCAnY2FydHMnKSxcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiBhbiBgQXJyYXlgIG9mIHByb2R1Y3RzIGZyb20geW91ciBzdG9yZVxuICAgKiBgYGBcbiAgICogY2xpZW50LmZldGNoQWxsUHJvZHVjdHMoKVxuICAgKiAudGhlbihmdW5jdGlvbihwcm9kdWN0cykge1xuICAgKiAgIC8vIGFsbCBwcm9kdWN0cyBpbiBzdG9yZVxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBtZXRob2QgZmV0Y2hBbGxQcm9kdWN0c1xuICAgKiBAcHVibGljXG4gICAqIEByZXR1cm4ge1Byb21pc2V8QXJyYXl9IFRoZSBwcm9kdWN0IG1vZGVscy5cbiAgICovXG4gIGZldGNoQWxsUHJvZHVjdHM6IGZldGNoRmFjdG9yeSgnYWxsJywgJ3Byb2R1Y3RzJyksXG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gYW4gYEFycmF5YCBvZiBjb2xsZWN0aW9ucyBmcm9tIHlvdXIgc3RvcmVcbiAgICogYGBgXG4gICAqIGNsaWVudC5mZXRjaEFsbENvbGxlY3Rpb25zKClcbiAgICogLnRoZW4oZnVuY3Rpb24oY29sbGVjdGlvbnMpIHtcbiAgICpcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAbWV0aG9kIGZldGNoQWxsQ29sbGVjdGlvbnNcbiAgICogQHB1YmxpY1xuICAgKiBAcmV0dXJuIHtQcm9taXNlfEFycmF5fSBUaGUgY29sbGVjdGlvbiBtb2RlbHMuXG4gICAqL1xuICBmZXRjaEFsbENvbGxlY3Rpb25zOiBmZXRjaEZhY3RvcnkoJ2FsbCcsICdjb2xsZWN0aW9ucycpLFxuXG4gIC8qKlxuICAgKiBGZXRjaCBvbmUgcHJvZHVjdCBieSBpdHMgSUQuXG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY2xpZW50LmZldGNoUHJvZHVjdCgnODU2OTkxMTU1OCcpLnRoZW4ocHJvZHVjdCA9PiB7XG4gICAqICAgY29uc29sZS5sb2cocHJvZHVjdCk7IC8vIFRoZSBwcm9kdWN0IHdpdGggYW4gSUQgb2YgJzg1Njk5MTE1NTgnXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQG1ldGhvZCBmZXRjaFByb2R1Y3RcbiAgICogQHB1YmxpY1xuICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGlkIGEgdW5pcXVlIGlkZW50aWZpZXJcbiAgICogQHJldHVybiB7UHJvbWlzZXxCYXNlTW9kZWx9IFRoZSBwcm9kdWN0IG1vZGVsIHdpdGggdGhlIHNwZWNpZmllZCBJRC5cbiAgICovXG4gIGZldGNoUHJvZHVjdDogZmV0Y2hGYWN0b3J5KCdvbmUnLCAncHJvZHVjdHMnKSxcblxuICAvKipcbiAgICogRmV0Y2ggb25lIGNvbGxlY3Rpb24gYnkgaXRzIElELlxuICAgKlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNsaWVudC5mZXRjaENvbGxlY3Rpb24oJzMzNjkwMzQ5NCcpLnRoZW4oY29sbGVjdGlvbiA9PiB7XG4gICAqICAgY29uc29sZS5sb2coY29sbGVjdGlvbik7IC8vIFRoZSBjb2xsZWN0aW9uIHdpdGggYW4gSUQgb2YgJzMzNjkwMzQ5NCdcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAbWV0aG9kIGZldGNoQ29sbGVjdGlvblxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gaWQgYSB1bmlxdWUgaWRlbnRpZmllclxuICAgKiBAcmV0dXJuIHtQcm9taXNlfEJhc2VNb2RlbH0gVGhlIGNvbGxlY3Rpb24gbW9kZWwgd2l0aCB0aGUgc3BlY2lmaWVkIElELlxuICAgKi9cbiAgZmV0Y2hDb2xsZWN0aW9uOiBmZXRjaEZhY3RvcnkoJ29uZScsICdjb2xsZWN0aW9ucycpLFxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIGEgbGlzdCBvZiBwcm9kdWN0cyBtYXRjaGluZyBhIHNwZWNpZmllZCBxdWVyeS5cbiAgICpcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjbGllbnQuZmV0Y2hRdWVyeVByb2R1Y3RzKHsgY29sbGVjdGlvbl9pZDogJzMzNjkwMzQ5NCcsIHRhZzogWydoYXRzJ10gfSkudGhlbihwcm9kdWN0cyA9PiB7XG4gICAqICAgY29uc29sZS5sb2cocHJvZHVjdHMpOyAvLyBBbiBhcnJheSBvZiBwcm9kdWN0cyBpbiBjb2xsZWN0aW9uICczMzY5MDM0OTQnIGhhdmluZyB0aGUgdGFnICdoYXRzJ1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqIEBtZXRob2QgZmV0Y2hRdWVyeVByb2R1Y3RzXG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtIHtPYmplY3R9IHF1ZXJ5IEEgcXVlcnkgc2VudCB0byB0aGUgYXBpIHNlcnZlciBjb250YWluaW5nIG9uZSBvciBtb3JlIG9mOlxuICAgKiAgIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gW3F1ZXJ5LmNvbGxlY3Rpb25faWRdIFRoZSBJRCBvZiBhIGNvbGxlY3Rpb24gdG8gcmV0cmlldmUgcHJvZHVjdHMgZnJvbVxuICAgKiAgIEBwYXJhbSB7QXJyYXl9IFtxdWVyeS50YWddIEEgbGlzdCBvZiB0YWdzIHRvIGZpbHRlciB0aGUgcHJvZHVjdHMgYnkuIEFjY2VwdHMgdXAgdG8gMTAgdGFncy5cbiAgICogICBAcGFyYW0ge0FycmF5fSBbcXVlcnkucHJvZHVjdF9pZHNdIEEgbGlzdCBvZiBwcm9kdWN0IElEcyB0byByZXRyaWV2ZVxuICAgKiAgIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gW3F1ZXJ5LnBhZ2U9MV0gVGhlIHBhZ2Ugb2Zmc2V0IG51bWJlciBvZiB0aGUgY3VycmVudCBsb29rdXAgKGJhc2VkIG9uIHRoZSBgbGltaXRgKVxuICAgKiAgIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gW3F1ZXJ5LmxpbWl0PTUwXSBUaGUgbnVtYmVyIG9mIHByb2R1Y3RzIHRvIHJldHJpZXZlIHBlciBwYWdlXG4gICAqICAgQHBhcmFtIHtTdHJpbmd9IFtxdWVyeS5oYW5kbGVdIFRoZSBoYW5kbGUgb2YgdGhlIHByb2R1Y3QgdG8gbG9vayB1cFxuICAgKiAgIEBwYXJhbSB7U3RyaW5nfSBbcXVlcnkudXBkYXRlZF9hdF9taW5dIFByb2R1Y3RzIHVwZGF0ZWQgc2luY2UgdGhlIHN1cHBsaWVkIHRpbWVzdGFtcCAoZm9ybWF0OiAyMDA4LTEyLTMxIDAzOjAwKVxuICAgKiAgIEBwYXJhbSB7U3RyaW5nfSBbcXVlcnkuc29ydF9ieV0gV2lsbCBtb2RpZnkgaG93IHByb2R1Y3RzIGFyZSBvcmRlcmVkLiBQb3NzaWJsZSB2YWx1ZXMgYXJlOlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFwidXBkYXRlZF9hdFwiYCwgYFwiYmVzdC1zZWxsaW5nXCJgLCBgXCJ0aXRsZS1hc2NlbmRpbmdcImAsIGBcInRpdGxlLWRlc2NlbmRpbmdcImAsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXCJwcmljZS1kZXNjZW5kaW5nXCJgLCBgXCJwcmljZS1hc2NlbmRpbmdcImAsIGBcImNyZWF0ZWQtZGVzY2VuZGluZ1wiYCwgYFwiY3JlYXRlZC1hc2NlbmRpbmdcImAsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBgXCJjb2xsZWN0aW9uLWRlZmF1bHRcImAuIFVzaW5nIGBcImNvbGxlY3Rpb24tZGVmYXVsdFwiYCBtZWFucyB0aGF0IHByb2R1Y3RzIHdpbGwgYmUgb3JkZXJlZFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHVzaW5nIHRoZSBjdXN0b20gb3JkZXJpbmcgZGVmaW5lZCBpbiB5b3VyIFNob3BpZnkgQWRtaW4uIERlZmF1bHQgdmFsdWUgYFwiY29sbGVjdGlvbi1kZWZhdWx0XCJgLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfEFycmF5fSBUaGUgcHJvZHVjdCBtb2RlbHMuXG4gICAqL1xuICBmZXRjaFF1ZXJ5UHJvZHVjdHM6IGZldGNoRmFjdG9yeSgncXVlcnknLCAncHJvZHVjdHMnKSxcblxuICAvKipcbiAgICogRmV0Y2hlcyBhIGxpc3Qgb2YgY29sbGVjdGlvbnMgbWF0Y2hpbmcgYSBzcGVjaWZpZWQgcXVlcnkuXG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY2xpZW50LmZldGNoUXVlcnlDb2xsZWN0aW9ucyh7cGFnZTogMiwgbGltaXQ6IDIwfSkudGhlbihjb2xsZWN0aW9ucyA9PiB7XG4gICAqICAgY29uc29sZS5sb2coY29sbGVjdGlvbnMpOyAvLyBBbiBhcnJheSBvZiBjb2xsZWN0aW9uIHJlc291cmNlc1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBtZXRob2QgZmV0Y2hRdWVyeUNvbGxlY3Rpb25zXG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtIHtPYmplY3R9IHF1ZXJ5IGEgcXVlcnkgc2VudCB0byB0aGUgYXBpIHNlcnZlci5cbiAgICogICBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IFtxdWVyeS5wYWdlPTFdIHRoZSBwYWdlIG9mZnNldCBudW1iZXIgb2YgdGhlIGN1cnJlbnQgbG9va3VwIChiYXNlZCBvbiB0aGUgYGxpbWl0YClcbiAgICogICBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IFtxdWVyeS5saW1pdD01MF0gdGhlIG51bWJlciBvZiBjb2xsZWN0aW9ucyB0byByZXRyaWV2ZSBwZXIgcGFnZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfEFycmF5fSBUaGUgY29sbGVjdGlvbiBtb2RlbHMuXG4gICAqL1xuICBmZXRjaFF1ZXJ5Q29sbGVjdGlvbnM6IGZldGNoRmFjdG9yeSgncXVlcnknLCAnY29sbGVjdGlvbnMnKSxcblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgbG9va3MgdXAgYSByZWZlcmVuY2UgaW4gbG9jYWxTdG9yYWdlIHRvIHRoZSBtb3N0IHJlY2VudCBjYXJ0LlxuICAgKiBJZiBvbmUgaXMgbm90IGZvdW5kLCBjcmVhdGVzIG9uZS4gSWYgdGhlIGNhcnQgdGhlIHJlZmVyZW5jZSBwb2ludHMgdG9cbiAgICogZG9lc24ndCBleGlzdCwgY3JlYXRlIG9uZSBhbmQgc3RvcmUgdGhlIG5ldyByZWZlcmVuY2UuXG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY2xpZW50LmZldGNoUmVjZW50Q2FydCgpLnRoZW4oY2FydCA9PiB7XG4gICAqICAvLyBkbyBzdHVmZiB3aXRoIHRoZSBjYXJ0XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQG1ldGhvZCBmZXRjaFJlY2VudENhcnRcbiAgICogQHB1YmxpY1xuICAgKiBAcmV0dXJuIHtQcm9taXNlfENhcnRNb2RlbH0gVGhlIGNhcnQuXG4gICAqL1xuICBmZXRjaFJlY2VudENhcnQ6IGZ1bmN0aW9uIGZldGNoUmVjZW50Q2FydCgpIHtcbiAgICB2YXIgX3RoaXMxNCA9IHRoaXM7XG5cbiAgICByZXR1cm4gdGhpcy5mZXRjaCgncmVmZXJlbmNlcycsIHRoaXMuY29uZmlnLmRvbWFpbiArICcucmVjZW50LWNhcnQnKS50aGVuKGZ1bmN0aW9uIChyZWZlcmVuY2UpIHtcbiAgICAgIHZhciBjYXJ0SWQgPSByZWZlcmVuY2UucmVmZXJlbmNlSWQ7XG5cbiAgICAgIHJldHVybiBfdGhpczE0LmZldGNoQ2FydChjYXJ0SWQpO1xuICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpczE0LmNyZWF0ZUNhcnQoKS50aGVuKGZ1bmN0aW9uIChjYXJ0KSB7XG4gICAgICAgIHZhciByZWZBdHRycyA9IHtcbiAgICAgICAgICByZWZlcmVuY2VJZDogY2FydC5pZFxuICAgICAgICB9O1xuXG4gICAgICAgIHJlZkF0dHJzW0dVSURfS0VZXSA9IF90aGlzMTQuY29uZmlnLmRvbWFpbiArICcucmVjZW50LWNhcnQnO1xuXG4gICAgICAgIF90aGlzMTQuY3JlYXRlKCdyZWZlcmVuY2VzJywgcmVmQXR0cnMpO1xuXG4gICAgICAgIHJldHVybiBjYXJ0O1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0sIHtcbiAgc2VyaWFsaXplcnM6IHtcbiAgICAvKipcbiAgICAgKiBAYXR0cmlidXRlXG4gICAgICogQGRlZmF1bHQge1xuICAgICAqICBwcm9kdWN0czogTGlzdGluZ3NBZGFwdGVyLFxuICAgICAqICBjb2xsZWN0aW9uczogTGlzdGluZ3NBZGFwdGVyLFxuICAgICAqICBjYXJ0czogQ2FydEFkYXB0ZXJcbiAgICAgKiB9XG4gICAgICogQHR5cGUgT2JqZWN0XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIC8vIFByZXZlbnQgbGVha3kgc3RhdGVcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBhc3NpZ24kMSh7fSwgdGhpcy5zaGFkb3dlZFNlcmlhbGl6ZXJzKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlcykge1xuICAgICAgdGhpcy5zaGFkb3dlZFNlcmlhbGl6ZXJzID0gYXNzaWduJDEoe30sIHZhbHVlcyk7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9LFxuICBhZGFwdGVyczoge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGFzc2lnbiQxKHt9LCB0aGlzLnNoYWRvd2VkQWRhcHRlcnMpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWVzKSB7XG4gICAgICB0aGlzLnNoYWRvd2VkQWRhcHRlcnMgPSBhc3NpZ24kMSh7fSwgdmFsdWVzKTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH1cbn0pKTtcblxuLyogZ2xvYmFscyByZXF1aXJlICovXG5cbmlmIChpc05vZGVMaWtlRW52aXJvbm1lbnQoKSkge1xuICAvKiB0aGlzIGluZGlyZWN0aW9uIGlzIG5lZWRlZCBiZWNhdXNlIGJhYmVsIHRocm93cyBlcnJvcnMgd2hlblxuICAgKiB0cmFuc3BpbGluZyByZXF1aXJlKCdub2RlLWZldGNoJykgdXNpbmcgYGFtZGAgcGx1Z2luIHdpdGggYmFiZWw2XG4gICAqL1xuICB2YXIgbG9jYWxSZXF1aXJlID0gcmVxdWlyZTtcbiAgdmFyIF9mZXRjaCA9IGxvY2FsUmVxdWlyZSgnbm9kZS1mZXRjaCcpO1xuXG4gIGdsb2JhbFZhcnMuc2V0KCdmZXRjaCcsIF9mZXRjaCk7XG4gIGdsb2JhbFZhcnMuc2V0KCdSZXNwb25zZScsIF9mZXRjaC5SZXNwb25zZSk7XG59XG5cbi8qIGdsb2JhbCBCdWZmZXIgKi9cblxuaWYgKGlzTm9kZUxpa2VFbnZpcm9ubWVudCgpKSB7XG4gIGdsb2JhbFZhcnMuc2V0KCdidG9hJywgZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKHN0cmluZykudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBAbW9kdWxlIHNob3BpZnktYnV5XG4gKiBAc3VibW9kdWxlIHNob3BpZnlcbiAqL1xuXG4vKipcbiAqIGBTaG9waWZ5QnV5YCBvbmx5IGRlZmluZXMgb25lIGZ1bmN0aW9uIHt7I2Nyb3NzTGluayBcIlNob3BpZnlCdXkvYnVpbGRDbGllbnRcIn19e3svY3Jvc3NMaW5rfX0gd2hpY2ggY2FuXG4gKiBiZSB1c2VkIHRvIGJ1aWxkIGEge3sjY3Jvc3NMaW5rIFwiU2hvcENsaWVudFwifX17ey9jcm9zc0xpbmt9fSB0byBxdWVyeSB5b3VyIHN0b3JlIHVzaW5nIHRoZVxuICogcHJvdmlkZWRcbiAqIHt7I2Nyb3NzTGluayBcIlNob3BpZnlCdXkvYnVpbGRDbGllbnQvY29uZmlnQXR0cnM6YXBpS2V5XCJ9fWBhcGlLZXlge3svY3Jvc3NMaW5rfX0sXG4gKiB7eyNjcm9zc0xpbmsgXCJTaG9waWZ5QnV5L2J1aWxkQ2xpZW50L2NvbmZpZ0F0dHJzOmFwcElkXCJ9fWBhcHBJZGB7ey9jcm9zc0xpbmt9fSxcbiAqIGFuZCB7eyNjcm9zc0xpbmsgXCJTaG9waWZ5QnV5L2J1aWxkQ2xpZW50L2NvbmZpZ0F0dHJzOmRvbWFpblwifX1gZG9tYWluYHt7L2Nyb3NzTGlua319LlxuICogQGNsYXNzIFNob3BpZnlCdXlcbiAqIEBzdGF0aWNcbiAqL1xudmFyIFNob3BpZnkgPSB7XG4gIFNob3BDbGllbnQ6IFNob3BDbGllbnQsXG4gIENvbmZpZzogQ29uZmlnLFxuICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICBOT19JTUFHRV9VUkk6IE5PX0lNQUdFX1VSSSxcblxuICAvKipcbiAgICogQ3JlYXRlIGEgU2hvcENsaWVudC4gVGhpcyBpcyB0aGUgbWFpbiBlbnRyeSBwb2ludCB0byB0aGUgU0RLLlxuICAgKlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IGNsaWVudCA9IFNob3BpZnlCdXkuYnVpbGRDbGllbnQoe1xuICAgKiAgIGFwaUtleTogJ2JmMDgxZTg2MGJjOWRjMWNlMDY1NGZkZmJjMjA4OTJkJyxcbiAgICogICBhcHBJZDogNixcbiAgICogICBteVNob3BpZnlEb21haW46ICd5b3VyLXNob3Atc3ViZG9tYWluLm15c2hvcGlmeS5jb20nLCAvL0RlcHJlY2F0ZWQuIFVzZSBgZG9tYWluYCBpbnN0ZWFkXG4gICAqICAgZG9tYWluOiAnZW1iZWRzLm15c2hvcGlmeS5jb20nXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQG1ldGhvZCBidWlsZENsaWVudFxuICAgKiBAZm9yIFNob3BpZnlCdXlcbiAgICogQHN0YXRpY1xuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdBdHRycyBBbiBvYmplY3Qgb2YgcmVxdWlyZWQgY29uZmlnIGRhdGEgc3VjaCBhczogYGFwaUtleWAsIGBhcHBJZGAsIGBkb21haW5gXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb25maWdBdHRycy5hcGlLZXkgQW4gQVBJIEtleSBmb3IgeW91ciBzdG9yZS4gRG9jdW1lbnRhdGlvbiBob3cgdG8gZ2V0IGFuIEFQSSBLZXk6XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL2FwaS9zZGtzL2pzLWJ1eS1zZGsvZ2V0dGluZy1zdGFydGVkI2FwaS1rZXlcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNvbmZpZ0F0dHJzLmFwcElkIFR5cGljYWxseSB3aWxsIGJlIDYgd2hpY2ggaXMgdGhlIEJ1eSBCdXR0b24gQXBwIElkLiBGb3IgbW9yZSBpbmZvIG9uIEFwcCBJZCBzZWU6XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vYXBpL3Nka3MvanMtYnV5LXNkay9nZXR0aW5nLXN0YXJ0ZWQjYXBwLWlkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb25maWdBdHRycy5kb21haW4gWW91ciBzaG9wJ3MgZnVsbCBgbXlzaG9waWZ5LmNvbWAgZG9tYWluLiBGb3IgZXhhbXBsZTogYGVtYmVkcy5teXNob3BpZnkuY29tYFxuICAgKiBAcGFyYW0ge1N0cmluZ30gY29uZmlnQXR0cnMubXlTaG9waWZ5RG9tYWluIFlvdSBzaG9wJ3MgYG15c2hvcGlmeS5jb21gIGRvbWFpbi4gW2RlcHJlY2F0ZWQgVXNlIGNvbmZpZ0F0dHJzLmRvbWFpbl1cbiAgICogQHJldHVybiB7U2hvcENsaWVudH0gYSBjbGllbnQgZm9yIHRoZSBzaG9wIHVzaW5nIHlvdXIgYXBpIGNyZWRlbnRpYWxzIHdoaWNoIHlvdSBjYW4gdXNlIHRvIHF1ZXJ5IHlvdXIgc3RvcmUuXG4gICAqL1xuICBidWlsZENsaWVudDogZnVuY3Rpb24gYnVpbGRDbGllbnQoKSB7XG4gICAgdmFyIGNvbmZpZ0F0dHJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIHZhciBjb25maWcgPSBuZXcgdGhpcy5Db25maWcoY29uZmlnQXR0cnMpO1xuXG4gICAgcmV0dXJuIG5ldyB0aGlzLlNob3BDbGllbnQoY29uZmlnKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaG9waWZ5O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Nob3BpZnktYnV5L2xpYi9zaG9waWZ5LmpzXG4vLyBtb2R1bGUgaWQgPSAzMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwidmFyIGNhbWVsMmh5cGhlbiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0clxuICAgICAgICAgIC5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiAnLScgKyBtYXRjaC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRvTG93ZXJDYXNlKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNhbWVsMmh5cGhlbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc3RyaW5nLWNvbnZlcnQvY2FtZWwyaHlwaGVuLmpzXG4vLyBtb2R1bGUgaWQgPSAzMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHtQcm92aWRlcn0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHNob3BpZnlBUEkgZnJvbSAnc2hvcGlmeUFQSSc7XG5pbXBvcnQgJ2FwcGxpY2F0aW9uU3R5bGVzJztcblxubGV0IGNhcnRBY3Rpb25zID0gcmVxdWlyZSgnY2FydEFjdGlvbnMnKTtcbmxldCBwcm9kdWN0QWN0aW9ucyA9IHJlcXVpcmUoJ3Byb2R1Y3RBY3Rpb25zJyk7XG5sZXQgY29sbGVjdGlvbkFjdGlvbnMgPSByZXF1aXJlKCdjb2xsZWN0aW9uQWN0aW9ucycpO1xubGV0IHN0b3JlID0gcmVxdWlyZSgnY29uZmlndXJlU3RvcmUnKS5jb25maWd1cmUoKTtcbmltcG9ydCByb3V0ZXIgZnJvbSAnLi9yb3V0ZXIvcm91dGVyLmpzeCc7XG5cblxuLy8gc3Vic2NyaWJlIHRvIHRoZSByZWR1eCBzdG9yZVxuc3RvcmUuc3Vic2NyaWJlKCgpID0+IHtcbiAgbGV0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgY29uc29sZS5sb2coJ05ldyBzdGF0ZScsIHN0YXRlKTtcbn0pO1xuXG4vLyBhZGQgcHJvZHVjdHMgYW5kIGNvbGxlY3Rpb25zIHRvIHN0b3JlXG5zdG9yZS5kaXNwYXRjaChwcm9kdWN0QWN0aW9ucy5zdGFydEFkZFByb2R1Y3RzKCkpO1xuc3RvcmUuZGlzcGF0Y2goY29sbGVjdGlvbkFjdGlvbnMuc3RhcnRBZGRDb2xsZWN0aW9ucygpKTtcblxuLy8gY3JlYXRlIHNob3BpZnkgY2FydCBpbnN0YW5jZSBiYXNlZCBvbiBsYXN0IHNlc3Npb24gKGJhc2VkIG9uIGxvY2FsU3RvcmFnZSlcbmlmKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYXN0Q2FydElkJykpIHtcbiAgc2hvcGlmeUFQSS5yZXN0b3JlQ2FydCgpLnRoZW4oKGxvY2FsQ2FydCkgPT4ge1xuICAgIHN0b3JlLmRpc3BhdGNoKHsgdHlwZTogJ1NFVF9JTklUSUFMX0NBUlRfU1RBVEUnLCBsb2NhbENhcnQgfSk7XG4gIH0pO1xufWVsc2V7XG4gIHNob3BpZnlBUEkuY3JlYXRlQ2FydCgpLnRoZW4oKGxvY2FsQ2FydCkgPT4ge1xuICAgIHN0b3JlLmRpc3BhdGNoKHsgdHlwZTogJ1NFVF9JTklUSUFMX0NBUlRfU1RBVEUnLCBsb2NhbENhcnQgfSk7XG4gIH0pO1xufVxuXG4vLyBBcHAgY3NzXG4vLyByZXF1aXJlKCdzdHlsZSFjc3Mhc2FzcyFhcHBsaWNhdGlvblN0eWxlcycpXG5cblJlYWN0RE9NLnJlbmRlcihcbiAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAge3JvdXRlcn1cbiAgPC9Qcm92aWRlcj4sXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKVxuKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9hcHAuanN4Il0sInNvdXJjZVJvb3QiOiIifQ==